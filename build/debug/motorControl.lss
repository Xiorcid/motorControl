
build/debug/motorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003880  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dcc  0800398c  0800398c  0000498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800475c  0800475c  0000575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000000  08004760  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006e8  20000064  080047c4  00006064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000074c  080047c4  0000674c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012bcd  00000000  00000000  000060c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026a9  00000000  00000000  00018c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 0000ac00  00000000  00000000  0001b33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ed8  00000000  00000000  00025f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b9c  00000000  00000000  00026e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000122fe  00000000  00000000  000279b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00004402  00000000  00000000  00039cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002a0c  00000000  00000000  0003e0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000003c  00000000  00000000  00040ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003974 	.word	0x08003974

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003974 	.word	0x08003974

0800014c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000150:	2400      	movs	r4, #0
 8000152:	9404      	str	r4, [sp, #16]
 8000154:	9405      	str	r4, [sp, #20]
 8000156:	9406      	str	r4, [sp, #24]
 8000158:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800015a:	4b2e      	ldr	r3, [pc, #184]	@ (8000214 <MX_GPIO_Init+0xc8>)
 800015c:	699a      	ldr	r2, [r3, #24]
 800015e:	f042 0210 	orr.w	r2, r2, #16
 8000162:	619a      	str	r2, [r3, #24]
 8000164:	699a      	ldr	r2, [r3, #24]
 8000166:	f002 0210 	and.w	r2, r2, #16
 800016a:	9200      	str	r2, [sp, #0]
 800016c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800016e:	699a      	ldr	r2, [r3, #24]
 8000170:	f042 0220 	orr.w	r2, r2, #32
 8000174:	619a      	str	r2, [r3, #24]
 8000176:	699a      	ldr	r2, [r3, #24]
 8000178:	f002 0220 	and.w	r2, r2, #32
 800017c:	9201      	str	r2, [sp, #4]
 800017e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000180:	699a      	ldr	r2, [r3, #24]
 8000182:	f042 0204 	orr.w	r2, r2, #4
 8000186:	619a      	str	r2, [r3, #24]
 8000188:	699a      	ldr	r2, [r3, #24]
 800018a:	f002 0204 	and.w	r2, r2, #4
 800018e:	9202      	str	r2, [sp, #8]
 8000190:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000192:	699a      	ldr	r2, [r3, #24]
 8000194:	f042 0208 	orr.w	r2, r2, #8
 8000198:	619a      	str	r2, [r3, #24]
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	f003 0308 	and.w	r3, r3, #8
 80001a0:	9303      	str	r3, [sp, #12]
 80001a2:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|PH1L_Pin|PH2L_Pin|PH3L_Pin, GPIO_PIN_RESET);
 80001a4:	4e1c      	ldr	r6, [pc, #112]	@ (8000218 <MX_GPIO_Init+0xcc>)
 80001a6:	4622      	mov	r2, r4
 80001a8:	f44f 510e 	mov.w	r1, #9088	@ 0x2380
 80001ac:	4630      	mov	r0, r6
 80001ae:	f001 fad2 	bl	8001756 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin PH1L_Pin PH2L_Pin PH3L_Pin */
  GPIO_InitStruct.Pin = LED_Pin|PH1L_Pin|PH2L_Pin|PH3L_Pin;
 80001b2:	f44f 530e 	mov.w	r3, #9088	@ 0x2380
 80001b6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001b8:	2501      	movs	r5, #1
 80001ba:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001bc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001be:	2302      	movs	r3, #2
 80001c0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001c2:	a904      	add	r1, sp, #16
 80001c4:	4630      	mov	r0, r6
 80001c6:	f001 f9b1 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : HROT_Pin */
  GPIO_InitStruct.Pin = HROT_Pin;
 80001ca:	2340      	movs	r3, #64	@ 0x40
 80001cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001ce:	4b13      	ldr	r3, [pc, #76]	@ (800021c <MX_GPIO_Init+0xd0>)
 80001d0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001d2:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(HROT_GPIO_Port, &GPIO_InitStruct);
 80001d4:	a904      	add	r1, sp, #16
 80001d6:	4812      	ldr	r0, [pc, #72]	@ (8000220 <MX_GPIO_Init+0xd4>)
 80001d8:	f001 f9a8 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : H1_Pin H2_Pin H3_Pin */
  GPIO_InitStruct.Pin = H1_Pin|H2_Pin|H3_Pin;
 80001dc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80001e0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80001e2:	4b10      	ldr	r3, [pc, #64]	@ (8000224 <MX_GPIO_Init+0xd8>)
 80001e4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001e6:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001e8:	a904      	add	r1, sp, #16
 80001ea:	480f      	ldr	r0, [pc, #60]	@ (8000228 <MX_GPIO_Init+0xdc>)
 80001ec:	f001 f99e 	bl	800152c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80001f0:	4622      	mov	r2, r4
 80001f2:	4621      	mov	r1, r4
 80001f4:	2017      	movs	r0, #23
 80001f6:	f001 f83f 	bl	8001278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80001fa:	2017      	movs	r0, #23
 80001fc:	f001 f84c 	bl	8001298 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	4622      	mov	r2, r4
 8000202:	4621      	mov	r1, r4
 8000204:	2028      	movs	r0, #40	@ 0x28
 8000206:	f001 f837 	bl	8001278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	@ 0x28
 800020c:	f001 f844 	bl	8001298 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000210:	b008      	add	sp, #32
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	40021000 	.word	0x40021000
 8000218:	40011000 	.word	0x40011000
 800021c:	10110000 	.word	0x10110000
 8000220:	40010800 	.word	0x40010800
 8000224:	10310000 	.word	0x10310000
 8000228:	40010c00 	.word	0x40010c00

0800022c <MX_DMA_Init>:
{
 800022c:	b500      	push	{lr}
 800022e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000230:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <MX_DMA_Init+0x30>)
 8000232:	695a      	ldr	r2, [r3, #20]
 8000234:	f042 0201 	orr.w	r2, r2, #1
 8000238:	615a      	str	r2, [r3, #20]
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	f003 0301 	and.w	r3, r3, #1
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000244:	2200      	movs	r2, #0
 8000246:	4611      	mov	r1, r2
 8000248:	200b      	movs	r0, #11
 800024a:	f001 f815 	bl	8001278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800024e:	200b      	movs	r0, #11
 8000250:	f001 f822 	bl	8001298 <HAL_NVIC_EnableIRQ>
}
 8000254:	b003      	add	sp, #12
 8000256:	f85d fb04 	ldr.w	pc, [sp], #4
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000

08000260 <setPhases>:

/* USER CODE BEGIN 4 */
void setPhases(int PH1, int PH2, int PH3){
 8000260:	b538      	push	{r3, r4, r5, lr}
 8000262:	460d      	mov	r5, r1
 8000264:	4614      	mov	r4, r2
  if (PH1 != -1){
 8000266:	f1b0 3fff 	cmp.w	r0, #4294967295
 800026a:	d029      	beq.n	80002c0 <setPhases+0x60>
    TIM1->CCR1 = duty*PH1;
 800026c:	4b23      	ldr	r3, [pc, #140]	@ (80002fc <setPhases+0x9c>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	fb00 f303 	mul.w	r3, r0, r3
 8000274:	4a22      	ldr	r2, [pc, #136]	@ (8000300 <setPhases+0xa0>)
 8000276:	6353      	str	r3, [r2, #52]	@ 0x34
    HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, PH1);
 8000278:	b2c2      	uxtb	r2, r0
 800027a:	2180      	movs	r1, #128	@ 0x80
 800027c:	4821      	ldr	r0, [pc, #132]	@ (8000304 <setPhases+0xa4>)
 800027e:	f001 fa6a 	bl	8001756 <HAL_GPIO_WritePin>
  }else{
    TIM1->CCR1 = 0;
    HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_SET);
  }

  if (PH2 != -1) {
 8000282:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000286:	d024      	beq.n	80002d2 <setPhases+0x72>
    TIM1->CCR2 = duty*PH2;
 8000288:	4b1c      	ldr	r3, [pc, #112]	@ (80002fc <setPhases+0x9c>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	fb05 f303 	mul.w	r3, r5, r3
 8000290:	4a1b      	ldr	r2, [pc, #108]	@ (8000300 <setPhases+0xa0>)
 8000292:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, PH2);
 8000294:	b2ea      	uxtb	r2, r5
 8000296:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800029a:	481a      	ldr	r0, [pc, #104]	@ (8000304 <setPhases+0xa4>)
 800029c:	f001 fa5b 	bl	8001756 <HAL_GPIO_WritePin>
  }else{
    TIM1->CCR2 = 0;
    HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_SET);
  }

  if (PH3 != -1) {
 80002a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80002a4:	d01f      	beq.n	80002e6 <setPhases+0x86>
    TIM1->CCR3 = duty*PH3;
 80002a6:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <setPhases+0x9c>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	fb04 f303 	mul.w	r3, r4, r3
 80002ae:	4a14      	ldr	r2, [pc, #80]	@ (8000300 <setPhases+0xa0>)
 80002b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, PH3);
 80002b2:	b2e2      	uxtb	r2, r4
 80002b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002b8:	4812      	ldr	r0, [pc, #72]	@ (8000304 <setPhases+0xa4>)
 80002ba:	f001 fa4c 	bl	8001756 <HAL_GPIO_WritePin>
  }else{
    TIM1->CCR3 = 0;
    HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_SET);
  }
}
 80002be:	bd38      	pop	{r3, r4, r5, pc}
    TIM1->CCR1 = 0;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <setPhases+0xa0>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_WritePin(PH1L_GPIO_Port, PH1L_Pin, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2180      	movs	r1, #128	@ 0x80
 80002ca:	480e      	ldr	r0, [pc, #56]	@ (8000304 <setPhases+0xa4>)
 80002cc:	f001 fa43 	bl	8001756 <HAL_GPIO_WritePin>
 80002d0:	e7d7      	b.n	8000282 <setPhases+0x22>
    TIM1->CCR2 = 0;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <setPhases+0xa0>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_WritePin(PH2L_GPIO_Port, PH2L_Pin, GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002de:	4809      	ldr	r0, [pc, #36]	@ (8000304 <setPhases+0xa4>)
 80002e0:	f001 fa39 	bl	8001756 <HAL_GPIO_WritePin>
 80002e4:	e7dc      	b.n	80002a0 <setPhases+0x40>
    TIM1->CCR3 = 0;
 80002e6:	4b06      	ldr	r3, [pc, #24]	@ (8000300 <setPhases+0xa0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(PH3L_GPIO_Port, PH3L_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002f2:	4804      	ldr	r0, [pc, #16]	@ (8000304 <setPhases+0xa4>)
 80002f4:	f001 fa2f 	bl	8001756 <HAL_GPIO_WritePin>
}
 80002f8:	e7e1      	b.n	80002be <setPhases+0x5e>
 80002fa:	bf00      	nop
 80002fc:	20000098 	.word	0x20000098
 8000300:	40012c00 	.word	0x40012c00
 8000304:	40011000 	.word	0x40011000

08000308 <HAL_GPIO_EXTI_Callback>:
uint32_t GetMicroseconds(void) {
    return __HAL_TIM_GET_COUNTER(&htim2); // Get current counter value
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000308:	b538      	push	{r3, r4, r5, lr}
  if(GPIO_Pin == GPIO_PIN_6) {
 800030a:	2840      	cmp	r0, #64	@ 0x40
 800030c:	d00a      	beq.n	8000324 <HAL_GPIO_EXTI_Callback+0x1c>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    comm_tmr = HAL_GetTick() - last_comm;
    last_comm = HAL_GetTick();
  }else if(GPIO_Pin == GPIO_PIN_13 || GPIO_Pin == GPIO_PIN_14 || GPIO_Pin == GPIO_PIN_15){
 800030e:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8000312:	d017      	beq.n	8000344 <HAL_GPIO_EXTI_Callback+0x3c>
 8000314:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8000318:	d014      	beq.n	8000344 <HAL_GPIO_EXTI_Callback+0x3c>
 800031a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800031e:	d011      	beq.n	8000344 <HAL_GPIO_EXTI_Callback+0x3c>
      setPhases(PH_L, PH_Z, PH_H);
    }else{ // UNEXPECTED VALUE
      setPhases(PH_Z, PH_Z, PH_Z); // DISABLE PHASES
    }     
  } else {
    __NOP();
 8000320:	bf00      	nop
  }
}
 8000322:	e051      	b.n	80003c8 <HAL_GPIO_EXTI_Callback+0xc0>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000324:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000328:	483b      	ldr	r0, [pc, #236]	@ (8000418 <HAL_GPIO_EXTI_Callback+0x110>)
 800032a:	f001 fa1a 	bl	8001762 <HAL_GPIO_TogglePin>
    comm_tmr = HAL_GetTick() - last_comm;
 800032e:	f000 fc65 	bl	8000bfc <HAL_GetTick>
 8000332:	4c3a      	ldr	r4, [pc, #232]	@ (800041c <HAL_GPIO_EXTI_Callback+0x114>)
 8000334:	6823      	ldr	r3, [r4, #0]
 8000336:	1ac0      	subs	r0, r0, r3
 8000338:	4b39      	ldr	r3, [pc, #228]	@ (8000420 <HAL_GPIO_EXTI_Callback+0x118>)
 800033a:	6018      	str	r0, [r3, #0]
    last_comm = HAL_GetTick();
 800033c:	f000 fc5e 	bl	8000bfc <HAL_GetTick>
 8000340:	6020      	str	r0, [r4, #0]
 8000342:	e041      	b.n	80003c8 <HAL_GPIO_EXTI_Callback+0xc0>
    halls[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000344:	4d37      	ldr	r5, [pc, #220]	@ (8000424 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000346:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800034a:	4628      	mov	r0, r5
 800034c:	f001 f9fc 	bl	8001748 <HAL_GPIO_ReadPin>
 8000350:	3800      	subs	r0, #0
 8000352:	bf18      	it	ne
 8000354:	2001      	movne	r0, #1
 8000356:	4c34      	ldr	r4, [pc, #208]	@ (8000428 <HAL_GPIO_EXTI_Callback+0x120>)
 8000358:	7020      	strb	r0, [r4, #0]
    halls[1] = HAL_GPIO_ReadPin(H2_GPIO_Port, H2_Pin);
 800035a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800035e:	4628      	mov	r0, r5
 8000360:	f001 f9f2 	bl	8001748 <HAL_GPIO_ReadPin>
 8000364:	3800      	subs	r0, #0
 8000366:	bf18      	it	ne
 8000368:	2001      	movne	r0, #1
 800036a:	7060      	strb	r0, [r4, #1]
    halls[2] = HAL_GPIO_ReadPin(H3_GPIO_Port, H3_Pin); 
 800036c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000370:	4628      	mov	r0, r5
 8000372:	f001 f9e9 	bl	8001748 <HAL_GPIO_ReadPin>
 8000376:	4602      	mov	r2, r0
 8000378:	3800      	subs	r0, #0
 800037a:	bf18      	it	ne
 800037c:	2001      	movne	r0, #1
 800037e:	70a0      	strb	r0, [r4, #2]
    if(!halls[0] && !halls[1] && halls[2]){
 8000380:	7823      	ldrb	r3, [r4, #0]
 8000382:	b913      	cbnz	r3, 800038a <HAL_GPIO_EXTI_Callback+0x82>
 8000384:	7861      	ldrb	r1, [r4, #1]
 8000386:	b901      	cbnz	r1, 800038a <HAL_GPIO_EXTI_Callback+0x82>
 8000388:	b9fa      	cbnz	r2, 80003ca <HAL_GPIO_EXTI_Callback+0xc2>
    }else if(halls[0] && !halls[1] && halls[2]){
 800038a:	b11b      	cbz	r3, 8000394 <HAL_GPIO_EXTI_Callback+0x8c>
 800038c:	4926      	ldr	r1, [pc, #152]	@ (8000428 <HAL_GPIO_EXTI_Callback+0x120>)
 800038e:	7849      	ldrb	r1, [r1, #1]
 8000390:	b901      	cbnz	r1, 8000394 <HAL_GPIO_EXTI_Callback+0x8c>
 8000392:	bb02      	cbnz	r2, 80003d6 <HAL_GPIO_EXTI_Callback+0xce>
    }else if(halls[0] && !halls[1] && !halls[2]){
 8000394:	b11b      	cbz	r3, 800039e <HAL_GPIO_EXTI_Callback+0x96>
 8000396:	4924      	ldr	r1, [pc, #144]	@ (8000428 <HAL_GPIO_EXTI_Callback+0x120>)
 8000398:	7849      	ldrb	r1, [r1, #1]
 800039a:	b901      	cbnz	r1, 800039e <HAL_GPIO_EXTI_Callback+0x96>
 800039c:	b30a      	cbz	r2, 80003e2 <HAL_GPIO_EXTI_Callback+0xda>
    }else if(halls[0] && halls[1] && !halls[2]){
 800039e:	b11b      	cbz	r3, 80003a8 <HAL_GPIO_EXTI_Callback+0xa0>
 80003a0:	4921      	ldr	r1, [pc, #132]	@ (8000428 <HAL_GPIO_EXTI_Callback+0x120>)
 80003a2:	7849      	ldrb	r1, [r1, #1]
 80003a4:	b101      	cbz	r1, 80003a8 <HAL_GPIO_EXTI_Callback+0xa0>
 80003a6:	b312      	cbz	r2, 80003ee <HAL_GPIO_EXTI_Callback+0xe6>
    }else if(!halls[0] && halls[1] && !halls[2]){
 80003a8:	b91b      	cbnz	r3, 80003b2 <HAL_GPIO_EXTI_Callback+0xaa>
 80003aa:	491f      	ldr	r1, [pc, #124]	@ (8000428 <HAL_GPIO_EXTI_Callback+0x120>)
 80003ac:	7849      	ldrb	r1, [r1, #1]
 80003ae:	b101      	cbz	r1, 80003b2 <HAL_GPIO_EXTI_Callback+0xaa>
 80003b0:	b31a      	cbz	r2, 80003fa <HAL_GPIO_EXTI_Callback+0xf2>
    }else if(!halls[0] && halls[1] && halls[2]){
 80003b2:	b91b      	cbnz	r3, 80003bc <HAL_GPIO_EXTI_Callback+0xb4>
 80003b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000428 <HAL_GPIO_EXTI_Callback+0x120>)
 80003b6:	785b      	ldrb	r3, [r3, #1]
 80003b8:	b103      	cbz	r3, 80003bc <HAL_GPIO_EXTI_Callback+0xb4>
 80003ba:	bb2a      	cbnz	r2, 8000408 <HAL_GPIO_EXTI_Callback+0x100>
      setPhases(PH_Z, PH_Z, PH_Z); // DISABLE PHASES
 80003bc:	f04f 32ff 	mov.w	r2, #4294967295
 80003c0:	4611      	mov	r1, r2
 80003c2:	4610      	mov	r0, r2
 80003c4:	f7ff ff4c 	bl	8000260 <setPhases>
}
 80003c8:	bd38      	pop	{r3, r4, r5, pc}
      setPhases(PH_Z, PH_L, PH_H);
 80003ca:	2201      	movs	r2, #1
 80003cc:	f04f 30ff 	mov.w	r0, #4294967295
 80003d0:	f7ff ff46 	bl	8000260 <setPhases>
 80003d4:	e7f8      	b.n	80003c8 <HAL_GPIO_EXTI_Callback+0xc0>
      setPhases(PH_H, PH_L, PH_Z);
 80003d6:	f04f 32ff 	mov.w	r2, #4294967295
 80003da:	2001      	movs	r0, #1
 80003dc:	f7ff ff40 	bl	8000260 <setPhases>
 80003e0:	e7f2      	b.n	80003c8 <HAL_GPIO_EXTI_Callback+0xc0>
      setPhases(PH_H, PH_Z, PH_L);
 80003e2:	f04f 31ff 	mov.w	r1, #4294967295
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff ff3a 	bl	8000260 <setPhases>
 80003ec:	e7ec      	b.n	80003c8 <HAL_GPIO_EXTI_Callback+0xc0>
      setPhases(PH_Z, PH_H, PH_L);
 80003ee:	2101      	movs	r1, #1
 80003f0:	f04f 30ff 	mov.w	r0, #4294967295
 80003f4:	f7ff ff34 	bl	8000260 <setPhases>
 80003f8:	e7e6      	b.n	80003c8 <HAL_GPIO_EXTI_Callback+0xc0>
      setPhases(PH_L, PH_H, PH_Z);
 80003fa:	f04f 32ff 	mov.w	r2, #4294967295
 80003fe:	2101      	movs	r1, #1
 8000400:	2000      	movs	r0, #0
 8000402:	f7ff ff2d 	bl	8000260 <setPhases>
 8000406:	e7df      	b.n	80003c8 <HAL_GPIO_EXTI_Callback+0xc0>
      setPhases(PH_L, PH_Z, PH_H);
 8000408:	2201      	movs	r2, #1
 800040a:	f04f 31ff 	mov.w	r1, #4294967295
 800040e:	2000      	movs	r0, #0
 8000410:	f7ff ff26 	bl	8000260 <setPhases>
 8000414:	e7d8      	b.n	80003c8 <HAL_GPIO_EXTI_Callback+0xc0>
 8000416:	bf00      	nop
 8000418:	40011000 	.word	0x40011000
 800041c:	20000084 	.word	0x20000084
 8000420:	20000088 	.word	0x20000088
 8000424:	40010c00 	.word	0x40010c00
 8000428:	20000090 	.word	0x20000090

0800042c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042e:	e7fe      	b.n	800042e <Error_Handler+0x2>

08000430 <MX_ADC1_Init>:
{
 8000430:	b500      	push	{lr}
 8000432:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000434:	2300      	movs	r3, #0
 8000436:	9301      	str	r3, [sp, #4]
 8000438:	9302      	str	r3, [sp, #8]
 800043a:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800043c:	4810      	ldr	r0, [pc, #64]	@ (8000480 <MX_ADC1_Init+0x50>)
 800043e:	4a11      	ldr	r2, [pc, #68]	@ (8000484 <MX_ADC1_Init+0x54>)
 8000440:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000442:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000444:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000448:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800044c:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044e:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000450:	2301      	movs	r3, #1
 8000452:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000454:	f000 fe46 	bl	80010e4 <HAL_ADC_Init>
 8000458:	b968      	cbnz	r0, 8000476 <MX_ADC1_Init+0x46>
  sConfig.Channel = ADC_CHANNEL_0;
 800045a:	2300      	movs	r3, #0
 800045c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800045e:	2301      	movs	r3, #1
 8000460:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000462:	2305      	movs	r3, #5
 8000464:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000466:	a901      	add	r1, sp, #4
 8000468:	4805      	ldr	r0, [pc, #20]	@ (8000480 <MX_ADC1_Init+0x50>)
 800046a:	f000 fc1f 	bl	8000cac <HAL_ADC_ConfigChannel>
 800046e:	b920      	cbnz	r0, 800047a <MX_ADC1_Init+0x4a>
}
 8000470:	b005      	add	sp, #20
 8000472:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000476:	f7ff ffd9 	bl	800042c <Error_Handler>
    Error_Handler();
 800047a:	f7ff ffd7 	bl	800042c <Error_Handler>
 800047e:	bf00      	nop
 8000480:	200001c4 	.word	0x200001c4
 8000484:	40012400 	.word	0x40012400

08000488 <MX_TIM1_Init>:
{
 8000488:	b510      	push	{r4, lr}
 800048a:	b096      	sub	sp, #88	@ 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048c:	2400      	movs	r4, #0
 800048e:	9412      	str	r4, [sp, #72]	@ 0x48
 8000490:	9413      	str	r4, [sp, #76]	@ 0x4c
 8000492:	9414      	str	r4, [sp, #80]	@ 0x50
 8000494:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000496:	9410      	str	r4, [sp, #64]	@ 0x40
 8000498:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 800049a:	9409      	str	r4, [sp, #36]	@ 0x24
 800049c:	940a      	str	r4, [sp, #40]	@ 0x28
 800049e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80004a0:	940c      	str	r4, [sp, #48]	@ 0x30
 80004a2:	940d      	str	r4, [sp, #52]	@ 0x34
 80004a4:	940e      	str	r4, [sp, #56]	@ 0x38
 80004a6:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004a8:	2220      	movs	r2, #32
 80004aa:	4621      	mov	r1, r4
 80004ac:	a801      	add	r0, sp, #4
 80004ae:	f002 fdd3 	bl	8003058 <memset>
  htim1.Instance = TIM1;
 80004b2:	4832      	ldr	r0, [pc, #200]	@ (800057c <MX_TIM1_Init+0xf4>)
 80004b4:	4b32      	ldr	r3, [pc, #200]	@ (8000580 <MX_TIM1_Init+0xf8>)
 80004b6:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 5;
 80004b8:	2305      	movs	r3, #5
 80004ba:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004bc:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 255;
 80004be:	23ff      	movs	r3, #255	@ 0xff
 80004c0:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c2:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80004c4:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004c8:	f002 fad4 	bl	8002a74 <HAL_TIM_Base_Init>
 80004cc:	2800      	cmp	r0, #0
 80004ce:	d144      	bne.n	800055a <MX_TIM1_Init+0xd2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004d4:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004d6:	a912      	add	r1, sp, #72	@ 0x48
 80004d8:	4828      	ldr	r0, [pc, #160]	@ (800057c <MX_TIM1_Init+0xf4>)
 80004da:	f002 fbcb 	bl	8002c74 <HAL_TIM_ConfigClockSource>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d13d      	bne.n	800055e <MX_TIM1_Init+0xd6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004e2:	4826      	ldr	r0, [pc, #152]	@ (800057c <MX_TIM1_Init+0xf4>)
 80004e4:	f002 faf2 	bl	8002acc <HAL_TIM_PWM_Init>
 80004e8:	2800      	cmp	r0, #0
 80004ea:	d13a      	bne.n	8000562 <MX_TIM1_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ec:	2300      	movs	r3, #0
 80004ee:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004f2:	a910      	add	r1, sp, #64	@ 0x40
 80004f4:	4821      	ldr	r0, [pc, #132]	@ (800057c <MX_TIM1_Init+0xf4>)
 80004f6:	f002 fcb9 	bl	8002e6c <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d133      	bne.n	8000566 <MX_TIM1_Init+0xde>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004fe:	2360      	movs	r3, #96	@ 0x60
 8000500:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000502:	2200      	movs	r2, #0
 8000504:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000506:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000508:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800050a:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800050c:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800050e:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000510:	a909      	add	r1, sp, #36	@ 0x24
 8000512:	481a      	ldr	r0, [pc, #104]	@ (800057c <MX_TIM1_Init+0xf4>)
 8000514:	f002 fb34 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000518:	bb38      	cbnz	r0, 800056a <MX_TIM1_Init+0xe2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800051a:	2204      	movs	r2, #4
 800051c:	a909      	add	r1, sp, #36	@ 0x24
 800051e:	4817      	ldr	r0, [pc, #92]	@ (800057c <MX_TIM1_Init+0xf4>)
 8000520:	f002 fb2e 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000524:	bb18      	cbnz	r0, 800056e <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000526:	2208      	movs	r2, #8
 8000528:	a909      	add	r1, sp, #36	@ 0x24
 800052a:	4814      	ldr	r0, [pc, #80]	@ (800057c <MX_TIM1_Init+0xf4>)
 800052c:	f002 fb28 	bl	8002b80 <HAL_TIM_PWM_ConfigChannel>
 8000530:	b9f8      	cbnz	r0, 8000572 <MX_TIM1_Init+0xea>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000536:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000538:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800053a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800053c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800053e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000542:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000544:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000546:	a901      	add	r1, sp, #4
 8000548:	480c      	ldr	r0, [pc, #48]	@ (800057c <MX_TIM1_Init+0xf4>)
 800054a:	f002 fcc5 	bl	8002ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 800054e:	b990      	cbnz	r0, 8000576 <MX_TIM1_Init+0xee>
  HAL_TIM_MspPostInit(&htim1);
 8000550:	480a      	ldr	r0, [pc, #40]	@ (800057c <MX_TIM1_Init+0xf4>)
 8000552:	f001 fddb 	bl	800210c <HAL_TIM_MspPostInit>
}
 8000556:	b016      	add	sp, #88	@ 0x58
 8000558:	bd10      	pop	{r4, pc}
    Error_Handler();
 800055a:	f7ff ff67 	bl	800042c <Error_Handler>
    Error_Handler();
 800055e:	f7ff ff65 	bl	800042c <Error_Handler>
    Error_Handler();
 8000562:	f7ff ff63 	bl	800042c <Error_Handler>
    Error_Handler();
 8000566:	f7ff ff61 	bl	800042c <Error_Handler>
    Error_Handler();
 800056a:	f7ff ff5f 	bl	800042c <Error_Handler>
    Error_Handler();
 800056e:	f7ff ff5d 	bl	800042c <Error_Handler>
    Error_Handler();
 8000572:	f7ff ff5b 	bl	800042c <Error_Handler>
    Error_Handler();
 8000576:	f7ff ff59 	bl	800042c <Error_Handler>
 800057a:	bf00      	nop
 800057c:	200000e4 	.word	0x200000e4
 8000580:	40012c00 	.word	0x40012c00

08000584 <MX_I2C1_Init>:
{
 8000584:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000586:	480a      	ldr	r0, [pc, #40]	@ (80005b0 <MX_I2C1_Init+0x2c>)
 8000588:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <MX_I2C1_Init+0x30>)
 800058a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800058c:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <MX_I2C1_Init+0x34>)
 800058e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000590:	2300      	movs	r3, #0
 8000592:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000594:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000596:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800059a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800059c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800059e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005a0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005a2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a4:	f001 fa86 	bl	8001ab4 <HAL_I2C_Init>
 80005a8:	b900      	cbnz	r0, 80005ac <MX_I2C1_Init+0x28>
}
 80005aa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005ac:	f7ff ff3e 	bl	800042c <Error_Handler>
 80005b0:	2000012c 	.word	0x2000012c
 80005b4:	40005400 	.word	0x40005400
 80005b8:	00061a80 	.word	0x00061a80

080005bc <MX_TIM2_Init>:
{
 80005bc:	b500      	push	{lr}
 80005be:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c0:	2300      	movs	r3, #0
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	9303      	str	r3, [sp, #12]
 80005c6:	9304      	str	r3, [sp, #16]
 80005c8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	9301      	str	r3, [sp, #4]
  htim2.Instance = TIM2;
 80005ce:	4814      	ldr	r0, [pc, #80]	@ (8000620 <MX_TIM2_Init+0x64>)
 80005d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005d4:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 71;
 80005d6:	2247      	movs	r2, #71	@ 0x47
 80005d8:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005da:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 80005dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005e0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005e6:	f002 fa45 	bl	8002a74 <HAL_TIM_Base_Init>
 80005ea:	b990      	cbnz	r0, 8000612 <MX_TIM2_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005f2:	a902      	add	r1, sp, #8
 80005f4:	480a      	ldr	r0, [pc, #40]	@ (8000620 <MX_TIM2_Init+0x64>)
 80005f6:	f002 fb3d 	bl	8002c74 <HAL_TIM_ConfigClockSource>
 80005fa:	b960      	cbnz	r0, 8000616 <MX_TIM2_Init+0x5a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fc:	2300      	movs	r3, #0
 80005fe:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000600:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000602:	4669      	mov	r1, sp
 8000604:	4806      	ldr	r0, [pc, #24]	@ (8000620 <MX_TIM2_Init+0x64>)
 8000606:	f002 fc31 	bl	8002e6c <HAL_TIMEx_MasterConfigSynchronization>
 800060a:	b930      	cbnz	r0, 800061a <MX_TIM2_Init+0x5e>
}
 800060c:	b007      	add	sp, #28
 800060e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000612:	f7ff ff0b 	bl	800042c <Error_Handler>
    Error_Handler();
 8000616:	f7ff ff09 	bl	800042c <Error_Handler>
    Error_Handler();
 800061a:	f7ff ff07 	bl	800042c <Error_Handler>
 800061e:	bf00      	nop
 8000620:	2000009c 	.word	0x2000009c

08000624 <SystemClock_Config>:
{
 8000624:	b500      	push	{lr}
 8000626:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000628:	2228      	movs	r2, #40	@ 0x28
 800062a:	2100      	movs	r1, #0
 800062c:	eb0d 0002 	add.w	r0, sp, r2
 8000630:	f002 fd12 	bl	8003058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	2300      	movs	r3, #0
 8000636:	9305      	str	r3, [sp, #20]
 8000638:	9306      	str	r3, [sp, #24]
 800063a:	9307      	str	r3, [sp, #28]
 800063c:	9308      	str	r3, [sp, #32]
 800063e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	9303      	str	r3, [sp, #12]
 8000646:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2201      	movs	r2, #1
 800064a:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2202      	movs	r2, #2
 8000656:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000658:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800065a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800065e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	a80a      	add	r0, sp, #40	@ 0x28
 8000662:	f001 fd91 	bl	8002188 <HAL_RCC_OscConfig>
 8000666:	b9c8      	cbnz	r0, 800069c <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2102      	movs	r1, #2
 800066e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000678:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067c:	a805      	add	r0, sp, #20
 800067e:	f001 ffb5 	bl	80025ec <HAL_RCC_ClockConfig>
 8000682:	b968      	cbnz	r0, 80006a0 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000684:	2302      	movs	r3, #2
 8000686:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000688:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800068c:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068e:	a801      	add	r0, sp, #4
 8000690:	f002 f878 	bl	8002784 <HAL_RCCEx_PeriphCLKConfig>
 8000694:	b930      	cbnz	r0, 80006a4 <SystemClock_Config+0x80>
}
 8000696:	b015      	add	sp, #84	@ 0x54
 8000698:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800069c:	f7ff fec6 	bl	800042c <Error_Handler>
    Error_Handler();
 80006a0:	f7ff fec4 	bl	800042c <Error_Handler>
    Error_Handler();
 80006a4:	f7ff fec2 	bl	800042c <Error_Handler>

080006a8 <main>:
{
 80006a8:	b530      	push	{r4, r5, lr}
 80006aa:	b087      	sub	sp, #28
  HAL_Init();
 80006ac:	f000 fa88 	bl	8000bc0 <HAL_Init>
  SystemClock_Config();
 80006b0:	f7ff ffb8 	bl	8000624 <SystemClock_Config>
  MX_GPIO_Init();
 80006b4:	f7ff fd4a 	bl	800014c <MX_GPIO_Init>
  MX_DMA_Init();
 80006b8:	f7ff fdb8 	bl	800022c <MX_DMA_Init>
  MX_ADC1_Init();
 80006bc:	f7ff feb8 	bl	8000430 <MX_ADC1_Init>
  MX_TIM1_Init();
 80006c0:	f7ff fee2 	bl	8000488 <MX_TIM1_Init>
  MX_I2C1_Init();
 80006c4:	f7ff ff5e 	bl	8000584 <MX_I2C1_Init>
  MX_TIM2_Init();
 80006c8:	f7ff ff78 	bl	80005bc <MX_TIM2_Init>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006cc:	4c42      	ldr	r4, [pc, #264]	@ (80007d8 <main+0x130>)
 80006ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d2:	4620      	mov	r0, r4
 80006d4:	f001 f845 	bl	8001762 <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 80006d8:	20c8      	movs	r0, #200	@ 0xc8
 80006da:	f000 fa95 	bl	8000c08 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006e2:	4620      	mov	r0, r4
 80006e4:	f001 f83d 	bl	8001762 <HAL_GPIO_TogglePin>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
 80006e8:	4d3c      	ldr	r5, [pc, #240]	@ (80007dc <main+0x134>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	4629      	mov	r1, r5
 80006ee:	483c      	ldr	r0, [pc, #240]	@ (80007e0 <main+0x138>)
 80006f0:	f000 fc34 	bl	8000f5c <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006f4:	4c3b      	ldr	r4, [pc, #236]	@ (80007e4 <main+0x13c>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4620      	mov	r0, r4
 80006fa:	f002 fb49 	bl	8002d90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006fe:	2104      	movs	r1, #4
 8000700:	4620      	mov	r0, r4
 8000702:	f002 fb45 	bl	8002d90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000706:	2108      	movs	r1, #8
 8000708:	4620      	mov	r0, r4
 800070a:	f002 fb41 	bl	8002d90 <HAL_TIM_PWM_Start>
  duty = 127;
 800070e:	4b36      	ldr	r3, [pc, #216]	@ (80007e8 <main+0x140>)
 8000710:	227f      	movs	r2, #127	@ 0x7f
 8000712:	701a      	strb	r2, [r3, #0]
  setPhases(PH_Z, PH_L, PH_H);
 8000714:	2201      	movs	r2, #1
 8000716:	2100      	movs	r1, #0
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f7ff fda0 	bl	8000260 <setPhases>
  HAL_Delay(100);
 8000720:	2064      	movs	r0, #100	@ 0x64
 8000722:	f000 fa71 	bl	8000c08 <HAL_Delay>
  setPhases(PH_Z, PH_Z, PH_Z);
 8000726:	f04f 32ff 	mov.w	r2, #4294967295
 800072a:	4611      	mov	r1, r2
 800072c:	4610      	mov	r0, r2
 800072e:	f7ff fd97 	bl	8000260 <setPhases>
  SSD1306_Init (); // initialise the display 
 8000732:	f000 f96b 	bl	8000a0c <SSD1306_Init>
  gase_zero_pos = value_adc;
 8000736:	682a      	ldr	r2, [r5, #0]
 8000738:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <main+0x144>)
 800073a:	701a      	strb	r2, [r3, #0]
    duty = (value_adc - gase_zero_pos) * (255 - 0) / (4095 - gase_zero_pos) + 0;  
 800073c:	4b2b      	ldr	r3, [pc, #172]	@ (80007ec <main+0x144>)
 800073e:	781a      	ldrb	r2, [r3, #0]
 8000740:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <main+0x134>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800074a:	f5c2 627f 	rsb	r2, r2, #4080	@ 0xff0
 800074e:	320f      	adds	r2, #15
 8000750:	fbb3 f3f2 	udiv	r3, r3, r2
 8000754:	4a24      	ldr	r2, [pc, #144]	@ (80007e8 <main+0x140>)
 8000756:	7013      	strb	r3, [r2, #0]
    HAL_ADC_Start(&hadc1);  
 8000758:	4821      	ldr	r0, [pc, #132]	@ (80007e0 <main+0x138>)
 800075a:	f000 fb8b 	bl	8000e74 <HAL_ADC_Start>
    if(HAL_GetTick() - disp_tmr > 15){
 800075e:	f000 fa4d 	bl	8000bfc <HAL_GetTick>
 8000762:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <main+0x148>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1ac0      	subs	r0, r0, r3
 8000768:	280f      	cmp	r0, #15
 800076a:	d9e7      	bls.n	800073c <main+0x94>
      uint8_t gase = duty * 100 / 255;
 800076c:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <main+0x140>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2264      	movs	r2, #100	@ 0x64
 8000772:	fb02 f303 	mul.w	r3, r2, r3
 8000776:	4a1f      	ldr	r2, [pc, #124]	@ (80007f4 <main+0x14c>)
 8000778:	fb82 1203 	smull	r1, r2, r2, r3
 800077c:	441a      	add	r2, r3
      sprintf(gase_buf, "%d %%", gase);
 800077e:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8000782:	491d      	ldr	r1, [pc, #116]	@ (80007f8 <main+0x150>)
 8000784:	4668      	mov	r0, sp
 8000786:	f002 fc45 	bl	8003014 <siprintf>
      uint16_t rpm = 60000 / comm_tmr;
 800078a:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <main+0x154>)
 800078c:	681b      	ldr	r3, [r3, #0]
      sprintf(rpm_buf, "%d RPM", rpm);
 800078e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000792:	fbb2 f2f3 	udiv	r2, r2, r3
 8000796:	491a      	ldr	r1, [pc, #104]	@ (8000800 <main+0x158>)
 8000798:	a802      	add	r0, sp, #8
 800079a:	f002 fc3b 	bl	8003014 <siprintf>
      SSD1306_Clear();
 800079e:	f000 f92d 	bl	80009fc <SSD1306_Clear>
      SSD1306_GotoXY(10, 10);
 80007a2:	210a      	movs	r1, #10
 80007a4:	4608      	mov	r0, r1
 80007a6:	f000 f869 	bl	800087c <SSD1306_GotoXY>
      SSD1306_Puts (gase_buf, &Font_11x18, 1); // print Hello 
 80007aa:	4c16      	ldr	r4, [pc, #88]	@ (8000804 <main+0x15c>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	4621      	mov	r1, r4
 80007b0:	4668      	mov	r0, sp
 80007b2:	f000 f8b7 	bl	8000924 <SSD1306_Puts>
      SSD1306_GotoXY(10, 25);
 80007b6:	2119      	movs	r1, #25
 80007b8:	200a      	movs	r0, #10
 80007ba:	f000 f85f 	bl	800087c <SSD1306_GotoXY>
      SSD1306_Puts (rpm_buf, &Font_11x18, 1); // print Hello 
 80007be:	2201      	movs	r2, #1
 80007c0:	4621      	mov	r1, r4
 80007c2:	a802      	add	r0, sp, #8
 80007c4:	f000 f8ae 	bl	8000924 <SSD1306_Puts>
      SSD1306_UpdateScreen(); // update screen
 80007c8:	f000 f8f4 	bl	80009b4 <SSD1306_UpdateScreen>
      disp_tmr = HAL_GetTick();
 80007cc:	f000 fa16 	bl	8000bfc <HAL_GetTick>
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <main+0x148>)
 80007d2:	6018      	str	r0, [r3, #0]
 80007d4:	e7b2      	b.n	800073c <main+0x94>
 80007d6:	bf00      	nop
 80007d8:	40011000 	.word	0x40011000
 80007dc:	20000094 	.word	0x20000094
 80007e0:	200001c4 	.word	0x200001c4
 80007e4:	200000e4 	.word	0x200000e4
 80007e8:	20000098 	.word	0x20000098
 80007ec:	20000080 	.word	0x20000080
 80007f0:	2000008c 	.word	0x2000008c
 80007f4:	80808081 	.word	0x80808081
 80007f8:	080046e8 	.word	0x080046e8
 80007fc:	20000088 	.word	0x20000088
 8000800:	080046f0 	.word	0x080046f0
 8000804:	20000000 	.word	0x20000000

08000808 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000808:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800080a:	b930      	cbnz	r0, 800081a <SSD1306_Fill+0x12>
 800080c:	2100      	movs	r1, #0
 800080e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000812:	4803      	ldr	r0, [pc, #12]	@ (8000820 <SSD1306_Fill+0x18>)
 8000814:	f002 fc20 	bl	8003058 <memset>
}
 8000818:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800081a:	21ff      	movs	r1, #255	@ 0xff
 800081c:	e7f7      	b.n	800080e <SSD1306_Fill+0x6>
 800081e:	bf00      	nop
 8000820:	200001fc 	.word	0x200001fc

08000824 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8000824:	287f      	cmp	r0, #127	@ 0x7f
 8000826:	d824      	bhi.n	8000872 <SSD1306_DrawPixel+0x4e>
		x >= SSD1306_WIDTH ||
 8000828:	293f      	cmp	r1, #63	@ 0x3f
 800082a:	d822      	bhi.n	8000872 <SSD1306_DrawPixel+0x4e>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800082c:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <SSD1306_DrawPixel+0x50>)
 8000830:	791b      	ldrb	r3, [r3, #4]
 8000832:	b113      	cbz	r3, 800083a <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8000834:	fab2 f282 	clz	r2, r2
 8000838:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800083a:	2a01      	cmp	r2, #1
 800083c:	d00e      	beq.n	800085c <SSD1306_DrawPixel+0x38>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800083e:	08cb      	lsrs	r3, r1, #3
 8000840:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8000844:	4c0c      	ldr	r4, [pc, #48]	@ (8000878 <SSD1306_DrawPixel+0x54>)
 8000846:	5c22      	ldrb	r2, [r4, r0]
 8000848:	f001 0107 	and.w	r1, r1, #7
 800084c:	2301      	movs	r3, #1
 800084e:	408b      	lsls	r3, r1
 8000850:	43db      	mvns	r3, r3
 8000852:	b25b      	sxtb	r3, r3
 8000854:	4013      	ands	r3, r2
 8000856:	5423      	strb	r3, [r4, r0]
	}
}
 8000858:	bc10      	pop	{r4}
 800085a:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800085c:	08cb      	lsrs	r3, r1, #3
 800085e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8000862:	4c05      	ldr	r4, [pc, #20]	@ (8000878 <SSD1306_DrawPixel+0x54>)
 8000864:	5c23      	ldrb	r3, [r4, r0]
 8000866:	f001 0107 	and.w	r1, r1, #7
 800086a:	408a      	lsls	r2, r1
 800086c:	4313      	orrs	r3, r2
 800086e:	5423      	strb	r3, [r4, r0]
 8000870:	e7f2      	b.n	8000858 <SSD1306_DrawPixel+0x34>
 8000872:	4770      	bx	lr
 8000874:	200001f4 	.word	0x200001f4
 8000878:	200001fc 	.word	0x200001fc

0800087c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800087c:	4b01      	ldr	r3, [pc, #4]	@ (8000884 <SSD1306_GotoXY+0x8>)
 800087e:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8000880:	8059      	strh	r1, [r3, #2]
}
 8000882:	4770      	bx	lr
 8000884:	200001f4 	.word	0x200001f4

08000888 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800088c:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800088e:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <SSD1306_Putc+0x98>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	780a      	ldrb	r2, [r1, #0]
 8000894:	4413      	add	r3, r2
	if (
 8000896:	2b7f      	cmp	r3, #127	@ 0x7f
 8000898:	dc3e      	bgt.n	8000918 <SSD1306_Putc+0x90>
 800089a:	4681      	mov	r9, r0
 800089c:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <SSD1306_Putc+0x98>)
 80008a0:	885b      	ldrh	r3, [r3, #2]
 80008a2:	784a      	ldrb	r2, [r1, #1]
 80008a4:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80008a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80008a8:	dc38      	bgt.n	800091c <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008aa:	2600      	movs	r6, #0
 80008ac:	e020      	b.n	80008f0 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <SSD1306_Putc+0x98>)
 80008b0:	8818      	ldrh	r0, [r3, #0]
 80008b2:	8859      	ldrh	r1, [r3, #2]
 80008b4:	4431      	add	r1, r6
 80008b6:	4420      	add	r0, r4
 80008b8:	fab8 f288 	clz	r2, r8
 80008bc:	0952      	lsrs	r2, r2, #5
 80008be:	b289      	uxth	r1, r1
 80008c0:	b280      	uxth	r0, r0
 80008c2:	f7ff ffaf 	bl	8000824 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80008c6:	3401      	adds	r4, #1
 80008c8:	782b      	ldrb	r3, [r5, #0]
 80008ca:	42a3      	cmp	r3, r4
 80008cc:	d90f      	bls.n	80008ee <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 80008ce:	fa07 f304 	lsl.w	r3, r7, r4
 80008d2:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80008d6:	d0ea      	beq.n	80008ae <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <SSD1306_Putc+0x98>)
 80008da:	8818      	ldrh	r0, [r3, #0]
 80008dc:	8859      	ldrh	r1, [r3, #2]
 80008de:	4431      	add	r1, r6
 80008e0:	4420      	add	r0, r4
 80008e2:	4642      	mov	r2, r8
 80008e4:	b289      	uxth	r1, r1
 80008e6:	b280      	uxth	r0, r0
 80008e8:	f7ff ff9c 	bl	8000824 <SSD1306_DrawPixel>
 80008ec:	e7eb      	b.n	80008c6 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 80008ee:	3601      	adds	r6, #1
 80008f0:	786a      	ldrb	r2, [r5, #1]
 80008f2:	42b2      	cmp	r2, r6
 80008f4:	d908      	bls.n	8000908 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008f6:	6869      	ldr	r1, [r5, #4]
 80008f8:	f1a9 0320 	sub.w	r3, r9, #32
 80008fc:	fb02 6303 	mla	r3, r2, r3, r6
 8000900:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8000904:	2400      	movs	r4, #0
 8000906:	e7df      	b.n	80008c8 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000908:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SSD1306_Putc+0x98>)
 800090a:	8813      	ldrh	r3, [r2, #0]
 800090c:	7829      	ldrb	r1, [r5, #0]
 800090e:	440b      	add	r3, r1
 8000910:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8000912:	4648      	mov	r0, r9
}
 8000914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8000918:	2000      	movs	r0, #0
 800091a:	e7fb      	b.n	8000914 <SSD1306_Putc+0x8c>
 800091c:	2000      	movs	r0, #0
 800091e:	e7f9      	b.n	8000914 <SSD1306_Putc+0x8c>
 8000920:	200001f4 	.word	0x200001f4

08000924 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	4604      	mov	r4, r0
 8000928:	460e      	mov	r6, r1
 800092a:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 800092c:	e000      	b.n	8000930 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 800092e:	3401      	adds	r4, #1
	while (*str) {
 8000930:	7820      	ldrb	r0, [r4, #0]
 8000932:	b138      	cbz	r0, 8000944 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000934:	462a      	mov	r2, r5
 8000936:	4631      	mov	r1, r6
 8000938:	f7ff ffa6 	bl	8000888 <SSD1306_Putc>
 800093c:	4603      	mov	r3, r0
 800093e:	7820      	ldrb	r0, [r4, #0]
 8000940:	4283      	cmp	r3, r0
 8000942:	d0f4      	beq.n	800092e <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8000944:	bd70      	pop	{r4, r5, r6, pc}
	...

08000948 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000948:	b500      	push	{lr}
 800094a:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 800094c:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8000950:	f04f 0c00 	mov.w	ip, #0
 8000954:	e009      	b.n	800096a <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 8000956:	f10c 0e01 	add.w	lr, ip, #1
 800095a:	f812 100c 	ldrb.w	r1, [r2, ip]
 800095e:	f10d 0c08 	add.w	ip, sp, #8
 8000962:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 8000966:	fa5f fc8e 	uxtb.w	ip, lr
 800096a:	459c      	cmp	ip, r3
 800096c:	d3f3      	bcc.n	8000956 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800096e:	3301      	adds	r3, #1
 8000970:	220a      	movs	r2, #10
 8000972:	9200      	str	r2, [sp, #0]
 8000974:	b29b      	uxth	r3, r3
 8000976:	aa02      	add	r2, sp, #8
 8000978:	4601      	mov	r1, r0
 800097a:	4803      	ldr	r0, [pc, #12]	@ (8000988 <ssd1306_I2C_WriteMulti+0x40>)
 800097c:	f001 f978 	bl	8001c70 <HAL_I2C_Master_Transmit>
}
 8000980:	b043      	add	sp, #268	@ 0x10c
 8000982:	f85d fb04 	ldr.w	pc, [sp], #4
 8000986:	bf00      	nop
 8000988:	2000012c 	.word	0x2000012c

0800098c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800098c:	b500      	push	{lr}
 800098e:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8000990:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8000994:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8000998:	230a      	movs	r3, #10
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2302      	movs	r3, #2
 800099e:	aa03      	add	r2, sp, #12
 80009a0:	4601      	mov	r1, r0
 80009a2:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <ssd1306_I2C_Write+0x24>)
 80009a4:	f001 f964 	bl	8001c70 <HAL_I2C_Master_Transmit>
}
 80009a8:	b005      	add	sp, #20
 80009aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80009ae:	bf00      	nop
 80009b0:	2000012c 	.word	0x2000012c

080009b4 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 80009b4:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 80009b6:	2400      	movs	r4, #0
 80009b8:	e01a      	b.n	80009f0 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80009ba:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	2100      	movs	r1, #0
 80009c2:	2078      	movs	r0, #120	@ 0x78
 80009c4:	f7ff ffe2 	bl	800098c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80009c8:	2200      	movs	r2, #0
 80009ca:	4611      	mov	r1, r2
 80009cc:	2078      	movs	r0, #120	@ 0x78
 80009ce:	f7ff ffdd 	bl	800098c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80009d2:	2210      	movs	r2, #16
 80009d4:	2100      	movs	r1, #0
 80009d6:	2078      	movs	r0, #120	@ 0x78
 80009d8:	f7ff ffd8 	bl	800098c <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	4a06      	ldr	r2, [pc, #24]	@ (80009f8 <SSD1306_UpdateScreen+0x44>)
 80009e0:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 80009e4:	2140      	movs	r1, #64	@ 0x40
 80009e6:	2078      	movs	r0, #120	@ 0x78
 80009e8:	f7ff ffae 	bl	8000948 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80009ec:	3401      	adds	r4, #1
 80009ee:	b2e4      	uxtb	r4, r4
 80009f0:	2c07      	cmp	r4, #7
 80009f2:	d9e2      	bls.n	80009ba <SSD1306_UpdateScreen+0x6>
}
 80009f4:	bd10      	pop	{r4, pc}
 80009f6:	bf00      	nop
 80009f8:	200001fc 	.word	0x200001fc

080009fc <SSD1306_Clear>:
{
 80009fc:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff ff02 	bl	8000808 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000a04:	f7ff ffd6 	bl	80009b4 <SSD1306_UpdateScreen>
}
 8000a08:	bd08      	pop	{r3, pc}
	...

08000a0c <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8000a0c:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000a0e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000a12:	2201      	movs	r2, #1
 8000a14:	2178      	movs	r1, #120	@ 0x78
 8000a16:	4855      	ldr	r0, [pc, #340]	@ (8000b6c <SSD1306_Init+0x160>)
 8000a18:	f001 f9e6 	bl	8001de8 <HAL_I2C_IsDeviceReady>
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	f040 80a3 	bne.w	8000b68 <SSD1306_Init+0x15c>
	uint32_t p = 2500;
 8000a22:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000a26:	e000      	b.n	8000a2a <SSD1306_Init+0x1e>
		p--;
 8000a28:	3b01      	subs	r3, #1
	while(p>0)
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d1fc      	bne.n	8000a28 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a2e:	22ae      	movs	r2, #174	@ 0xae
 8000a30:	2100      	movs	r1, #0
 8000a32:	2078      	movs	r0, #120	@ 0x78
 8000a34:	f7ff ffaa 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000a38:	2220      	movs	r2, #32
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2078      	movs	r0, #120	@ 0x78
 8000a3e:	f7ff ffa5 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a42:	2210      	movs	r2, #16
 8000a44:	2100      	movs	r1, #0
 8000a46:	2078      	movs	r0, #120	@ 0x78
 8000a48:	f7ff ffa0 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a4c:	22b0      	movs	r2, #176	@ 0xb0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2078      	movs	r0, #120	@ 0x78
 8000a52:	f7ff ff9b 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a56:	22c8      	movs	r2, #200	@ 0xc8
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2078      	movs	r0, #120	@ 0x78
 8000a5c:	f7ff ff96 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a60:	2200      	movs	r2, #0
 8000a62:	4611      	mov	r1, r2
 8000a64:	2078      	movs	r0, #120	@ 0x78
 8000a66:	f7ff ff91 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2078      	movs	r0, #120	@ 0x78
 8000a70:	f7ff ff8c 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a74:	2240      	movs	r2, #64	@ 0x40
 8000a76:	2100      	movs	r1, #0
 8000a78:	2078      	movs	r0, #120	@ 0x78
 8000a7a:	f7ff ff87 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a7e:	2281      	movs	r2, #129	@ 0x81
 8000a80:	2100      	movs	r1, #0
 8000a82:	2078      	movs	r0, #120	@ 0x78
 8000a84:	f7ff ff82 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a88:	22ff      	movs	r2, #255	@ 0xff
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2078      	movs	r0, #120	@ 0x78
 8000a8e:	f7ff ff7d 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a92:	22a1      	movs	r2, #161	@ 0xa1
 8000a94:	2100      	movs	r1, #0
 8000a96:	2078      	movs	r0, #120	@ 0x78
 8000a98:	f7ff ff78 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a9c:	22a6      	movs	r2, #166	@ 0xa6
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2078      	movs	r0, #120	@ 0x78
 8000aa2:	f7ff ff73 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000aa6:	22a8      	movs	r2, #168	@ 0xa8
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2078      	movs	r0, #120	@ 0x78
 8000aac:	f7ff ff6e 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ab0:	223f      	movs	r2, #63	@ 0x3f
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2078      	movs	r0, #120	@ 0x78
 8000ab6:	f7ff ff69 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000aba:	22a4      	movs	r2, #164	@ 0xa4
 8000abc:	2100      	movs	r1, #0
 8000abe:	2078      	movs	r0, #120	@ 0x78
 8000ac0:	f7ff ff64 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ac4:	22d3      	movs	r2, #211	@ 0xd3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2078      	movs	r0, #120	@ 0x78
 8000aca:	f7ff ff5f 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	2078      	movs	r0, #120	@ 0x78
 8000ad4:	f7ff ff5a 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ad8:	22d5      	movs	r2, #213	@ 0xd5
 8000ada:	2100      	movs	r1, #0
 8000adc:	2078      	movs	r0, #120	@ 0x78
 8000ade:	f7ff ff55 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ae2:	22f0      	movs	r2, #240	@ 0xf0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2078      	movs	r0, #120	@ 0x78
 8000ae8:	f7ff ff50 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000aec:	22d9      	movs	r2, #217	@ 0xd9
 8000aee:	2100      	movs	r1, #0
 8000af0:	2078      	movs	r0, #120	@ 0x78
 8000af2:	f7ff ff4b 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000af6:	2222      	movs	r2, #34	@ 0x22
 8000af8:	2100      	movs	r1, #0
 8000afa:	2078      	movs	r0, #120	@ 0x78
 8000afc:	f7ff ff46 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b00:	22da      	movs	r2, #218	@ 0xda
 8000b02:	2100      	movs	r1, #0
 8000b04:	2078      	movs	r0, #120	@ 0x78
 8000b06:	f7ff ff41 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000b0a:	2212      	movs	r2, #18
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2078      	movs	r0, #120	@ 0x78
 8000b10:	f7ff ff3c 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000b14:	22db      	movs	r2, #219	@ 0xdb
 8000b16:	2100      	movs	r1, #0
 8000b18:	2078      	movs	r0, #120	@ 0x78
 8000b1a:	f7ff ff37 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000b1e:	2220      	movs	r2, #32
 8000b20:	2100      	movs	r1, #0
 8000b22:	2078      	movs	r0, #120	@ 0x78
 8000b24:	f7ff ff32 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b28:	228d      	movs	r2, #141	@ 0x8d
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2078      	movs	r0, #120	@ 0x78
 8000b2e:	f7ff ff2d 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b32:	2214      	movs	r2, #20
 8000b34:	2100      	movs	r1, #0
 8000b36:	2078      	movs	r0, #120	@ 0x78
 8000b38:	f7ff ff28 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b3c:	22af      	movs	r2, #175	@ 0xaf
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2078      	movs	r0, #120	@ 0x78
 8000b42:	f7ff ff23 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b46:	222e      	movs	r2, #46	@ 0x2e
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2078      	movs	r0, #120	@ 0x78
 8000b4c:	f7ff ff1e 	bl	800098c <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fe59 	bl	8000808 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8000b56:	f7ff ff2d 	bl	80009b4 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <SSD1306_Init+0x164>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b60:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8000b62:	2001      	movs	r0, #1
 8000b64:	7158      	strb	r0, [r3, #5]
}
 8000b66:	bd08      	pop	{r3, pc}
		return 0;
 8000b68:	2000      	movs	r0, #0
 8000b6a:	e7fc      	b.n	8000b66 <SSD1306_Init+0x15a>
 8000b6c:	2000012c 	.word	0x2000012c
 8000b70:	200001f4 	.word	0x200001f4

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b510      	push	{r4, lr}
 8000b76:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b78:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <HAL_InitTick+0x40>)
 8000b7a:	781a      	ldrb	r2, [r3, #0]
 8000b7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b84:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb8 <HAL_InitTick+0x44>)
 8000b86:	6810      	ldr	r0, [r2, #0]
 8000b88:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b8c:	f000 fb92 	bl	80012b4 <HAL_SYSTICK_Config>
 8000b90:	b968      	cbnz	r0, 8000bae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	2c0f      	cmp	r4, #15
 8000b94:	d901      	bls.n	8000b9a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b96:	2001      	movs	r0, #1
 8000b98:	e00a      	b.n	8000bb0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4621      	mov	r1, r4
 8000b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba2:	f000 fb69 	bl	8001278 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba6:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <HAL_InitTick+0x48>)
 8000ba8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000baa:	2000      	movs	r0, #0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000bae:	2001      	movs	r0, #1
}
 8000bb0:	bd10      	pop	{r4, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000010 	.word	0x20000010
 8000bbc:	2000000c 	.word	0x2000000c

08000bc0 <HAL_Init>:
{
 8000bc0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc2:	4a07      	ldr	r2, [pc, #28]	@ (8000be0 <HAL_Init+0x20>)
 8000bc4:	6813      	ldr	r3, [r2, #0]
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 fb41 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f7ff ffce 	bl	8000b74 <HAL_InitTick>
  HAL_MspInit();
 8000bd8:	f001 f9d0 	bl	8001f7c <HAL_MspInit>
}
 8000bdc:	2000      	movs	r0, #0
 8000bde:	bd08      	pop	{r3, pc}
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000be4:	4a03      	ldr	r2, [pc, #12]	@ (8000bf4 <HAL_IncTick+0x10>)
 8000be6:	6811      	ldr	r1, [r2, #0]
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <HAL_IncTick+0x14>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	440b      	add	r3, r1
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200005fc 	.word	0x200005fc
 8000bf8:	20000008 	.word	0x20000008

08000bfc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bfc:	4b01      	ldr	r3, [pc, #4]	@ (8000c04 <HAL_GetTick+0x8>)
 8000bfe:	6818      	ldr	r0, [r3, #0]
}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	200005fc 	.word	0x200005fc

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b538      	push	{r3, r4, r5, lr}
 8000c0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff fff6 	bl	8000bfc <HAL_GetTick>
 8000c10:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000c16:	d002      	beq.n	8000c1e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <HAL_Delay+0x24>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c1e:	f7ff ffed 	bl	8000bfc <HAL_GetTick>
 8000c22:	1b40      	subs	r0, r0, r5
 8000c24:	42a0      	cmp	r0, r4
 8000c26:	d3fa      	bcc.n	8000c1e <HAL_Delay+0x16>
  {
  }
}
 8000c28:	bd38      	pop	{r3, r4, r5, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c30:	4770      	bx	lr

08000c32 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000c32:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c34:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000c36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c38:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8000c3c:	d11e      	bne.n	8000c7c <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c44:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	6892      	ldr	r2, [r2, #8]
 8000c4a:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8000c4e:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8000c52:	d003      	beq.n	8000c5c <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffeb 	bl	8000c30 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000c5a:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c5c:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d1f8      	bne.n	8000c54 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c6c:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8000c70:	d1f0      	bne.n	8000c54 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c74:	f042 0201 	orr.w	r2, r2, #1
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c7a:	e7eb      	b.n	8000c54 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000c7c:	6a1b      	ldr	r3, [r3, #32]
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c80:	4798      	blx	r3
}
 8000c82:	e7ea      	b.n	8000c5a <ADC_DMAConvCplt+0x28>

08000c84 <HAL_ADC_ConvHalfCpltCallback>:
}
 8000c84:	4770      	bx	lr

08000c86 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000c86:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000c88:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000c8a:	f7ff fffb 	bl	8000c84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000c8e:	bd08      	pop	{r3, pc}

08000c90 <HAL_ADC_ErrorCallback>:
}
 8000c90:	4770      	bx	lr

08000c92 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000c92:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c94:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000c96:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c9c:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000c9e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000ca6:	f7ff fff3 	bl	8000c90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000caa:	bd08      	pop	{r3, pc}

08000cac <HAL_ADC_ConfigChannel>:
{ 
 8000cac:	b430      	push	{r4, r5}
 8000cae:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000cb4:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8000cb8:	2a01      	cmp	r2, #1
 8000cba:	f000 808f 	beq.w	8000ddc <HAL_ADC_ConfigChannel+0x130>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8000cc6:	684a      	ldr	r2, [r1, #4]
 8000cc8:	2a06      	cmp	r2, #6
 8000cca:	d82d      	bhi.n	8000d28 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ccc:	6804      	ldr	r4, [r0, #0]
 8000cce:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8000cd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000cd4:	3a05      	subs	r2, #5
 8000cd6:	f04f 0c1f 	mov.w	ip, #31
 8000cda:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cde:	ea20 000c 	bic.w	r0, r0, ip
 8000ce2:	680d      	ldr	r5, [r1, #0]
 8000ce4:	fa05 f202 	lsl.w	r2, r5, r2
 8000ce8:	4302      	orrs	r2, r0
 8000cea:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cec:	680a      	ldr	r2, [r1, #0]
 8000cee:	2a09      	cmp	r2, #9
 8000cf0:	d938      	bls.n	8000d64 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cf2:	681c      	ldr	r4, [r3, #0]
 8000cf4:	68e0      	ldr	r0, [r4, #12]
 8000cf6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000cfa:	3a1e      	subs	r2, #30
 8000cfc:	f04f 0c07 	mov.w	ip, #7
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	ea20 000c 	bic.w	r0, r0, ip
 8000d08:	688d      	ldr	r5, [r1, #8]
 8000d0a:	fa05 f202 	lsl.w	r2, r5, r2
 8000d0e:	4302      	orrs	r2, r0
 8000d10:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d12:	680a      	ldr	r2, [r1, #0]
 8000d14:	3a10      	subs	r2, #16
 8000d16:	2a01      	cmp	r2, #1
 8000d18:	d934      	bls.n	8000d84 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d1a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8000d22:	b002      	add	sp, #8
 8000d24:	bc30      	pop	{r4, r5}
 8000d26:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8000d28:	2a0c      	cmp	r2, #12
 8000d2a:	d80d      	bhi.n	8000d48 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d2c:	6805      	ldr	r5, [r0, #0]
 8000d2e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8000d30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000d34:	3a23      	subs	r2, #35	@ 0x23
 8000d36:	241f      	movs	r4, #31
 8000d38:	4094      	lsls	r4, r2
 8000d3a:	ea20 0004 	bic.w	r0, r0, r4
 8000d3e:	680c      	ldr	r4, [r1, #0]
 8000d40:	4094      	lsls	r4, r2
 8000d42:	4320      	orrs	r0, r4
 8000d44:	6328      	str	r0, [r5, #48]	@ 0x30
 8000d46:	e7d1      	b.n	8000cec <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d48:	6805      	ldr	r5, [r0, #0]
 8000d4a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8000d4c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000d50:	3a41      	subs	r2, #65	@ 0x41
 8000d52:	241f      	movs	r4, #31
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea20 0004 	bic.w	r0, r0, r4
 8000d5a:	680c      	ldr	r4, [r1, #0]
 8000d5c:	4094      	lsls	r4, r2
 8000d5e:	4320      	orrs	r0, r4
 8000d60:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8000d62:	e7c3      	b.n	8000cec <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d64:	681c      	ldr	r4, [r3, #0]
 8000d66:	6920      	ldr	r0, [r4, #16]
 8000d68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d6c:	f04f 0c07 	mov.w	ip, #7
 8000d70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d74:	ea20 000c 	bic.w	r0, r0, ip
 8000d78:	688d      	ldr	r5, [r1, #8]
 8000d7a:	fa05 f202 	lsl.w	r2, r5, r2
 8000d7e:	4302      	orrs	r2, r0
 8000d80:	6122      	str	r2, [r4, #16]
 8000d82:	e7c6      	b.n	8000d12 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4816      	ldr	r0, [pc, #88]	@ (8000de0 <HAL_ADC_ConfigChannel+0x134>)
 8000d88:	4282      	cmp	r2, r0
 8000d8a:	d005      	beq.n	8000d98 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8000d94:	2001      	movs	r0, #1
 8000d96:	e7c1      	b.n	8000d1c <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d98:	6890      	ldr	r0, [r2, #8]
 8000d9a:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8000d9e:	d11b      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000da0:	6890      	ldr	r0, [r2, #8]
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da6:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000da8:	680a      	ldr	r2, [r1, #0]
 8000daa:	2a10      	cmp	r2, #16
 8000dac:	d001      	beq.n	8000db2 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dae:	2000      	movs	r0, #0
 8000db0:	e7b4      	b.n	8000d1c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000db2:	4a0c      	ldr	r2, [pc, #48]	@ (8000de4 <HAL_ADC_ConfigChannel+0x138>)
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	490c      	ldr	r1, [pc, #48]	@ (8000de8 <HAL_ADC_ConfigChannel+0x13c>)
 8000db8:	fba1 1202 	umull	r1, r2, r1, r2
 8000dbc:	0c92      	lsrs	r2, r2, #18
 8000dbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000dc2:	0052      	lsls	r2, r2, #1
 8000dc4:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8000dc6:	e002      	b.n	8000dce <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8000dc8:	9a01      	ldr	r2, [sp, #4]
 8000dca:	3a01      	subs	r2, #1
 8000dcc:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8000dce:	9a01      	ldr	r2, [sp, #4]
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d1f9      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	e7a1      	b.n	8000d1c <HAL_ADC_ConfigChannel+0x70>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	e79f      	b.n	8000d1c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8000ddc:	2002      	movs	r0, #2
 8000dde:	e7a0      	b.n	8000d22 <HAL_ADC_ConfigChannel+0x76>
 8000de0:	40012400 	.word	0x40012400
 8000de4:	20000010 	.word	0x20000010
 8000de8:	431bde83 	.word	0x431bde83

08000dec <ADC_Enable>:
{
 8000dec:	b530      	push	{r4, r5, lr}
 8000dee:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000df4:	6803      	ldr	r3, [r0, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	f012 0f01 	tst.w	r2, #1
 8000dfc:	d133      	bne.n	8000e66 <ADC_Enable+0x7a>
 8000dfe:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	f042 0201 	orr.w	r2, r2, #1
 8000e06:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e08:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <ADC_Enable+0x80>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a18      	ldr	r2, [pc, #96]	@ (8000e70 <ADC_Enable+0x84>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	0c9b      	lsrs	r3, r3, #18
 8000e14:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000e16:	e002      	b.n	8000e1e <ADC_Enable+0x32>
      wait_loop_index--;
 8000e18:	9b01      	ldr	r3, [sp, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000e1e:	9b01      	ldr	r3, [sp, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f9      	bne.n	8000e18 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8000e24:	f7ff feea 	bl	8000bfc <HAL_GetTick>
 8000e28:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f013 0f01 	tst.w	r3, #1
 8000e32:	d116      	bne.n	8000e62 <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e34:	f7ff fee2 	bl	8000bfc <HAL_GetTick>
 8000e38:	1b43      	subs	r3, r0, r5
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d9f5      	bls.n	8000e2a <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f013 0f01 	tst.w	r3, #1
 8000e46:	d1f0      	bne.n	8000e2a <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e48:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8000e5e:	2001      	movs	r0, #1
 8000e60:	e002      	b.n	8000e68 <ADC_Enable+0x7c>
  return HAL_OK;
 8000e62:	2000      	movs	r0, #0
 8000e64:	e000      	b.n	8000e68 <ADC_Enable+0x7c>
 8000e66:	2000      	movs	r0, #0
}
 8000e68:	b003      	add	sp, #12
 8000e6a:	bd30      	pop	{r4, r5, pc}
 8000e6c:	20000010 	.word	0x20000010
 8000e70:	431bde83 	.word	0x431bde83

08000e74 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000e74:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d068      	beq.n	8000f4e <HAL_ADC_Start+0xda>
{
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000e80:	2301      	movs	r3, #1
 8000e82:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000e86:	f7ff ffb1 	bl	8000dec <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	d15b      	bne.n	8000f46 <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 8000e8e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e94:	f023 0301 	bic.w	r3, r3, #1
 8000e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9c:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8000f54 <HAL_ADC_Start+0xe0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d027      	beq.n	8000ef6 <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ea6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000ea8:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8000eac:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8000eb4:	d005      	beq.n	8000ec2 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eb6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000eb8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000ebc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000ec0:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ec2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000ec4:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8000ec8:	d02b      	beq.n	8000f22 <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000eca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000ecc:	f022 0206 	bic.w	r2, r2, #6
 8000ed0:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ed8:	f06f 0202 	mvn.w	r2, #2
 8000edc:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8000ee6:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8000eea:	d01d      	beq.n	8000f28 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	e02a      	b.n	8000f4c <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ef6:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8000efa:	6852      	ldr	r2, [r2, #4]
 8000efc:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8000f00:	d0d1      	beq.n	8000ea6 <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f02:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000f04:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000f08:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f0a:	4a13      	ldr	r2, [pc, #76]	@ (8000f58 <HAL_ADC_Start+0xe4>)
 8000f0c:	6852      	ldr	r2, [r2, #4]
 8000f0e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8000f12:	d0d6      	beq.n	8000ec2 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f14:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000f16:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000f1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000f1e:	62a2      	str	r2, [r4, #40]	@ 0x28
 8000f20:	e7cf      	b.n	8000ec2 <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 8000f22:	2200      	movs	r2, #0
 8000f24:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8000f26:	e7d4      	b.n	8000ed2 <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <HAL_ADC_Start+0xe0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d004      	beq.n	8000f38 <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	e009      	b.n	8000f4c <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f38:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8000f3c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f3e:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8000f42:	d1d3      	bne.n	8000eec <HAL_ADC_Start+0x78>
 8000f44:	e7f3      	b.n	8000f2e <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 8000f46:	2300      	movs	r3, #0
 8000f48:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8000f4c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000f4e:	2002      	movs	r0, #2
}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40012800 	.word	0x40012800
 8000f58:	40012400 	.word	0x40012400

08000f5c <HAL_ADC_Start_DMA>:
{
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	4604      	mov	r4, r0
 8000f60:	460d      	mov	r5, r1
 8000f62:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000f64:	6801      	ldr	r1, [r0, #0]
 8000f66:	4844      	ldr	r0, [pc, #272]	@ (8001078 <HAL_ADC_Start_DMA+0x11c>)
 8000f68:	4281      	cmp	r1, r0
 8000f6a:	d059      	beq.n	8001020 <HAL_ADC_Start_DMA+0xc4>
 8000f6c:	4b43      	ldr	r3, [pc, #268]	@ (800107c <HAL_ADC_Start_DMA+0x120>)
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d056      	beq.n	8001020 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 8000f72:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d07c      	beq.n	8001074 <HAL_ADC_Start_DMA+0x118>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff ff33 	bl	8000dec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000f86:	4607      	mov	r7, r0
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	d16e      	bne.n	800106a <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 8000f8c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f8e:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8000f92:	f021 0101 	bic.w	r1, r1, #1
 8000f96:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8000f9a:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f9c:	6822      	ldr	r2, [r4, #0]
 8000f9e:	4b37      	ldr	r3, [pc, #220]	@ (800107c <HAL_ADC_Start_DMA+0x120>)
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d044      	beq.n	800102e <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fa4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000fa6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000faa:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fac:	6853      	ldr	r3, [r2, #4]
 8000fae:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8000fb2:	d005      	beq.n	8000fc0 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fb4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000fb6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fbe:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fc0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000fc2:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8000fc6:	d048      	beq.n	800105a <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fc8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000fca:	f023 0306 	bic.w	r3, r3, #6
 8000fce:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fd6:	6a23      	ldr	r3, [r4, #32]
 8000fd8:	4a29      	ldr	r2, [pc, #164]	@ (8001080 <HAL_ADC_Start_DMA+0x124>)
 8000fda:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fdc:	6a23      	ldr	r3, [r4, #32]
 8000fde:	4a29      	ldr	r2, [pc, #164]	@ (8001084 <HAL_ADC_Start_DMA+0x128>)
 8000fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fe2:	6a23      	ldr	r3, [r4, #32]
 8000fe4:	4a28      	ldr	r2, [pc, #160]	@ (8001088 <HAL_ADC_Start_DMA+0x12c>)
 8000fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	f06f 0202 	mvn.w	r2, #2
 8000fee:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000ff0:	6822      	ldr	r2, [r4, #0]
 8000ff2:	6893      	ldr	r3, [r2, #8]
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff8:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ffa:	6821      	ldr	r1, [r4, #0]
 8000ffc:	4633      	mov	r3, r6
 8000ffe:	462a      	mov	r2, r5
 8001000:	314c      	adds	r1, #76	@ 0x4c
 8001002:	6a20      	ldr	r0, [r4, #32]
 8001004:	f000 f9b4 	bl	8001370 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001010:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001014:	d024      	beq.n	8001060 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	e027      	b.n	8001070 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_ADC_Start_DMA+0x11c>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8001028:	d0a3      	beq.n	8000f72 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 800102a:	2701      	movs	r7, #1
 800102c:	e020      	b.n	8001070 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800102e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8001038:	d0b4      	beq.n	8000fa4 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800103a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800103c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001040:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001042:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <HAL_ADC_Start_DMA+0x11c>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800104a:	d0b9      	beq.n	8000fc0 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800104c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800104e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001052:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001056:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001058:	e7b2      	b.n	8000fc0 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 800105a:	2300      	movs	r3, #0
 800105c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800105e:	e7b7      	b.n	8000fd0 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	e002      	b.n	8001070 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 800106a:	2300      	movs	r3, #0
 800106c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001070:	4638      	mov	r0, r7
 8001072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001074:	2702      	movs	r7, #2
 8001076:	e7fb      	b.n	8001070 <HAL_ADC_Start_DMA+0x114>
 8001078:	40012400 	.word	0x40012400
 800107c:	40012800 	.word	0x40012800
 8001080:	08000c33 	.word	0x08000c33
 8001084:	08000c87 	.word	0x08000c87
 8001088:	08000c93 	.word	0x08000c93

0800108c <ADC_ConversionStop_Disable>:
{
 800108c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800108e:	6803      	ldr	r3, [r0, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	f012 0f01 	tst.w	r2, #1
 8001096:	d101      	bne.n	800109c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001098:	2000      	movs	r0, #0
}
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	f022 0201 	bic.w	r2, r2, #1
 80010a4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80010a6:	f7ff fda9 	bl	8000bfc <HAL_GetTick>
 80010aa:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f013 0f01 	tst.w	r3, #1
 80010b4:	d013      	beq.n	80010de <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010b6:	f7ff fda1 	bl	8000bfc <HAL_GetTick>
 80010ba:	1b43      	subs	r3, r0, r5
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d9f5      	bls.n	80010ac <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f013 0f01 	tst.w	r3, #1
 80010c8:	d0f0      	beq.n	80010ac <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80010da:	2001      	movs	r0, #1
 80010dc:	e7dd      	b.n	800109a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80010de:	2000      	movs	r0, #0
 80010e0:	e7db      	b.n	800109a <ADC_ConversionStop_Disable+0xe>
	...

080010e4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d07b      	beq.n	80011e0 <HAL_ADC_Init+0xfc>
{
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d04d      	beq.n	800118e <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff ffca 	bl	800108c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80010fa:	f013 0310 	ands.w	r3, r3, #16
 80010fe:	d169      	bne.n	80011d4 <HAL_ADC_Init+0xf0>
 8001100:	2800      	cmp	r0, #0
 8001102:	d167      	bne.n	80011d4 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8001104:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001106:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 800110a:	f022 0202 	bic.w	r2, r2, #2
 800110e:	f042 0202 	orr.w	r2, r2, #2
 8001112:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001114:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001116:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001118:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800111a:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800111c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001120:	68a5      	ldr	r5, [r4, #8]
 8001122:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8001126:	d002      	beq.n	800112e <HAL_ADC_Init+0x4a>
 8001128:	2d01      	cmp	r5, #1
 800112a:	d036      	beq.n	800119a <HAL_ADC_Init+0xb6>
 800112c:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800112e:	7d26      	ldrb	r6, [r4, #20]
 8001130:	2e01      	cmp	r6, #1
 8001132:	d035      	beq.n	80011a0 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8001134:	6826      	ldr	r6, [r4, #0]
 8001136:	6871      	ldr	r1, [r6, #4]
 8001138:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 800113c:	4329      	orrs	r1, r5
 800113e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001140:	6825      	ldr	r5, [r4, #0]
 8001142:	68ae      	ldr	r6, [r5, #8]
 8001144:	4927      	ldr	r1, [pc, #156]	@ (80011e4 <HAL_ADC_Init+0x100>)
 8001146:	4031      	ands	r1, r6
 8001148:	4311      	orrs	r1, r2
 800114a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800114c:	68a1      	ldr	r1, [r4, #8]
 800114e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001152:	d001      	beq.n	8001158 <HAL_ADC_Init+0x74>
 8001154:	2901      	cmp	r1, #1
 8001156:	d102      	bne.n	800115e <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001158:	6923      	ldr	r3, [r4, #16]
 800115a:	3b01      	subs	r3, #1
 800115c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800115e:	6825      	ldr	r5, [r4, #0]
 8001160:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8001162:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8001166:	430b      	orrs	r3, r1
 8001168:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	6899      	ldr	r1, [r3, #8]
 800116e:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <HAL_ADC_Init+0x104>)
 8001170:	400b      	ands	r3, r1
 8001172:	429a      	cmp	r2, r3
 8001174:	d025      	beq.n	80011c2 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8001176:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001178:	f023 0312 	bic.w	r3, r3, #18
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001182:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 800118a:	2001      	movs	r0, #1
 800118c:	e027      	b.n	80011de <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 800118e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001190:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8001194:	f000 ff14 	bl	8001fc0 <HAL_ADC_MspInit>
 8001198:	e7ab      	b.n	80010f2 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800119a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800119e:	e7c6      	b.n	800112e <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011a0:	b931      	cbnz	r1, 80011b0 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011a2:	69a1      	ldr	r1, [r4, #24]
 80011a4:	3901      	subs	r1, #1
 80011a6:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 80011aa:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 80011ae:	e7c1      	b.n	8001134 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80011b2:	f041 0120 	orr.w	r1, r1, #32
 80011b6:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80011ba:	f041 0101 	orr.w	r1, r1, #1
 80011be:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80011c0:	e7b8      	b.n	8001134 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 80011c2:	2300      	movs	r3, #0
 80011c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80011c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80011c8:	f023 0303 	bic.w	r3, r3, #3
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80011d2:	e004      	b.n	80011de <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 80011dc:	2001      	movs	r0, #1
}
 80011de:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80011e0:	2001      	movs	r0, #1
}
 80011e2:	4770      	bx	lr
 80011e4:	ffe1f7fd 	.word	0xffe1f7fd
 80011e8:	ff1f0efe 	.word	0xff1f0efe

080011ec <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80011ec:	2800      	cmp	r0, #0
 80011ee:	db08      	blt.n	8001202 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	0109      	lsls	r1, r1, #4
 80011f2:	b2c9      	uxtb	r1, r1
 80011f4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80011f8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80011fc:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001200:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	f000 000f 	and.w	r0, r0, #15
 8001206:	0109      	lsls	r1, r1, #4
 8001208:	b2c9      	uxtb	r1, r1
 800120a:	4b01      	ldr	r3, [pc, #4]	@ (8001210 <__NVIC_SetPriority+0x24>)
 800120c:	5419      	strb	r1, [r3, r0]
  }
}
 800120e:	4770      	bx	lr
 8001210:	e000ed14 	.word	0xe000ed14

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001216:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121a:	f1c0 0c07 	rsb	ip, r0, #7
 800121e:	f1bc 0f04 	cmp.w	ip, #4
 8001222:	bf28      	it	cs
 8001224:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001228:	1d03      	adds	r3, r0, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d90f      	bls.n	800124e <NVIC_EncodePriority+0x3a>
 800122e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 3eff 	mov.w	lr, #4294967295
 8001234:	fa0e f00c 	lsl.w	r0, lr, ip
 8001238:	ea21 0100 	bic.w	r1, r1, r0
 800123c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001242:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001246:	ea41 0002 	orr.w	r0, r1, r2
 800124a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	2300      	movs	r3, #0
 8001250:	e7ee      	b.n	8001230 <NVIC_EncodePriority+0x1c>
	...

08001254 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001256:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001258:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800125c:	041b      	lsls	r3, r3, #16
 800125e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001260:	0200      	lsls	r0, r0, #8
 8001262:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001266:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800126c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001270:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001278:	b510      	push	{r4, lr}
 800127a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_NVIC_SetPriority+0x1c>)
 800127e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001280:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001284:	f7ff ffc6 	bl	8001214 <NVIC_EncodePriority>
 8001288:	4601      	mov	r1, r0
 800128a:	4620      	mov	r0, r4
 800128c:	f7ff ffae 	bl	80011ec <__NVIC_SetPriority>
}
 8001290:	bd10      	pop	{r4, pc}
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001298:	2800      	cmp	r0, #0
 800129a:	db07      	blt.n	80012ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129c:	f000 021f 	and.w	r2, r0, #31
 80012a0:	0940      	lsrs	r0, r0, #5
 80012a2:	2301      	movs	r3, #1
 80012a4:	4093      	lsls	r3, r2
 80012a6:	4a02      	ldr	r2, [pc, #8]	@ (80012b0 <HAL_NVIC_EnableIRQ+0x18>)
 80012a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	3801      	subs	r0, #1
 80012b6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80012ba:	d20b      	bcs.n	80012d4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80012c0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	4a05      	ldr	r2, [pc, #20]	@ (80012d8 <HAL_SYSTICK_Config+0x24>)
 80012c4:	21f0      	movs	r1, #240	@ 0xf0
 80012c6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ca:	2000      	movs	r0, #0
 80012cc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	2207      	movs	r2, #7
 80012d0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012d4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012dc:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012de:	2401      	movs	r4, #1
 80012e0:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80012e2:	40ac      	lsls	r4, r5
 80012e4:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80012e6:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012e8:	6804      	ldr	r4, [r0, #0]
 80012ea:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012ec:	6843      	ldr	r3, [r0, #4]
 80012ee:	2b10      	cmp	r3, #16
 80012f0:	d005      	beq.n	80012fe <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80012f2:	6803      	ldr	r3, [r0, #0]
 80012f4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80012f6:	6803      	ldr	r3, [r0, #0]
 80012f8:	60da      	str	r2, [r3, #12]
  }
}
 80012fa:	bc30      	pop	{r4, r5}
 80012fc:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80012fe:	6803      	ldr	r3, [r0, #0]
 8001300:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001302:	6803      	ldr	r3, [r0, #0]
 8001304:	60d9      	str	r1, [r3, #12]
 8001306:	e7f8      	b.n	80012fa <DMA_SetConfig+0x1e>

08001308 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001308:	b350      	cbz	r0, 8001360 <HAL_DMA_Init+0x58>
{
 800130a:	b410      	push	{r4}
 800130c:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800130e:	6801      	ldr	r1, [r0, #0]
 8001310:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <HAL_DMA_Init+0x5c>)
 8001312:	440b      	add	r3, r1
 8001314:	4814      	ldr	r0, [pc, #80]	@ (8001368 <HAL_DMA_Init+0x60>)
 8001316:	fba0 0303 	umull	r0, r3, r0, r3
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_DMA_Init+0x64>)
 8001322:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001324:	2302      	movs	r3, #2
 8001326:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 800132a:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800132c:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 8001330:	6853      	ldr	r3, [r2, #4]
 8001332:	6894      	ldr	r4, [r2, #8]
 8001334:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001336:	68d4      	ldr	r4, [r2, #12]
 8001338:	4323      	orrs	r3, r4
 800133a:	6914      	ldr	r4, [r2, #16]
 800133c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133e:	6954      	ldr	r4, [r2, #20]
 8001340:	4323      	orrs	r3, r4
 8001342:	6994      	ldr	r4, [r2, #24]
 8001344:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001346:	69d4      	ldr	r4, [r2, #28]
 8001348:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800134a:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 800134c:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134e:	2000      	movs	r0, #0
 8001350:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001352:	2301      	movs	r3, #1
 8001354:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001358:	f882 0020 	strb.w	r0, [r2, #32]
}
 800135c:	bc10      	pop	{r4}
 800135e:	4770      	bx	lr
    return HAL_ERROR;
 8001360:	2001      	movs	r0, #1
}
 8001362:	4770      	bx	lr
 8001364:	bffdfff8 	.word	0xbffdfff8
 8001368:	cccccccd 	.word	0xcccccccd
 800136c:	40020000 	.word	0x40020000

08001370 <HAL_DMA_Start_IT>:
{
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001374:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001378:	2801      	cmp	r0, #1
 800137a:	d032      	beq.n	80013e2 <HAL_DMA_Start_IT+0x72>
 800137c:	2001      	movs	r0, #1
 800137e:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001382:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8001386:	b2c0      	uxtb	r0, r0
 8001388:	2801      	cmp	r0, #1
 800138a:	d004      	beq.n	8001396 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 800138c:	2300      	movs	r3, #0
 800138e:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8001392:	2002      	movs	r0, #2
}
 8001394:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001396:	2002      	movs	r0, #2
 8001398:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139c:	2000      	movs	r0, #0
 800139e:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 80013a0:	6825      	ldr	r5, [r4, #0]
 80013a2:	6828      	ldr	r0, [r5, #0]
 80013a4:	f020 0001 	bic.w	r0, r0, #1
 80013a8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff ff96 	bl	80012dc <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80013b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80013b2:	b15b      	cbz	r3, 80013cc <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013b4:	6822      	ldr	r2, [r4, #0]
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	f043 030e 	orr.w	r3, r3, #14
 80013bc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	6813      	ldr	r3, [r2, #0]
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013c8:	2000      	movs	r0, #0
 80013ca:	e7e3      	b.n	8001394 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013cc:	6822      	ldr	r2, [r4, #0]
 80013ce:	6813      	ldr	r3, [r2, #0]
 80013d0:	f023 0304 	bic.w	r3, r3, #4
 80013d4:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013d6:	6822      	ldr	r2, [r4, #0]
 80013d8:	6813      	ldr	r3, [r2, #0]
 80013da:	f043 030a 	orr.w	r3, r3, #10
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e7ed      	b.n	80013be <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80013e2:	2002      	movs	r0, #2
 80013e4:	e7d6      	b.n	8001394 <HAL_DMA_Start_IT+0x24>
	...

080013e8 <HAL_DMA_IRQHandler>:
{
 80013e8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013ea:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80013ec:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80013ee:	6804      	ldr	r4, [r0, #0]
 80013f0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013f2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80013f4:	2304      	movs	r3, #4
 80013f6:	408b      	lsls	r3, r1
 80013f8:	4213      	tst	r3, r2
 80013fa:	d035      	beq.n	8001468 <HAL_DMA_IRQHandler+0x80>
 80013fc:	f015 0f04 	tst.w	r5, #4
 8001400:	d032      	beq.n	8001468 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	f013 0f20 	tst.w	r3, #32
 8001408:	d103      	bne.n	8001412 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	f023 0304 	bic.w	r3, r3, #4
 8001410:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001412:	6803      	ldr	r3, [r0, #0]
 8001414:	4a43      	ldr	r2, [pc, #268]	@ (8001524 <HAL_DMA_IRQHandler+0x13c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d014      	beq.n	8001444 <HAL_DMA_IRQHandler+0x5c>
 800141a:	3214      	adds	r2, #20
 800141c:	4293      	cmp	r3, r2
 800141e:	d018      	beq.n	8001452 <HAL_DMA_IRQHandler+0x6a>
 8001420:	3214      	adds	r2, #20
 8001422:	4293      	cmp	r3, r2
 8001424:	d017      	beq.n	8001456 <HAL_DMA_IRQHandler+0x6e>
 8001426:	3214      	adds	r2, #20
 8001428:	4293      	cmp	r3, r2
 800142a:	d017      	beq.n	800145c <HAL_DMA_IRQHandler+0x74>
 800142c:	3214      	adds	r2, #20
 800142e:	4293      	cmp	r3, r2
 8001430:	d017      	beq.n	8001462 <HAL_DMA_IRQHandler+0x7a>
 8001432:	3214      	adds	r2, #20
 8001434:	4293      	cmp	r3, r2
 8001436:	d002      	beq.n	800143e <HAL_DMA_IRQHandler+0x56>
 8001438:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800143c:	e003      	b.n	8001446 <HAL_DMA_IRQHandler+0x5e>
 800143e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001442:	e000      	b.n	8001446 <HAL_DMA_IRQHandler+0x5e>
 8001444:	2204      	movs	r2, #4
 8001446:	4b38      	ldr	r3, [pc, #224]	@ (8001528 <HAL_DMA_IRQHandler+0x140>)
 8001448:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800144a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800144c:	b103      	cbz	r3, 8001450 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 800144e:	4798      	blx	r3
}
 8001450:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001452:	2240      	movs	r2, #64	@ 0x40
 8001454:	e7f7      	b.n	8001446 <HAL_DMA_IRQHandler+0x5e>
 8001456:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800145a:	e7f4      	b.n	8001446 <HAL_DMA_IRQHandler+0x5e>
 800145c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001460:	e7f1      	b.n	8001446 <HAL_DMA_IRQHandler+0x5e>
 8001462:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001466:	e7ee      	b.n	8001446 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001468:	2302      	movs	r3, #2
 800146a:	408b      	lsls	r3, r1
 800146c:	4213      	tst	r3, r2
 800146e:	d03c      	beq.n	80014ea <HAL_DMA_IRQHandler+0x102>
 8001470:	f015 0f02 	tst.w	r5, #2
 8001474:	d039      	beq.n	80014ea <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	f013 0f20 	tst.w	r3, #32
 800147c:	d106      	bne.n	800148c <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	f023 030a 	bic.w	r3, r3, #10
 8001484:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001486:	2301      	movs	r3, #1
 8001488:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800148c:	6803      	ldr	r3, [r0, #0]
 800148e:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <HAL_DMA_IRQHandler+0x13c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d014      	beq.n	80014be <HAL_DMA_IRQHandler+0xd6>
 8001494:	3214      	adds	r2, #20
 8001496:	4293      	cmp	r3, r2
 8001498:	d01c      	beq.n	80014d4 <HAL_DMA_IRQHandler+0xec>
 800149a:	3214      	adds	r2, #20
 800149c:	4293      	cmp	r3, r2
 800149e:	d01b      	beq.n	80014d8 <HAL_DMA_IRQHandler+0xf0>
 80014a0:	3214      	adds	r2, #20
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01b      	beq.n	80014de <HAL_DMA_IRQHandler+0xf6>
 80014a6:	3214      	adds	r2, #20
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d01b      	beq.n	80014e4 <HAL_DMA_IRQHandler+0xfc>
 80014ac:	3214      	adds	r2, #20
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d002      	beq.n	80014b8 <HAL_DMA_IRQHandler+0xd0>
 80014b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014b6:	e003      	b.n	80014c0 <HAL_DMA_IRQHandler+0xd8>
 80014b8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014bc:	e000      	b.n	80014c0 <HAL_DMA_IRQHandler+0xd8>
 80014be:	2202      	movs	r2, #2
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_DMA_IRQHandler+0x140>)
 80014c2:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 80014c4:	2300      	movs	r3, #0
 80014c6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80014ca:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0bf      	beq.n	8001450 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 80014d0:	4798      	blx	r3
 80014d2:	e7bd      	b.n	8001450 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014d4:	2220      	movs	r2, #32
 80014d6:	e7f3      	b.n	80014c0 <HAL_DMA_IRQHandler+0xd8>
 80014d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014dc:	e7f0      	b.n	80014c0 <HAL_DMA_IRQHandler+0xd8>
 80014de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014e2:	e7ed      	b.n	80014c0 <HAL_DMA_IRQHandler+0xd8>
 80014e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014e8:	e7ea      	b.n	80014c0 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014ea:	2308      	movs	r3, #8
 80014ec:	408b      	lsls	r3, r1
 80014ee:	4213      	tst	r3, r2
 80014f0:	d0ae      	beq.n	8001450 <HAL_DMA_IRQHandler+0x68>
 80014f2:	f015 0f08 	tst.w	r5, #8
 80014f6:	d0ab      	beq.n	8001450 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	f023 030e 	bic.w	r3, r3, #14
 80014fe:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001500:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001502:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001504:	2301      	movs	r3, #1
 8001506:	fa03 f202 	lsl.w	r2, r3, r2
 800150a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800150c:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800150e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001512:	2300      	movs	r3, #0
 8001514:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001518:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800151a:	2b00      	cmp	r3, #0
 800151c:	d098      	beq.n	8001450 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 800151e:	4798      	blx	r3
  return;
 8001520:	e796      	b.n	8001450 <HAL_DMA_IRQHandler+0x68>
 8001522:	bf00      	nop
 8001524:	40020008 	.word	0x40020008
 8001528:	40020000 	.word	0x40020000

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b570      	push	{r4, r5, r6, lr}
 800152e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001530:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001532:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001534:	e0a1      	b.n	800167a <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001536:	4d7e      	ldr	r5, [pc, #504]	@ (8001730 <HAL_GPIO_Init+0x204>)
 8001538:	42ab      	cmp	r3, r5
 800153a:	d014      	beq.n	8001566 <HAL_GPIO_Init+0x3a>
 800153c:	d80c      	bhi.n	8001558 <HAL_GPIO_Init+0x2c>
 800153e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001542:	42ab      	cmp	r3, r5
 8001544:	d00f      	beq.n	8001566 <HAL_GPIO_Init+0x3a>
 8001546:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 800154a:	42ab      	cmp	r3, r5
 800154c:	d00b      	beq.n	8001566 <HAL_GPIO_Init+0x3a>
 800154e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001552:	42ab      	cmp	r3, r5
 8001554:	d110      	bne.n	8001578 <HAL_GPIO_Init+0x4c>
 8001556:	e006      	b.n	8001566 <HAL_GPIO_Init+0x3a>
 8001558:	4d76      	ldr	r5, [pc, #472]	@ (8001734 <HAL_GPIO_Init+0x208>)
 800155a:	42ab      	cmp	r3, r5
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x3a>
 800155e:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8001562:	42ab      	cmp	r3, r5
 8001564:	d108      	bne.n	8001578 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001566:	688b      	ldr	r3, [r1, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d050      	beq.n	800160e <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800156c:	2b01      	cmp	r3, #1
 800156e:	d049      	beq.n	8001604 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001570:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001572:	2408      	movs	r4, #8
 8001574:	e000      	b.n	8001578 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001576:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001578:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800157c:	d849      	bhi.n	8001612 <HAL_GPIO_Init+0xe6>
 800157e:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001580:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001584:	6833      	ldr	r3, [r6, #0]
 8001586:	250f      	movs	r5, #15
 8001588:	4095      	lsls	r5, r2
 800158a:	ea23 0305 	bic.w	r3, r3, r5
 800158e:	fa04 f202 	lsl.w	r2, r4, r2
 8001592:	4313      	orrs	r3, r2
 8001594:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001596:	684b      	ldr	r3, [r1, #4]
 8001598:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800159c:	d06b      	beq.n	8001676 <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800159e:	4b66      	ldr	r3, [pc, #408]	@ (8001738 <HAL_GPIO_Init+0x20c>)
 80015a0:	699a      	ldr	r2, [r3, #24]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	619a      	str	r2, [r3, #24]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80015b2:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80015b6:	1c95      	adds	r5, r2, #2
 80015b8:	4b60      	ldr	r3, [pc, #384]	@ (800173c <HAL_GPIO_Init+0x210>)
 80015ba:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015be:	f00c 0503 	and.w	r5, ip, #3
 80015c2:	00ad      	lsls	r5, r5, #2
 80015c4:	230f      	movs	r3, #15
 80015c6:	40ab      	lsls	r3, r5
 80015c8:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001740 <HAL_GPIO_Init+0x214>)
 80015ce:	4298      	cmp	r0, r3
 80015d0:	d026      	beq.n	8001620 <HAL_GPIO_Init+0xf4>
 80015d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015d6:	4298      	cmp	r0, r3
 80015d8:	f000 808c 	beq.w	80016f4 <HAL_GPIO_Init+0x1c8>
 80015dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015e0:	4298      	cmp	r0, r3
 80015e2:	f000 8089 	beq.w	80016f8 <HAL_GPIO_Init+0x1cc>
 80015e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80015ea:	4298      	cmp	r0, r3
 80015ec:	d016      	beq.n	800161c <HAL_GPIO_Init+0xf0>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e017      	b.n	8001622 <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f2:	68cc      	ldr	r4, [r1, #12]
 80015f4:	3404      	adds	r4, #4
          break;
 80015f6:	e7bf      	b.n	8001578 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015f8:	68cc      	ldr	r4, [r1, #12]
 80015fa:	3408      	adds	r4, #8
          break;
 80015fc:	e7bc      	b.n	8001578 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015fe:	68cc      	ldr	r4, [r1, #12]
 8001600:	340c      	adds	r4, #12
          break;
 8001602:	e7b9      	b.n	8001578 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 8001604:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001606:	2408      	movs	r4, #8
 8001608:	e7b6      	b.n	8001578 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800160a:	2400      	movs	r4, #0
 800160c:	e7b4      	b.n	8001578 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160e:	2404      	movs	r4, #4
 8001610:	e7b2      	b.n	8001578 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001612:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001614:	f1ac 0208 	sub.w	r2, ip, #8
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	e7b3      	b.n	8001584 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800161c:	2303      	movs	r3, #3
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0xf6>
 8001620:	2300      	movs	r3, #0
 8001622:	40ab      	lsls	r3, r5
 8001624:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001626:	3202      	adds	r2, #2
 8001628:	4d44      	ldr	r5, [pc, #272]	@ (800173c <HAL_GPIO_Init+0x210>)
 800162a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162e:	684b      	ldr	r3, [r1, #4]
 8001630:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001634:	d062      	beq.n	80016fc <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001636:	4a43      	ldr	r2, [pc, #268]	@ (8001744 <HAL_GPIO_Init+0x218>)
 8001638:	6893      	ldr	r3, [r2, #8]
 800163a:	ea43 030e 	orr.w	r3, r3, lr
 800163e:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001640:	684b      	ldr	r3, [r1, #4]
 8001642:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001646:	d05f      	beq.n	8001708 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001648:	4a3e      	ldr	r2, [pc, #248]	@ (8001744 <HAL_GPIO_Init+0x218>)
 800164a:	68d3      	ldr	r3, [r2, #12]
 800164c:	ea43 030e 	orr.w	r3, r3, lr
 8001650:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001652:	684b      	ldr	r3, [r1, #4]
 8001654:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001658:	d05c      	beq.n	8001714 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800165a:	4a3a      	ldr	r2, [pc, #232]	@ (8001744 <HAL_GPIO_Init+0x218>)
 800165c:	6853      	ldr	r3, [r2, #4]
 800165e:	ea43 030e 	orr.w	r3, r3, lr
 8001662:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001664:	684b      	ldr	r3, [r1, #4]
 8001666:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800166a:	d059      	beq.n	8001720 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800166c:	4a35      	ldr	r2, [pc, #212]	@ (8001744 <HAL_GPIO_Init+0x218>)
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	ea43 030e 	orr.w	r3, r3, lr
 8001674:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001676:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	680b      	ldr	r3, [r1, #0]
 800167c:	fa33 f20c 	lsrs.w	r2, r3, ip
 8001680:	d054      	beq.n	800172c <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8001682:	2201      	movs	r2, #1
 8001684:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001688:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 800168c:	ea32 0303 	bics.w	r3, r2, r3
 8001690:	d1f1      	bne.n	8001676 <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8001692:	684b      	ldr	r3, [r1, #4]
 8001694:	2b12      	cmp	r3, #18
 8001696:	f63f af4e 	bhi.w	8001536 <HAL_GPIO_Init+0xa>
 800169a:	2b12      	cmp	r3, #18
 800169c:	f63f af6c 	bhi.w	8001578 <HAL_GPIO_Init+0x4c>
 80016a0:	a501      	add	r5, pc, #4	@ (adr r5, 80016a8 <HAL_GPIO_Init+0x17c>)
 80016a2:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	08001567 	.word	0x08001567
 80016ac:	08001577 	.word	0x08001577
 80016b0:	080015f9 	.word	0x080015f9
 80016b4:	0800160b 	.word	0x0800160b
 80016b8:	08001579 	.word	0x08001579
 80016bc:	08001579 	.word	0x08001579
 80016c0:	08001579 	.word	0x08001579
 80016c4:	08001579 	.word	0x08001579
 80016c8:	08001579 	.word	0x08001579
 80016cc:	08001579 	.word	0x08001579
 80016d0:	08001579 	.word	0x08001579
 80016d4:	08001579 	.word	0x08001579
 80016d8:	08001579 	.word	0x08001579
 80016dc:	08001579 	.word	0x08001579
 80016e0:	08001579 	.word	0x08001579
 80016e4:	08001579 	.word	0x08001579
 80016e8:	08001579 	.word	0x08001579
 80016ec:	080015f3 	.word	0x080015f3
 80016f0:	080015ff 	.word	0x080015ff
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f4:	2301      	movs	r3, #1
 80016f6:	e794      	b.n	8001622 <HAL_GPIO_Init+0xf6>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e792      	b.n	8001622 <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016fc:	4a11      	ldr	r2, [pc, #68]	@ (8001744 <HAL_GPIO_Init+0x218>)
 80016fe:	6893      	ldr	r3, [r2, #8]
 8001700:	ea23 030e 	bic.w	r3, r3, lr
 8001704:	6093      	str	r3, [r2, #8]
 8001706:	e79b      	b.n	8001640 <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001708:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <HAL_GPIO_Init+0x218>)
 800170a:	68d3      	ldr	r3, [r2, #12]
 800170c:	ea23 030e 	bic.w	r3, r3, lr
 8001710:	60d3      	str	r3, [r2, #12]
 8001712:	e79e      	b.n	8001652 <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001714:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <HAL_GPIO_Init+0x218>)
 8001716:	6853      	ldr	r3, [r2, #4]
 8001718:	ea23 030e 	bic.w	r3, r3, lr
 800171c:	6053      	str	r3, [r2, #4]
 800171e:	e7a1      	b.n	8001664 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001720:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <HAL_GPIO_Init+0x218>)
 8001722:	6813      	ldr	r3, [r2, #0]
 8001724:	ea23 030e 	bic.w	r3, r3, lr
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e7a4      	b.n	8001676 <HAL_GPIO_Init+0x14a>
  }
}
 800172c:	b002      	add	sp, #8
 800172e:	bd70      	pop	{r4, r5, r6, pc}
 8001730:	10220000 	.word	0x10220000
 8001734:	10310000 	.word	0x10310000
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000
 8001740:	40010800 	.word	0x40010800
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001748:	6883      	ldr	r3, [r0, #8]
 800174a:	4219      	tst	r1, r3
 800174c:	d001      	beq.n	8001752 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800174e:	2001      	movs	r0, #1
 8001750:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001752:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001754:	4770      	bx	lr

08001756 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001756:	b10a      	cbz	r2, 800175c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001758:	6101      	str	r1, [r0, #16]
 800175a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175c:	0409      	lsls	r1, r1, #16
 800175e:	6101      	str	r1, [r0, #16]
  }
}
 8001760:	4770      	bx	lr

08001762 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001762:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001764:	ea01 0203 	and.w	r2, r1, r3
 8001768:	ea21 0103 	bic.w	r1, r1, r3
 800176c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001770:	6101      	str	r1, [r0, #16]
}
 8001772:	4770      	bx	lr

08001774 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001774:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	4203      	tst	r3, r0
 800177c:	d100      	bne.n	8001780 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800177e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001780:	4b02      	ldr	r3, [pc, #8]	@ (800178c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001782:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001784:	f7fe fdc0 	bl	8000308 <HAL_GPIO_EXTI_Callback>
}
 8001788:	e7f9      	b.n	800177e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800178a:	bf00      	nop
 800178c:	40010400 	.word	0x40010400

08001790 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001790:	6803      	ldr	r3, [r0, #0]
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001798:	d101      	bne.n	800179e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800179a:	2000      	movs	r0, #0
}
 800179c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800179e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017a2:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80017a8:	2220      	movs	r2, #32
 80017aa:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017ae:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017b2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80017b4:	f042 0204 	orr.w	r2, r2, #4
 80017b8:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80017ba:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80017be:	2001      	movs	r0, #1
 80017c0:	4770      	bx	lr

080017c2 <I2C_WaitOnFlagUntilTimeout>:
{
 80017c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c6:	4606      	mov	r6, r0
 80017c8:	460c      	mov	r4, r1
 80017ca:	4617      	mov	r7, r2
 80017cc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017ce:	e03b      	b.n	8001848 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d0:	f7ff fa14 	bl	8000bfc <HAL_GetTick>
 80017d4:	9b06      	ldr	r3, [sp, #24]
 80017d6:	1ac0      	subs	r0, r0, r3
 80017d8:	4540      	cmp	r0, r8
 80017da:	d802      	bhi.n	80017e2 <I2C_WaitOnFlagUntilTimeout+0x20>
 80017dc:	f1b8 0f00 	cmp.w	r8, #0
 80017e0:	d132      	bne.n	8001848 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017e2:	2d01      	cmp	r5, #1
 80017e4:	d018      	beq.n	8001818 <I2C_WaitOnFlagUntilTimeout+0x56>
 80017e6:	6833      	ldr	r3, [r6, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	ea24 0303 	bic.w	r3, r4, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	fab3 f383 	clz	r3, r3
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	429f      	cmp	r7, r3
 80017f8:	d126      	bne.n	8001848 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80017fe:	2220      	movs	r2, #32
 8001800:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001804:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001808:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800180a:	f042 0220 	orr.w	r2, r2, #32
 800180e:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001810:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001814:	2001      	movs	r0, #1
 8001816:	e027      	b.n	8001868 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001818:	6833      	ldr	r3, [r6, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	ea24 0303 	bic.w	r3, r4, r3
 8001820:	b29b      	uxth	r3, r3
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	e7e5      	b.n	80017f6 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800182a:	6833      	ldr	r3, [r6, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	ea24 0c03 	bic.w	ip, r4, r3
 8001832:	fa1f fc8c 	uxth.w	ip, ip
 8001836:	fabc fc8c 	clz	ip, ip
 800183a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800183e:	4567      	cmp	r7, ip
 8001840:	d111      	bne.n	8001866 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8001842:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001846:	d1c3      	bne.n	80017d0 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001848:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800184c:	2d01      	cmp	r5, #1
 800184e:	d0ec      	beq.n	800182a <I2C_WaitOnFlagUntilTimeout+0x68>
 8001850:	6833      	ldr	r3, [r6, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	ea24 0c03 	bic.w	ip, r4, r3
 8001858:	fa1f fc8c 	uxth.w	ip, ip
 800185c:	fabc fc8c 	clz	ip, ip
 8001860:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001864:	e7eb      	b.n	800183e <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001866:	2000      	movs	r0, #0
}
 8001868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800186c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800186c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001870:	4605      	mov	r5, r0
 8001872:	460e      	mov	r6, r1
 8001874:	4690      	mov	r8, r2
 8001876:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001878:	e053      	b.n	8001922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001880:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001888:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800188e:	2220      	movs	r2, #32
 8001890:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001894:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001898:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800189a:	f042 0204 	orr.w	r2, r2, #4
 800189e:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80018a0:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80018a4:	2001      	movs	r0, #1
 80018a6:	e04a      	b.n	800193e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a8:	f7ff f9a8 	bl	8000bfc <HAL_GetTick>
 80018ac:	eba0 0009 	sub.w	r0, r0, r9
 80018b0:	4540      	cmp	r0, r8
 80018b2:	d802      	bhi.n	80018ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 80018b4:	f1b8 0f00 	cmp.w	r8, #0
 80018b8:	d133      	bne.n	8001922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80018ba:	2f01      	cmp	r7, #1
 80018bc:	d017      	beq.n	80018ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 80018be:	682b      	ldr	r3, [r5, #0]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	ea26 0303 	bic.w	r3, r6, r3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	3b00      	subs	r3, #0
 80018ca:	bf18      	it	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	b343      	cbz	r3, 8001922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80018d4:	2220      	movs	r2, #32
 80018d6:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018da:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018de:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80018e0:	f042 0220 	orr.w	r2, r2, #32
 80018e4:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80018e6:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80018ea:	2001      	movs	r0, #1
 80018ec:	e027      	b.n	800193e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80018ee:	682b      	ldr	r3, [r5, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	ea26 0303 	bic.w	r3, r6, r3
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3b00      	subs	r3, #0
 80018fa:	bf18      	it	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	e7e6      	b.n	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001900:	682b      	ldr	r3, [r5, #0]
 8001902:	699c      	ldr	r4, [r3, #24]
 8001904:	ea26 0404 	bic.w	r4, r6, r4
 8001908:	b2a4      	uxth	r4, r4
 800190a:	3c00      	subs	r4, #0
 800190c:	bf18      	it	ne
 800190e:	2401      	movne	r4, #1
 8001910:	b1a4      	cbz	r4, 800193c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001912:	682b      	ldr	r3, [r5, #0]
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800191a:	d1ae      	bne.n	800187a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800191c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001920:	d1c2      	bne.n	80018a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001922:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001926:	2f01      	cmp	r7, #1
 8001928:	d1ea      	bne.n	8001900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 800192a:	682b      	ldr	r3, [r5, #0]
 800192c:	695c      	ldr	r4, [r3, #20]
 800192e:	ea26 0404 	bic.w	r4, r6, r4
 8001932:	b2a4      	uxth	r4, r4
 8001934:	3c00      	subs	r4, #0
 8001936:	bf18      	it	ne
 8001938:	2401      	movne	r4, #1
 800193a:	e7e9      	b.n	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 800193c:	2000      	movs	r0, #0
}
 800193e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001944 <I2C_MasterRequestWrite>:
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b083      	sub	sp, #12
 8001948:	4604      	mov	r4, r0
 800194a:	460d      	mov	r5, r1
 800194c:	4616      	mov	r6, r2
 800194e:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001950:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001952:	2b08      	cmp	r3, #8
 8001954:	d00d      	beq.n	8001972 <I2C_MasterRequestWrite+0x2e>
 8001956:	2b01      	cmp	r3, #1
 8001958:	d00b      	beq.n	8001972 <I2C_MasterRequestWrite+0x2e>
 800195a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800195e:	d008      	beq.n	8001972 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001960:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001962:	2b12      	cmp	r3, #18
 8001964:	d10a      	bne.n	800197c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001966:	6802      	ldr	r2, [r0, #0]
 8001968:	6813      	ldr	r3, [r2, #0]
 800196a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e004      	b.n	800197c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001972:	6822      	ldr	r2, [r4, #0]
 8001974:	6813      	ldr	r3, [r2, #0]
 8001976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800197c:	9700      	str	r7, [sp, #0]
 800197e:	4633      	mov	r3, r6
 8001980:	2200      	movs	r2, #0
 8001982:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff ff1b 	bl	80017c2 <I2C_WaitOnFlagUntilTimeout>
 800198c:	b980      	cbnz	r0, 80019b0 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800198e:	6923      	ldr	r3, [r4, #16]
 8001990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001994:	d116      	bne.n	80019c4 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001996:	6823      	ldr	r3, [r4, #0]
 8001998:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 800199c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	4632      	mov	r2, r6
 80019a2:	4913      	ldr	r1, [pc, #76]	@ (80019f0 <I2C_MasterRequestWrite+0xac>)
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff ff61 	bl	800186c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019aa:	b9f8      	cbnz	r0, 80019ec <I2C_MasterRequestWrite+0xa8>
}
 80019ac:	b003      	add	sp, #12
 80019ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80019b8:	d002      	beq.n	80019c0 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019be:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80019c0:	2003      	movs	r0, #3
 80019c2:	e7f3      	b.n	80019ac <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019c4:	11eb      	asrs	r3, r5, #7
 80019c6:	6822      	ldr	r2, [r4, #0]
 80019c8:	f003 0306 	and.w	r3, r3, #6
 80019cc:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80019d0:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4632      	mov	r2, r6
 80019d6:	4907      	ldr	r1, [pc, #28]	@ (80019f4 <I2C_MasterRequestWrite+0xb0>)
 80019d8:	4620      	mov	r0, r4
 80019da:	f7ff ff47 	bl	800186c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019de:	b918      	cbnz	r0, 80019e8 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	b2ed      	uxtb	r5, r5
 80019e4:	611d      	str	r5, [r3, #16]
 80019e6:	e7da      	b.n	800199e <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
 80019ea:	e7df      	b.n	80019ac <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 80019ec:	2001      	movs	r0, #1
 80019ee:	e7dd      	b.n	80019ac <I2C_MasterRequestWrite+0x68>
 80019f0:	00010002 	.word	0x00010002
 80019f4:	00010008 	.word	0x00010008

080019f8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	4604      	mov	r4, r0
 80019fc:	460d      	mov	r5, r1
 80019fe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a08:	d121      	bne.n	8001a4e <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff fec0 	bl	8001790 <I2C_IsAcknowledgeFailed>
 8001a10:	b9f8      	cbnz	r0, 8001a52 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001a12:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001a16:	d0f3      	beq.n	8001a00 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a18:	f7ff f8f0 	bl	8000bfc <HAL_GetTick>
 8001a1c:	1b80      	subs	r0, r0, r6
 8001a1e:	42a8      	cmp	r0, r5
 8001a20:	d801      	bhi.n	8001a26 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001a22:	2d00      	cmp	r5, #0
 8001a24:	d1ec      	bne.n	8001a00 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001a2e:	d1e7      	bne.n	8001a00 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a34:	2220      	movs	r2, #32
 8001a36:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a3a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a3e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001a40:	f042 0220 	orr.w	r2, r2, #32
 8001a44:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001a46:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	e000      	b.n	8001a50 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8001a4e:	2000      	movs	r0, #0
}
 8001a50:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001a52:	2001      	movs	r0, #1
 8001a54:	e7fc      	b.n	8001a50 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08001a56 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001a56:	b570      	push	{r4, r5, r6, lr}
 8001a58:	4604      	mov	r4, r0
 8001a5a:	460d      	mov	r5, r1
 8001a5c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f013 0f04 	tst.w	r3, #4
 8001a66:	d121      	bne.n	8001aac <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f7ff fe91 	bl	8001790 <I2C_IsAcknowledgeFailed>
 8001a6e:	b9f8      	cbnz	r0, 8001ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001a70:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001a74:	d0f3      	beq.n	8001a5e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a76:	f7ff f8c1 	bl	8000bfc <HAL_GetTick>
 8001a7a:	1b80      	subs	r0, r0, r6
 8001a7c:	42a8      	cmp	r0, r5
 8001a7e:	d801      	bhi.n	8001a84 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d1ec      	bne.n	8001a5e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f013 0f04 	tst.w	r3, #4
 8001a8c:	d1e7      	bne.n	8001a5e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a92:	2220      	movs	r2, #32
 8001a94:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a98:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a9c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001a9e:	f042 0220 	orr.w	r2, r2, #32
 8001aa2:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001aa4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	e000      	b.n	8001aae <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8001aac:	2000      	movs	r0, #0
}
 8001aae:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	e7fc      	b.n	8001aae <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08001ab4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	f000 80cc 	beq.w	8001c52 <HAL_I2C_Init+0x19e>
{
 8001aba:	b570      	push	{r4, r5, r6, lr}
 8001abc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001abe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d077      	beq.n	8001bb6 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac6:	2324      	movs	r3, #36	@ 0x24
 8001ac8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001acc:	6822      	ldr	r2, [r4, #0]
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ad6:	6822      	ldr	r2, [r4, #0]
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ade:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ae0:	6822      	ldr	r2, [r4, #0]
 8001ae2:	6813      	ldr	r3, [r2, #0]
 8001ae4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ae8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001aea:	f000 fe3b 	bl	8002764 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aee:	6862      	ldr	r2, [r4, #4]
 8001af0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c5c <HAL_I2C_Init+0x1a8>)
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d864      	bhi.n	8001bc0 <HAL_I2C_Init+0x10c>
 8001af6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c60 <HAL_I2C_Init+0x1ac>)
 8001af8:	4298      	cmp	r0, r3
 8001afa:	bf8c      	ite	hi
 8001afc:	2300      	movhi	r3, #0
 8001afe:	2301      	movls	r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f040 80a8 	bne.w	8001c56 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8001b06:	4957      	ldr	r1, [pc, #348]	@ (8001c64 <HAL_I2C_Init+0x1b0>)
 8001b08:	fba1 3100 	umull	r3, r1, r1, r0
 8001b0c:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b0e:	6825      	ldr	r5, [r4, #0]
 8001b10:	686a      	ldr	r2, [r5, #4]
 8001b12:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001b16:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8001b1a:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b1c:	6821      	ldr	r1, [r4, #0]
 8001b1e:	6a0a      	ldr	r2, [r1, #32]
 8001b20:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001b24:	6866      	ldr	r6, [r4, #4]
 8001b26:	4d4d      	ldr	r5, [pc, #308]	@ (8001c5c <HAL_I2C_Init+0x1a8>)
 8001b28:	42ae      	cmp	r6, r5
 8001b2a:	d84f      	bhi.n	8001bcc <HAL_I2C_Init+0x118>
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b32:	6821      	ldr	r1, [r4, #0]
 8001b34:	69ca      	ldr	r2, [r1, #28]
 8001b36:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8001b3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b3e:	6865      	ldr	r5, [r4, #4]
 8001b40:	4b46      	ldr	r3, [pc, #280]	@ (8001c5c <HAL_I2C_Init+0x1a8>)
 8001b42:	429d      	cmp	r5, r3
 8001b44:	d84c      	bhi.n	8001be0 <HAL_I2C_Init+0x12c>
 8001b46:	1e43      	subs	r3, r0, #1
 8001b48:	006d      	lsls	r5, r5, #1
 8001b4a:	fbb3 f3f5 	udiv	r3, r3, r5
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001b54:	4203      	tst	r3, r0
 8001b56:	d078      	beq.n	8001c4a <HAL_I2C_Init+0x196>
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b60:	6821      	ldr	r1, [r4, #0]
 8001b62:	680b      	ldr	r3, [r1, #0]
 8001b64:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001b68:	69e2      	ldr	r2, [r4, #28]
 8001b6a:	6a20      	ldr	r0, [r4, #32]
 8001b6c:	4302      	orrs	r2, r0
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b72:	6821      	ldr	r1, [r4, #0]
 8001b74:	688b      	ldr	r3, [r1, #8]
 8001b76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b7e:	6922      	ldr	r2, [r4, #16]
 8001b80:	68e0      	ldr	r0, [r4, #12]
 8001b82:	4302      	orrs	r2, r0
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b88:	6821      	ldr	r1, [r4, #0]
 8001b8a:	68cb      	ldr	r3, [r1, #12]
 8001b8c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b90:	6962      	ldr	r2, [r4, #20]
 8001b92:	69a0      	ldr	r0, [r4, #24]
 8001b94:	4302      	orrs	r2, r0
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bae:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8001bb4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001bb6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001bba:	f000 fa4f 	bl	800205c <HAL_I2C_MspInit>
 8001bbe:	e782      	b.n	8001ac6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bc0:	4b29      	ldr	r3, [pc, #164]	@ (8001c68 <HAL_I2C_Init+0x1b4>)
 8001bc2:	4298      	cmp	r0, r3
 8001bc4:	bf8c      	ite	hi
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	2301      	movls	r3, #1
 8001bca:	e799      	b.n	8001b00 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bcc:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001bd0:	fb05 f303 	mul.w	r3, r5, r3
 8001bd4:	4d25      	ldr	r5, [pc, #148]	@ (8001c6c <HAL_I2C_Init+0x1b8>)
 8001bd6:	fba5 5303 	umull	r5, r3, r5, r3
 8001bda:	099b      	lsrs	r3, r3, #6
 8001bdc:	3301      	adds	r3, #1
 8001bde:	e7a6      	b.n	8001b2e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001be0:	68a6      	ldr	r6, [r4, #8]
 8001be2:	b9be      	cbnz	r6, 8001c14 <HAL_I2C_Init+0x160>
 8001be4:	1e43      	subs	r3, r0, #1
 8001be6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001bea:	fbb3 f3fc 	udiv	r3, r3, ip
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	bb43      	cbnz	r3, 8001c4e <HAL_I2C_Init+0x19a>
 8001bfc:	b9c6      	cbnz	r6, 8001c30 <HAL_I2C_Init+0x17c>
 8001bfe:	1e43      	subs	r3, r0, #1
 8001c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c04:	fbb3 f3f5 	udiv	r3, r3, r5
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c12:	e7a3      	b.n	8001b5c <HAL_I2C_Init+0xa8>
 8001c14:	1e43      	subs	r3, r0, #1
 8001c16:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8001c1a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001c1e:	fbb3 f3fc 	udiv	r3, r3, ip
 8001c22:	3301      	adds	r3, #1
 8001c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c28:	fab3 f383 	clz	r3, r3
 8001c2c:	095b      	lsrs	r3, r3, #5
 8001c2e:	e7e4      	b.n	8001bfa <HAL_I2C_Init+0x146>
 8001c30:	1e43      	subs	r3, r0, #1
 8001c32:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001c36:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001c3a:	fbb3 f3f5 	udiv	r3, r3, r5
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c48:	e788      	b.n	8001b5c <HAL_I2C_Init+0xa8>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e786      	b.n	8001b5c <HAL_I2C_Init+0xa8>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e784      	b.n	8001b5c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
}
 8001c54:	4770      	bx	lr
    return HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
 8001c58:	e7ac      	b.n	8001bb4 <HAL_I2C_Init+0x100>
 8001c5a:	bf00      	nop
 8001c5c:	000186a0 	.word	0x000186a0
 8001c60:	001e847f 	.word	0x001e847f
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	003d08ff 	.word	0x003d08ff
 8001c6c:	10624dd3 	.word	0x10624dd3

08001c70 <HAL_I2C_Master_Transmit>:
{
 8001c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c74:	b085      	sub	sp, #20
 8001c76:	4604      	mov	r4, r0
 8001c78:	460f      	mov	r7, r1
 8001c7a:	4691      	mov	r9, r2
 8001c7c:	4698      	mov	r8, r3
 8001c7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7fe ffbc 	bl	8000bfc <HAL_GetTick>
 8001c84:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c86:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8001c8a:	b2c0      	uxtb	r0, r0
 8001c8c:	2820      	cmp	r0, #32
 8001c8e:	d004      	beq.n	8001c9a <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8001c90:	2702      	movs	r7, #2
}
 8001c92:	4638      	mov	r0, r7
 8001c94:	b005      	add	sp, #20
 8001c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c9a:	9500      	str	r5, [sp, #0]
 8001c9c:	2319      	movs	r3, #25
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	494f      	ldr	r1, [pc, #316]	@ (8001de0 <HAL_I2C_Master_Transmit+0x170>)
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7ff fd8d 	bl	80017c2 <I2C_WaitOnFlagUntilTimeout>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	f040 8092 	bne.w	8001dd2 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8001cae:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	f000 808f 	beq.w	8001dd6 <HAL_I2C_Master_Transmit+0x166>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	f012 0f01 	tst.w	r2, #1
 8001cc6:	d103      	bne.n	8001cd0 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd0:	6822      	ldr	r2, [r4, #0]
 8001cd2:	6813      	ldr	r3, [r2, #0]
 8001cd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001cd8:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cda:	2321      	movs	r3, #33	@ 0x21
 8001cdc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ce0:	2310      	movs	r3, #16
 8001ce2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001cea:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cee:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cf2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001cf4:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8001de4 <HAL_I2C_Master_Transmit+0x174>)
 8001cf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	4632      	mov	r2, r6
 8001cfe:	4639      	mov	r1, r7
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7ff fe1f 	bl	8001944 <I2C_MasterRequestWrite>
 8001d06:	4607      	mov	r7, r0
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d166      	bne.n	8001dda <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9303      	str	r3, [sp, #12]
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	9203      	str	r2, [sp, #12]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	9303      	str	r3, [sp, #12]
 8001d1a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001d1c:	e011      	b.n	8001d42 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d001      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8001d24:	2701      	movs	r7, #1
 8001d26:	e7b4      	b.n	8001c92 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d28:	6822      	ldr	r2, [r4, #0]
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e7f7      	b.n	8001d24 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d34:	462a      	mov	r2, r5
 8001d36:	4631      	mov	r1, r6
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7ff fe8c 	bl	8001a56 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d12e      	bne.n	8001da0 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8001d42:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d036      	beq.n	8001db6 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	462a      	mov	r2, r5
 8001d4a:	4631      	mov	r1, r6
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7ff fe53 	bl	80019f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d1e3      	bne.n	8001d1e <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d56:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d5e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001d60:	1c43      	adds	r3, r0, #1
 8001d62:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001d64:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8001d66:	b289      	uxth	r1, r1
 8001d68:	3901      	subs	r1, #1
 8001d6a:	b289      	uxth	r1, r1
 8001d6c:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d6e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d76:	6822      	ldr	r2, [r4, #0]
 8001d78:	6951      	ldr	r1, [r2, #20]
 8001d7a:	f011 0f04 	tst.w	r1, #4
 8001d7e:	d0d9      	beq.n	8001d34 <HAL_I2C_Master_Transmit+0xc4>
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0d7      	beq.n	8001d34 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d84:	7843      	ldrb	r3, [r0, #1]
 8001d86:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001d88:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8001d8e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d98:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	8523      	strh	r3, [r4, #40]	@ 0x28
 8001d9e:	e7c9      	b.n	8001d34 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8001da6:	2701      	movs	r7, #1
 8001da8:	e773      	b.n	8001c92 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	6813      	ldr	r3, [r2, #0]
 8001dae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e7f7      	b.n	8001da6 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db6:	6822      	ldr	r2, [r4, #0]
 8001db8:	6813      	ldr	r3, [r2, #0]
 8001dba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dbe:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8001dcc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8001dd0:	e75f      	b.n	8001c92 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8001dd2:	2702      	movs	r7, #2
 8001dd4:	e75d      	b.n	8001c92 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8001dd6:	2702      	movs	r7, #2
 8001dd8:	e75b      	b.n	8001c92 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8001dda:	2701      	movs	r7, #1
 8001ddc:	e759      	b.n	8001c92 <HAL_I2C_Master_Transmit+0x22>
 8001dde:	bf00      	nop
 8001de0:	00100002 	.word	0x00100002
 8001de4:	ffff0000 	.word	0xffff0000

08001de8 <HAL_I2C_IsDeviceReady>:
{
 8001de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dec:	b085      	sub	sp, #20
 8001dee:	4604      	mov	r4, r0
 8001df0:	4688      	mov	r8, r1
 8001df2:	4691      	mov	r9, r2
 8001df4:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8001df6:	f7fe ff01 	bl	8000bfc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfa:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d003      	beq.n	8001e0c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001e04:	2002      	movs	r0, #2
}
 8001e06:	b005      	add	sp, #20
 8001e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e0c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e0e:	9000      	str	r0, [sp, #0]
 8001e10:	2319      	movs	r3, #25
 8001e12:	2201      	movs	r2, #1
 8001e14:	4957      	ldr	r1, [pc, #348]	@ (8001f74 <HAL_I2C_IsDeviceReady+0x18c>)
 8001e16:	4620      	mov	r0, r4
 8001e18:	f7ff fcd3 	bl	80017c2 <I2C_WaitOnFlagUntilTimeout>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	f040 80a0 	bne.w	8001f62 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8001e22:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	f000 809d 	beq.w	8001f66 <HAL_I2C_IsDeviceReady+0x17e>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	f012 0f01 	tst.w	r2, #1
 8001e3a:	d103      	bne.n	8001e44 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e44:	6822      	ldr	r2, [r4, #0]
 8001e46:	6813      	ldr	r3, [r2, #0]
 8001e48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e4c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4e:	2324      	movs	r3, #36	@ 0x24
 8001e50:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e54:	2700      	movs	r7, #0
 8001e56:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e58:	4b47      	ldr	r3, [pc, #284]	@ (8001f78 <HAL_I2C_IsDeviceReady+0x190>)
 8001e5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001e5c:	e040      	b.n	8001ee0 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001e66:	d002      	beq.n	8001e6e <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e6c:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8001e6e:	2003      	movs	r0, #3
 8001e70:	e7c9      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e72:	23a0      	movs	r3, #160	@ 0xa0
 8001e74:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e78:	6822      	ldr	r2, [r4, #0]
 8001e7a:	6953      	ldr	r3, [r2, #20]
 8001e7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e80:	6952      	ldr	r2, [r2, #20]
 8001e82:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e86:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8001e8a:	fa5f fc8c 	uxtb.w	ip, ip
 8001e8e:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8001e92:	d009      	beq.n	8001ea8 <HAL_I2C_IsDeviceReady+0xc0>
 8001e94:	b943      	cbnz	r3, 8001ea8 <HAL_I2C_IsDeviceReady+0xc0>
 8001e96:	b93a      	cbnz	r2, 8001ea8 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e98:	f7fe feb0 	bl	8000bfc <HAL_GetTick>
 8001e9c:	1b80      	subs	r0, r0, r6
 8001e9e:	42a8      	cmp	r0, r5
 8001ea0:	d8e7      	bhi.n	8001e72 <HAL_I2C_IsDeviceReady+0x8a>
 8001ea2:	2d00      	cmp	r5, #0
 8001ea4:	d1e8      	bne.n	8001e78 <HAL_I2C_IsDeviceReady+0x90>
 8001ea6:	e7e4      	b.n	8001e72 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	2320      	movs	r3, #32
 8001eaa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	f012 0f02 	tst.w	r2, #2
 8001eb6:	d131      	bne.n	8001f1c <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ebe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ec6:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec8:	9600      	str	r6, [sp, #0]
 8001eca:	2319      	movs	r3, #25
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4929      	ldr	r1, [pc, #164]	@ (8001f74 <HAL_I2C_IsDeviceReady+0x18c>)
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff fc76 	bl	80017c2 <I2C_WaitOnFlagUntilTimeout>
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	d149      	bne.n	8001f6e <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8001eda:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8001edc:	454f      	cmp	r7, r9
 8001ede:	d238      	bcs.n	8001f52 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ee0:	6822      	ldr	r2, [r4, #0]
 8001ee2:	6813      	ldr	r3, [r2, #0]
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee8:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001eea:	9600      	str	r6, [sp, #0]
 8001eec:	462b      	mov	r3, r5
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff fc64 	bl	80017c2 <I2C_WaitOnFlagUntilTimeout>
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d1af      	bne.n	8001e5e <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8001f04:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001f06:	f7fe fe79 	bl	8000bfc <HAL_GetTick>
 8001f0a:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f0c:	6822      	ldr	r2, [r4, #0]
 8001f0e:	6953      	ldr	r3, [r2, #20]
 8001f10:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f14:	6952      	ldr	r2, [r2, #20]
 8001f16:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f1a:	e7b4      	b.n	8001e86 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f22:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f24:	2300      	movs	r3, #0
 8001f26:	9303      	str	r3, [sp, #12]
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	9203      	str	r2, [sp, #12]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	9303      	str	r3, [sp, #12]
 8001f32:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f34:	9600      	str	r6, [sp, #0]
 8001f36:	2319      	movs	r3, #25
 8001f38:	2201      	movs	r2, #1
 8001f3a:	490e      	ldr	r1, [pc, #56]	@ (8001f74 <HAL_I2C_IsDeviceReady+0x18c>)
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff fc40 	bl	80017c2 <I2C_WaitOnFlagUntilTimeout>
 8001f42:	b990      	cbnz	r0, 8001f6a <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8001f44:	2320      	movs	r3, #32
 8001f46:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8001f50:	e759      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	2320      	movs	r3, #32
 8001f54:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8001f5e:	2001      	movs	r0, #1
 8001f60:	e751      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8001f62:	2002      	movs	r0, #2
 8001f64:	e74f      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8001f66:	2002      	movs	r0, #2
 8001f68:	e74d      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	e74b      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8001f6e:	2001      	movs	r0, #1
 8001f70:	e749      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x1e>
 8001f72:	bf00      	nop
 8001f74:	00100002 	.word	0x00100002
 8001f78:	ffff0000 	.word	0xffff0000

08001f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb8 <HAL_MspInit+0x3c>)
 8001f80:	699a      	ldr	r2, [r3, #24]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	619a      	str	r2, [r3, #24]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	f002 0201 	and.w	r2, r2, #1
 8001f8e:	9200      	str	r2, [sp, #0]
 8001f90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	69da      	ldr	r2, [r3, #28]
 8001f94:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f98:	61da      	str	r2, [r3, #28]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fa4:	4a05      	ldr	r2, [pc, #20]	@ (8001fbc <HAL_MspInit+0x40>)
 8001fa6:	6853      	ldr	r3, [r2, #4]
 8001fa8:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001fac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	b002      	add	sp, #8
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40010000 	.word	0x40010000

08001fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	9303      	str	r3, [sp, #12]
 8001fca:	9304      	str	r3, [sp, #16]
 8001fcc:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8001fce:	6802      	ldr	r2, [r0, #0]
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <HAL_ADC_MspInit+0x8c>)
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d001      	beq.n	8001fda <HAL_ADC_MspInit+0x1a>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fd6:	b006      	add	sp, #24
 8001fd8:	bd10      	pop	{r4, pc}
 8001fda:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fdc:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fe6:	619a      	str	r2, [r3, #24]
 8001fe8:	699a      	ldr	r2, [r3, #24]
 8001fea:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001fee:	9200      	str	r2, [sp, #0]
 8001ff0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	f042 0204 	orr.w	r2, r2, #4
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002004:	2301      	movs	r3, #1
 8002006:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002008:	2303      	movs	r3, #3
 800200a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	a902      	add	r1, sp, #8
 800200e:	4810      	ldr	r0, [pc, #64]	@ (8002050 <HAL_ADC_MspInit+0x90>)
 8002010:	f7ff fa8c 	bl	800152c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8002014:	480f      	ldr	r0, [pc, #60]	@ (8002054 <HAL_ADC_MspInit+0x94>)
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <HAL_ADC_MspInit+0x98>)
 8002018:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800201a:	2300      	movs	r3, #0
 800201c:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800201e:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002020:	2280      	movs	r2, #128	@ 0x80
 8002022:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002028:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800202a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800202e:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002030:	2220      	movs	r2, #32
 8002032:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002034:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002036:	f7ff f967 	bl	8001308 <HAL_DMA_Init>
 800203a:	b918      	cbnz	r0, 8002044 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_ADC_MspInit+0x94>)
 800203e:	6223      	str	r3, [r4, #32]
 8002040:	625c      	str	r4, [r3, #36]	@ 0x24
}
 8002042:	e7c8      	b.n	8001fd6 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 8002044:	f7fe f9f2 	bl	800042c <Error_Handler>
 8002048:	e7f8      	b.n	800203c <HAL_ADC_MspInit+0x7c>
 800204a:	bf00      	nop
 800204c:	40012400 	.word	0x40012400
 8002050:	40010800 	.word	0x40010800
 8002054:	20000180 	.word	0x20000180
 8002058:	40020008 	.word	0x40020008

0800205c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800205c:	b510      	push	{r4, lr}
 800205e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	2300      	movs	r3, #0
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	9303      	str	r3, [sp, #12]
 8002066:	9304      	str	r3, [sp, #16]
 8002068:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 800206a:	6802      	ldr	r2, [r0, #0]
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_I2C_MspInit+0x58>)
 800206e:	429a      	cmp	r2, r3
 8002070:	d001      	beq.n	8002076 <HAL_I2C_MspInit+0x1a>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002072:	b006      	add	sp, #24
 8002074:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	4c10      	ldr	r4, [pc, #64]	@ (80020b8 <HAL_I2C_MspInit+0x5c>)
 8002078:	69a3      	ldr	r3, [r4, #24]
 800207a:	f043 0308 	orr.w	r3, r3, #8
 800207e:	61a3      	str	r3, [r4, #24]
 8002080:	69a3      	ldr	r3, [r4, #24]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800208a:	23c0      	movs	r3, #192	@ 0xc0
 800208c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800208e:	2312      	movs	r3, #18
 8002090:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	a902      	add	r1, sp, #8
 8002098:	4808      	ldr	r0, [pc, #32]	@ (80020bc <HAL_I2C_MspInit+0x60>)
 800209a:	f7ff fa47 	bl	800152c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800209e:	69e3      	ldr	r3, [r4, #28]
 80020a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020a4:	61e3      	str	r3, [r4, #28]
 80020a6:	69e3      	ldr	r3, [r4, #28]
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	9b01      	ldr	r3, [sp, #4]
}
 80020b0:	e7df      	b.n	8002072 <HAL_I2C_MspInit+0x16>
 80020b2:	bf00      	nop
 80020b4:	40005400 	.word	0x40005400
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010c00 	.word	0x40010c00

080020c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c0:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80020c2:	6803      	ldr	r3, [r0, #0]
 80020c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002104 <HAL_TIM_Base_MspInit+0x44>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d004      	beq.n	80020d4 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80020ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ce:	d00c      	beq.n	80020ea <HAL_TIM_Base_MspInit+0x2a>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020d0:	b002      	add	sp, #8
 80020d2:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <HAL_TIM_Base_MspInit+0x48>)
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020dc:	619a      	str	r2, [r3, #24]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	9b00      	ldr	r3, [sp, #0]
 80020e8:	e7f2      	b.n	80020d0 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ea:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	61da      	str	r2, [r3, #28]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	9b01      	ldr	r3, [sp, #4]
}
 8002100:	e7e6      	b.n	80020d0 <HAL_TIM_Base_MspInit+0x10>
 8002102:	bf00      	nop
 8002104:	40012c00 	.word	0x40012c00
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800210c:	b500      	push	{lr}
 800210e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	2300      	movs	r3, #0
 8002112:	9302      	str	r3, [sp, #8]
 8002114:	9303      	str	r3, [sp, #12]
 8002116:	9304      	str	r3, [sp, #16]
 8002118:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 800211a:	6802      	ldr	r2, [r0, #0]
 800211c:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <HAL_TIM_MspPostInit+0x48>)
 800211e:	429a      	cmp	r2, r3
 8002120:	d002      	beq.n	8002128 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002122:	b007      	add	sp, #28
 8002124:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	f042 0204 	orr.w	r2, r2, #4
 8002132:	619a      	str	r2, [r3, #24]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800213e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002142:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214a:	a902      	add	r1, sp, #8
 800214c:	4802      	ldr	r0, [pc, #8]	@ (8002158 <HAL_TIM_MspPostInit+0x4c>)
 800214e:	f7ff f9ed 	bl	800152c <HAL_GPIO_Init>
}
 8002152:	e7e6      	b.n	8002122 <HAL_TIM_MspPostInit+0x16>
 8002154:	40012c00 	.word	0x40012c00
 8002158:	40010800 	.word	0x40010800

0800215c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800215c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800215e:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <RCC_Delay+0x24>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a08      	ldr	r2, [pc, #32]	@ (8002184 <RCC_Delay+0x28>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	0a5b      	lsrs	r3, r3, #9
 800216a:	fb00 f303 	mul.w	r3, r0, r3
 800216e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002170:	bf00      	nop
  }
  while (Delay --);
 8002172:	9b01      	ldr	r3, [sp, #4]
 8002174:	1e5a      	subs	r2, r3, #1
 8002176:	9201      	str	r2, [sp, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f9      	bne.n	8002170 <RCC_Delay+0x14>
}
 800217c:	b002      	add	sp, #8
 800217e:	4770      	bx	lr
 8002180:	20000010 	.word	0x20000010
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002188:	2800      	cmp	r0, #0
 800218a:	f000 81f1 	beq.w	8002570 <HAL_RCC_OscConfig+0x3e8>
{
 800218e:	b570      	push	{r4, r5, r6, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002194:	6803      	ldr	r3, [r0, #0]
 8002196:	f013 0f01 	tst.w	r3, #1
 800219a:	d02c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800219c:	4b99      	ldr	r3, [pc, #612]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d01d      	beq.n	80021e4 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021a8:	4b96      	ldr	r3, [pc, #600]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d012      	beq.n	80021da <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ba:	d041      	beq.n	8002240 <HAL_RCC_OscConfig+0xb8>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d155      	bne.n	800226c <HAL_RCC_OscConfig+0xe4>
 80021c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021c4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e037      	b.n	800224a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021da:	4b8a      	ldr	r3, [pc, #552]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80021e2:	d0e7      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	4b87      	ldr	r3, [pc, #540]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_OscConfig+0x6e>
 80021ee:	6863      	ldr	r3, [r4, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 81bf 	beq.w	8002574 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	f013 0f02 	tst.w	r3, #2
 80021fc:	d075      	beq.n	80022ea <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fe:	4b81      	ldr	r3, [pc, #516]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f013 0f0c 	tst.w	r3, #12
 8002206:	d05f      	beq.n	80022c8 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002208:	4b7e      	ldr	r3, [pc, #504]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d054      	beq.n	80022be <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002214:	6923      	ldr	r3, [r4, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 808a 	beq.w	8002330 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b7a      	ldr	r3, [pc, #488]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002222:	f7fe fceb 	bl	8000bfc <HAL_GetTick>
 8002226:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	4b76      	ldr	r3, [pc, #472]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f013 0f02 	tst.w	r3, #2
 8002230:	d175      	bne.n	800231e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002232:	f7fe fce3 	bl	8000bfc <HAL_GetTick>
 8002236:	1b40      	subs	r0, r0, r5
 8002238:	2802      	cmp	r0, #2
 800223a:	d9f5      	bls.n	8002228 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 800223c:	2003      	movs	r0, #3
 800223e:	e19e      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002240:	4a70      	ldr	r2, [pc, #448]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 8002242:	6813      	ldr	r3, [r2, #0]
 8002244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002248:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	b343      	cbz	r3, 80022a0 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800224e:	f7fe fcd5 	bl	8000bfc <HAL_GetTick>
 8002252:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002254:	4b6b      	ldr	r3, [pc, #428]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800225c:	d1cb      	bne.n	80021f6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225e:	f7fe fccd 	bl	8000bfc <HAL_GetTick>
 8002262:	1b40      	subs	r0, r0, r5
 8002264:	2864      	cmp	r0, #100	@ 0x64
 8002266:	d9f5      	bls.n	8002254 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002268:	2003      	movs	r0, #3
 800226a:	e188      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002270:	d009      	beq.n	8002286 <HAL_RCC_OscConfig+0xfe>
 8002272:	4b64      	ldr	r3, [pc, #400]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e7e1      	b.n	800224a <HAL_RCC_OscConfig+0xc2>
 8002286:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800228a:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e7d4      	b.n	800224a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80022a0:	f7fe fcac 	bl	8000bfc <HAL_GetTick>
 80022a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	4b57      	ldr	r3, [pc, #348]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80022ae:	d0a2      	beq.n	80021f6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe fca4 	bl	8000bfc <HAL_GetTick>
 80022b4:	1b40      	subs	r0, r0, r5
 80022b6:	2864      	cmp	r0, #100	@ 0x64
 80022b8:	d9f5      	bls.n	80022a6 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80022ba:	2003      	movs	r0, #3
 80022bc:	e15f      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022be:	4b51      	ldr	r3, [pc, #324]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80022c6:	d1a5      	bne.n	8002214 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c8:	4b4e      	ldr	r3, [pc, #312]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f013 0f02 	tst.w	r3, #2
 80022d0:	d003      	beq.n	80022da <HAL_RCC_OscConfig+0x152>
 80022d2:	6923      	ldr	r3, [r4, #16]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f040 814f 	bne.w	8002578 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4a4a      	ldr	r2, [pc, #296]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80022e2:	6961      	ldr	r1, [r4, #20]
 80022e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022e8:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	f013 0f08 	tst.w	r3, #8
 80022f0:	d033      	beq.n	800235a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f2:	69a3      	ldr	r3, [r4, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d05c      	beq.n	80023b2 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80022f8:	4b43      	ldr	r3, [pc, #268]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002300:	f7fe fc7c 	bl	8000bfc <HAL_GetTick>
 8002304:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b3f      	ldr	r3, [pc, #252]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	f013 0f02 	tst.w	r3, #2
 800230e:	d121      	bne.n	8002354 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7fe fc74 	bl	8000bfc <HAL_GetTick>
 8002314:	1b40      	subs	r0, r0, r5
 8002316:	2802      	cmp	r0, #2
 8002318:	d9f5      	bls.n	8002306 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800231a:	2003      	movs	r0, #3
 800231c:	e12f      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4a39      	ldr	r2, [pc, #228]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 8002320:	6813      	ldr	r3, [r2, #0]
 8002322:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002326:	6961      	ldr	r1, [r4, #20]
 8002328:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e7dc      	b.n	80022ea <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002330:	4b35      	ldr	r3, [pc, #212]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002336:	f7fe fc61 	bl	8000bfc <HAL_GetTick>
 800233a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233c:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f013 0f02 	tst.w	r3, #2
 8002344:	d0d1      	beq.n	80022ea <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002346:	f7fe fc59 	bl	8000bfc <HAL_GetTick>
 800234a:	1b40      	subs	r0, r0, r5
 800234c:	2802      	cmp	r0, #2
 800234e:	d9f5      	bls.n	800233c <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002350:	2003      	movs	r0, #3
 8002352:	e114      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002354:	2001      	movs	r0, #1
 8002356:	f7ff ff01 	bl	800215c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	f013 0f04 	tst.w	r3, #4
 8002360:	f000 8096 	beq.w	8002490 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002364:	4b27      	ldr	r3, [pc, #156]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800236c:	d134      	bne.n	80023d8 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b25      	ldr	r3, [pc, #148]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002376:	61da      	str	r2, [r3, #28]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002382:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	4b21      	ldr	r3, [pc, #132]	@ (800240c <HAL_RCC_OscConfig+0x284>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800238c:	d026      	beq.n	80023dc <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238e:	68e3      	ldr	r3, [r4, #12]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d03d      	beq.n	8002410 <HAL_RCC_OscConfig+0x288>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d153      	bne.n	8002440 <HAL_RCC_OscConfig+0x2b8>
 8002398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800239c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80023a0:	6a1a      	ldr	r2, [r3, #32]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	621a      	str	r2, [r3, #32]
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	f022 0204 	bic.w	r2, r2, #4
 80023ae:	621a      	str	r2, [r3, #32]
 80023b0:	e033      	b.n	800241a <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <HAL_RCC_OscConfig+0x280>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80023ba:	f7fe fc1f 	bl	8000bfc <HAL_GetTick>
 80023be:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_RCC_OscConfig+0x27c>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	f013 0f02 	tst.w	r3, #2
 80023c8:	d0c7      	beq.n	800235a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ca:	f7fe fc17 	bl	8000bfc <HAL_GetTick>
 80023ce:	1b40      	subs	r0, r0, r5
 80023d0:	2802      	cmp	r0, #2
 80023d2:	d9f5      	bls.n	80023c0 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80023d4:	2003      	movs	r0, #3
 80023d6:	e0d2      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80023d8:	2500      	movs	r5, #0
 80023da:	e7d3      	b.n	8002384 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023dc:	4a0b      	ldr	r2, [pc, #44]	@ (800240c <HAL_RCC_OscConfig+0x284>)
 80023de:	6813      	ldr	r3, [r2, #0]
 80023e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80023e6:	f7fe fc09 	bl	8000bfc <HAL_GetTick>
 80023ea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b07      	ldr	r3, [pc, #28]	@ (800240c <HAL_RCC_OscConfig+0x284>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80023f4:	d1cb      	bne.n	800238e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7fe fc01 	bl	8000bfc <HAL_GetTick>
 80023fa:	1b80      	subs	r0, r0, r6
 80023fc:	2864      	cmp	r0, #100	@ 0x64
 80023fe:	d9f5      	bls.n	80023ec <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8002400:	2003      	movs	r0, #3
 8002402:	e0bc      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
 8002404:	40021000 	.word	0x40021000
 8002408:	42420000 	.word	0x42420000
 800240c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	4a5f      	ldr	r2, [pc, #380]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 8002412:	6a13      	ldr	r3, [r2, #32]
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241a:	68e3      	ldr	r3, [r4, #12]
 800241c:	b333      	cbz	r3, 800246c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800241e:	f7fe fbed 	bl	8000bfc <HAL_GetTick>
 8002422:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	4b5a      	ldr	r3, [pc, #360]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f013 0f02 	tst.w	r3, #2
 800242c:	d12f      	bne.n	800248e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fbe5 	bl	8000bfc <HAL_GetTick>
 8002432:	1b80      	subs	r0, r0, r6
 8002434:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002438:	4298      	cmp	r0, r3
 800243a:	d9f3      	bls.n	8002424 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 800243c:	2003      	movs	r0, #3
 800243e:	e09e      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	2b05      	cmp	r3, #5
 8002442:	d009      	beq.n	8002458 <HAL_RCC_OscConfig+0x2d0>
 8002444:	4b52      	ldr	r3, [pc, #328]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	621a      	str	r2, [r3, #32]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	f022 0204 	bic.w	r2, r2, #4
 8002454:	621a      	str	r2, [r3, #32]
 8002456:	e7e0      	b.n	800241a <HAL_RCC_OscConfig+0x292>
 8002458:	4b4d      	ldr	r3, [pc, #308]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	f042 0204 	orr.w	r2, r2, #4
 8002460:	621a      	str	r2, [r3, #32]
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	621a      	str	r2, [r3, #32]
 800246a:	e7d6      	b.n	800241a <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 800246c:	f7fe fbc6 	bl	8000bfc <HAL_GetTick>
 8002470:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002472:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f013 0f02 	tst.w	r3, #2
 800247a:	d008      	beq.n	800248e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247c:	f7fe fbbe 	bl	8000bfc <HAL_GetTick>
 8002480:	1b80      	subs	r0, r0, r6
 8002482:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002486:	4298      	cmp	r0, r3
 8002488:	d9f3      	bls.n	8002472 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800248a:	2003      	movs	r0, #3
 800248c:	e077      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800248e:	b9e5      	cbnz	r5, 80024ca <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002490:	69e3      	ldr	r3, [r4, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d072      	beq.n	800257c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002496:	4a3e      	ldr	r2, [pc, #248]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 8002498:	6852      	ldr	r2, [r2, #4]
 800249a:	f002 020c 	and.w	r2, r2, #12
 800249e:	2a08      	cmp	r2, #8
 80024a0:	d056      	beq.n	8002550 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d017      	beq.n	80024d6 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <HAL_RCC_OscConfig+0x40c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80024ac:	f7fe fba6 	bl	8000bfc <HAL_GetTick>
 80024b0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	4b37      	ldr	r3, [pc, #220]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80024ba:	d047      	beq.n	800254c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe fb9e 	bl	8000bfc <HAL_GetTick>
 80024c0:	1b00      	subs	r0, r0, r4
 80024c2:	2802      	cmp	r0, #2
 80024c4:	d9f5      	bls.n	80024b2 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80024c6:	2003      	movs	r0, #3
 80024c8:	e059      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4a31      	ldr	r2, [pc, #196]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 80024cc:	69d3      	ldr	r3, [r2, #28]
 80024ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	61d3      	str	r3, [r2, #28]
 80024d4:	e7dc      	b.n	8002490 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002594 <HAL_RCC_OscConfig+0x40c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80024dc:	f7fe fb8e 	bl	8000bfc <HAL_GetTick>
 80024e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80024ea:	d006      	beq.n	80024fa <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ec:	f7fe fb86 	bl	8000bfc <HAL_GetTick>
 80024f0:	1b40      	subs	r0, r0, r5
 80024f2:	2802      	cmp	r0, #2
 80024f4:	d9f5      	bls.n	80024e2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80024f6:	2003      	movs	r0, #3
 80024f8:	e041      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024fa:	6a23      	ldr	r3, [r4, #32]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002500:	d01a      	beq.n	8002538 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002502:	4923      	ldr	r1, [pc, #140]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 8002504:	684b      	ldr	r3, [r1, #4]
 8002506:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 800250a:	6a22      	ldr	r2, [r4, #32]
 800250c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800250e:	4302      	orrs	r2, r0
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <HAL_RCC_OscConfig+0x40c>)
 8002516:	2201      	movs	r2, #1
 8002518:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800251a:	f7fe fb6f 	bl	8000bfc <HAL_GetTick>
 800251e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002520:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002528:	d10e      	bne.n	8002548 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fb67 	bl	8000bfc <HAL_GetTick>
 800252e:	1b00      	subs	r0, r0, r4
 8002530:	2802      	cmp	r0, #2
 8002532:	d9f5      	bls.n	8002520 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002534:	2003      	movs	r0, #3
 8002536:	e022      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002538:	4a15      	ldr	r2, [pc, #84]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 800253a:	6853      	ldr	r3, [r2, #4]
 800253c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002540:	68a1      	ldr	r1, [r4, #8]
 8002542:	430b      	orrs	r3, r1
 8002544:	6053      	str	r3, [r2, #4]
 8002546:	e7dc      	b.n	8002502 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002548:	2000      	movs	r0, #0
 800254a:	e018      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
 800254c:	2000      	movs	r0, #0
 800254e:	e016      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002550:	2b01      	cmp	r3, #1
 8002552:	d016      	beq.n	8002582 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002554:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <HAL_RCC_OscConfig+0x408>)
 8002556:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002558:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 800255c:	6a22      	ldr	r2, [r4, #32]
 800255e:	4291      	cmp	r1, r2
 8002560:	d111      	bne.n	8002586 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002562:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002566:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002568:	4293      	cmp	r3, r2
 800256a:	d10e      	bne.n	800258a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 800256c:	2000      	movs	r0, #0
 800256e:	e006      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002570:	2001      	movs	r0, #1
}
 8002572:	4770      	bx	lr
        return HAL_ERROR;
 8002574:	2001      	movs	r0, #1
 8002576:	e002      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002578:	2001      	movs	r0, #1
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 800257c:	2000      	movs	r0, #0
}
 800257e:	b002      	add	sp, #8
 8002580:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002582:	2001      	movs	r0, #1
 8002584:	e7fb      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002586:	2001      	movs	r0, #1
 8002588:	e7f9      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
 800258a:	2001      	movs	r0, #1
 800258c:	e7f7      	b.n	800257e <HAL_RCC_OscConfig+0x3f6>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	42420000 	.word	0x42420000

08002598 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002598:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x40>)
 800259a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800259c:	f003 020c 	and.w	r2, r3, #12
 80025a0:	2a08      	cmp	r2, #8
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80025a4:	480d      	ldr	r0, [pc, #52]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x44>)
}
 80025a6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025a8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80025ac:	490c      	ldr	r1, [pc, #48]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x48>)
 80025ae:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025b0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x40>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80025be:	4a09      	ldr	r2, [pc, #36]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x4c>)
 80025c0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025c2:	4a06      	ldr	r2, [pc, #24]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x44>)
 80025c4:	fb02 f000 	mul.w	r0, r2, r0
 80025c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80025cc:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x50>)
 80025d0:	fb03 f000 	mul.w	r0, r3, r0
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	007a1200 	.word	0x007a1200
 80025e0:	080046fc 	.word	0x080046fc
 80025e4:	080046f8 	.word	0x080046f8
 80025e8:	003d0900 	.word	0x003d0900

080025ec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80025ec:	2800      	cmp	r0, #0
 80025ee:	f000 80a0 	beq.w	8002732 <HAL_RCC_ClockConfig+0x146>
{
 80025f2:	b570      	push	{r4, r5, r6, lr}
 80025f4:	460d      	mov	r5, r1
 80025f6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f8:	4b52      	ldr	r3, [pc, #328]	@ (8002744 <HAL_RCC_ClockConfig+0x158>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	428b      	cmp	r3, r1
 8002602:	d20b      	bcs.n	800261c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002604:	4a4f      	ldr	r2, [pc, #316]	@ (8002744 <HAL_RCC_ClockConfig+0x158>)
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	f023 0307 	bic.w	r3, r3, #7
 800260c:	430b      	orrs	r3, r1
 800260e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002610:	6813      	ldr	r3, [r2, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	428b      	cmp	r3, r1
 8002618:	f040 808d 	bne.w	8002736 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	f013 0f02 	tst.w	r3, #2
 8002622:	d017      	beq.n	8002654 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002624:	f013 0f04 	tst.w	r3, #4
 8002628:	d004      	beq.n	8002634 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262a:	4a47      	ldr	r2, [pc, #284]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 800262c:	6853      	ldr	r3, [r2, #4]
 800262e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002632:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	f013 0f08 	tst.w	r3, #8
 800263a:	d004      	beq.n	8002646 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800263c:	4a42      	ldr	r2, [pc, #264]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 800263e:	6853      	ldr	r3, [r2, #4]
 8002640:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002644:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002646:	4a40      	ldr	r2, [pc, #256]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 8002648:	6853      	ldr	r3, [r2, #4]
 800264a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800264e:	68a1      	ldr	r1, [r4, #8]
 8002650:	430b      	orrs	r3, r1
 8002652:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f013 0f01 	tst.w	r3, #1
 800265a:	d031      	beq.n	80026c0 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265c:	6863      	ldr	r3, [r4, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d020      	beq.n	80026a4 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002662:	2b02      	cmp	r3, #2
 8002664:	d025      	beq.n	80026b2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	4a38      	ldr	r2, [pc, #224]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	f012 0f02 	tst.w	r2, #2
 800266e:	d064      	beq.n	800273a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002670:	4935      	ldr	r1, [pc, #212]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 8002672:	684a      	ldr	r2, [r1, #4]
 8002674:	f022 0203 	bic.w	r2, r2, #3
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800267c:	f7fe fabe 	bl	8000bfc <HAL_GetTick>
 8002680:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b31      	ldr	r3, [pc, #196]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	6862      	ldr	r2, [r4, #4]
 800268c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002690:	d016      	beq.n	80026c0 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002692:	f7fe fab3 	bl	8000bfc <HAL_GetTick>
 8002696:	1b80      	subs	r0, r0, r6
 8002698:	f241 3388 	movw	r3, #5000	@ 0x1388
 800269c:	4298      	cmp	r0, r3
 800269e:	d9f0      	bls.n	8002682 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80026a0:	2003      	movs	r0, #3
 80026a2:	e045      	b.n	8002730 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a4:	4a28      	ldr	r2, [pc, #160]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80026ac:	d1e0      	bne.n	8002670 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80026ae:	2001      	movs	r0, #1
 80026b0:	e03e      	b.n	8002730 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b2:	4a25      	ldr	r2, [pc, #148]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80026ba:	d1d9      	bne.n	8002670 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80026bc:	2001      	movs	r0, #1
 80026be:	e037      	b.n	8002730 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c0:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <HAL_RCC_ClockConfig+0x158>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	42ab      	cmp	r3, r5
 80026ca:	d90a      	bls.n	80026e2 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <HAL_RCC_ClockConfig+0x158>)
 80026ce:	6813      	ldr	r3, [r2, #0]
 80026d0:	f023 0307 	bic.w	r3, r3, #7
 80026d4:	432b      	orrs	r3, r5
 80026d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d8:	6813      	ldr	r3, [r2, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	42ab      	cmp	r3, r5
 80026e0:	d12d      	bne.n	800273e <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	f013 0f04 	tst.w	r3, #4
 80026e8:	d006      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 80026ec:	6853      	ldr	r3, [r2, #4]
 80026ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026f2:	68e1      	ldr	r1, [r4, #12]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	f013 0f08 	tst.w	r3, #8
 80026fe:	d007      	beq.n	8002710 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002700:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 8002702:	6853      	ldr	r3, [r2, #4]
 8002704:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002708:	6921      	ldr	r1, [r4, #16]
 800270a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800270e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002710:	f7ff ff42 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002714:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <HAL_RCC_ClockConfig+0x15c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800271c:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <HAL_RCC_ClockConfig+0x160>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	40d8      	lsrs	r0, r3
 8002722:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_RCC_ClockConfig+0x164>)
 8002724:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002726:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <HAL_RCC_ClockConfig+0x168>)
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	f7fe fa23 	bl	8000b74 <HAL_InitTick>
  return HAL_OK;
 800272e:	2000      	movs	r0, #0
}
 8002730:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002732:	2001      	movs	r0, #1
}
 8002734:	4770      	bx	lr
    return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
 8002738:	e7fa      	b.n	8002730 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800273a:	2001      	movs	r0, #1
 800273c:	e7f8      	b.n	8002730 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800273e:	2001      	movs	r0, #1
 8002740:	e7f6      	b.n	8002730 <HAL_RCC_ClockConfig+0x144>
 8002742:	bf00      	nop
 8002744:	40022000 	.word	0x40022000
 8002748:	40021000 	.word	0x40021000
 800274c:	08004714 	.word	0x08004714
 8002750:	20000010 	.word	0x20000010
 8002754:	2000000c 	.word	0x2000000c

08002758 <HAL_RCC_GetHCLKFreq>:
}
 8002758:	4b01      	ldr	r3, [pc, #4]	@ (8002760 <HAL_RCC_GetHCLKFreq+0x8>)
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20000010 	.word	0x20000010

08002764 <HAL_RCC_GetPCLK1Freq>:
{
 8002764:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002766:	f7ff fff7 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 800276a:	4b04      	ldr	r3, [pc, #16]	@ (800277c <HAL_RCC_GetPCLK1Freq+0x18>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002772:	4a03      	ldr	r2, [pc, #12]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002774:	5cd3      	ldrb	r3, [r2, r3]
}
 8002776:	40d8      	lsrs	r0, r3
 8002778:	bd08      	pop	{r3, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	0800470c 	.word	0x0800470c

08002784 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800278a:	6803      	ldr	r3, [r0, #0]
 800278c:	f013 0f01 	tst.w	r3, #1
 8002790:	d036      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002792:	4b3f      	ldr	r3, [pc, #252]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800279a:	d149      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279c:	4b3c      	ldr	r3, [pc, #240]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80027a4:	61da      	str	r2, [r3, #28]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80027b0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b38      	ldr	r3, [pc, #224]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80027ba:	d03b      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027bc:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027c0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80027c4:	d013      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80027c6:	6862      	ldr	r2, [r4, #4]
 80027c8:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d00e      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80027d2:	6a13      	ldr	r3, [r2, #32]
 80027d4:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027d8:	492f      	ldr	r1, [pc, #188]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80027da:	2601      	movs	r6, #1
 80027dc:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e0:	2600      	movs	r6, #0
 80027e2:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027e6:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027e8:	f013 0f01 	tst.w	r3, #1
 80027ec:	d136      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ee:	4a28      	ldr	r2, [pc, #160]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80027f0:	6a13      	ldr	r3, [r2, #32]
 80027f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027f6:	6861      	ldr	r1, [r4, #4]
 80027f8:	430b      	orrs	r3, r1
 80027fa:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027fc:	2d00      	cmp	r5, #0
 80027fe:	d13e      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	f013 0f02 	tst.w	r3, #2
 8002806:	d006      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002808:	4a21      	ldr	r2, [pc, #132]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800280a:	6853      	ldr	r3, [r2, #4]
 800280c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002810:	68a1      	ldr	r1, [r4, #8]
 8002812:	430b      	orrs	r3, r1
 8002814:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	f013 0f10 	tst.w	r3, #16
 800281c:	d034      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800281e:	4a1c      	ldr	r2, [pc, #112]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002820:	6853      	ldr	r3, [r2, #4]
 8002822:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002826:	68e1      	ldr	r1, [r4, #12]
 8002828:	430b      	orrs	r3, r1
 800282a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800282c:	2000      	movs	r0, #0
 800282e:	e02c      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8002830:	2500      	movs	r5, #0
 8002832:	e7be      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002834:	4a17      	ldr	r2, [pc, #92]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002836:	6813      	ldr	r3, [r2, #0]
 8002838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800283c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800283e:	f7fe f9dd 	bl	8000bfc <HAL_GetTick>
 8002842:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800284c:	d1b6      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7fe f9d5 	bl	8000bfc <HAL_GetTick>
 8002852:	1b80      	subs	r0, r0, r6
 8002854:	2864      	cmp	r0, #100	@ 0x64
 8002856:	d9f5      	bls.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8002858:	2003      	movs	r0, #3
 800285a:	e016      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 800285c:	f7fe f9ce 	bl	8000bfc <HAL_GetTick>
 8002860:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f013 0f02 	tst.w	r3, #2
 800286a:	d1c0      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286c:	f7fe f9c6 	bl	8000bfc <HAL_GetTick>
 8002870:	1b80      	subs	r0, r0, r6
 8002872:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002876:	4298      	cmp	r0, r3
 8002878:	d9f3      	bls.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 800287a:	2003      	movs	r0, #3
 800287c:	e005      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	69d3      	ldr	r3, [r2, #28]
 8002880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002884:	61d3      	str	r3, [r2, #28]
 8002886:	e7bb      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8002888:	2000      	movs	r0, #0
}
 800288a:	b002      	add	sp, #8
 800288c:	bd70      	pop	{r4, r5, r6, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
 8002898:	42420000 	.word	0x42420000

0800289c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800289e:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a0:	6a03      	ldr	r3, [r0, #32]
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028aa:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028ac:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b0:	680c      	ldr	r4, [r1, #0]
 80028b2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028b4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028b8:	688b      	ldr	r3, [r1, #8]
 80028ba:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028bc:	4a0b      	ldr	r2, [pc, #44]	@ (80028ec <TIM_OC1_SetConfig+0x50>)
 80028be:	4290      	cmp	r0, r2
 80028c0:	d006      	beq.n	80028d0 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028c2:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c4:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028c6:	684a      	ldr	r2, [r1, #4]
 80028c8:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ca:	6203      	str	r3, [r0, #32]
}
 80028cc:	bc30      	pop	{r4, r5}
 80028ce:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80028d0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80028d4:	68ca      	ldr	r2, [r1, #12]
 80028d6:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80028d8:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028dc:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80028e0:	694a      	ldr	r2, [r1, #20]
 80028e2:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80028e4:	698d      	ldr	r5, [r1, #24]
 80028e6:	4315      	orrs	r5, r2
 80028e8:	e7eb      	b.n	80028c2 <TIM_OC1_SetConfig+0x26>
 80028ea:	bf00      	nop
 80028ec:	40012c00 	.word	0x40012c00

080028f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028f4:	6a02      	ldr	r2, [r0, #32]
 80028f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028fa:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028fe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002900:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002904:	680d      	ldr	r5, [r1, #0]
 8002906:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002908:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800290c:	688a      	ldr	r2, [r1, #8]
 800290e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002912:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <TIM_OC3_SetConfig+0x58>)
 8002914:	4290      	cmp	r0, r2
 8002916:	d006      	beq.n	8002926 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002918:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800291a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800291c:	684a      	ldr	r2, [r1, #4]
 800291e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002920:	6203      	str	r3, [r0, #32]
}
 8002922:	bc30      	pop	{r4, r5}
 8002924:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8002926:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800292a:	68ca      	ldr	r2, [r1, #12]
 800292c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002930:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002934:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002938:	694a      	ldr	r2, [r1, #20]
 800293a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800293e:	698a      	ldr	r2, [r1, #24]
 8002940:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8002944:	e7e8      	b.n	8002918 <TIM_OC3_SetConfig+0x28>
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00

0800294c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800294c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002950:	6a02      	ldr	r2, [r0, #32]
 8002952:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002956:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002958:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800295a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800295c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002960:	680d      	ldr	r5, [r1, #0]
 8002962:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002966:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800296a:	688d      	ldr	r5, [r1, #8]
 800296c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002970:	4d07      	ldr	r5, [pc, #28]	@ (8002990 <TIM_OC4_SetConfig+0x44>)
 8002972:	42a8      	cmp	r0, r5
 8002974:	d006      	beq.n	8002984 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002976:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002978:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800297a:	684a      	ldr	r2, [r1, #4]
 800297c:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800297e:	6203      	str	r3, [r0, #32]
}
 8002980:	bc30      	pop	{r4, r5}
 8002982:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002984:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002988:	694d      	ldr	r5, [r1, #20]
 800298a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800298e:	e7f2      	b.n	8002976 <TIM_OC4_SetConfig+0x2a>
 8002990:	40012c00 	.word	0x40012c00

08002994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002994:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002996:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002998:	6a04      	ldr	r4, [r0, #32]
 800299a:	f024 0401 	bic.w	r4, r4, #1
 800299e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a2:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029aa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80029ae:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029b0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80029b2:	6203      	str	r3, [r0, #32]
}
 80029b4:	bc10      	pop	{r4}
 80029b6:	4770      	bx	lr

080029b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ba:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029bc:	6a04      	ldr	r4, [r0, #32]
 80029be:	f024 0410 	bic.w	r4, r4, #16
 80029c2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029c6:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ca:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80029d2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029d6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80029d8:	6203      	str	r3, [r0, #32]
}
 80029da:	bc10      	pop	{r4}
 80029dc:	4770      	bx	lr

080029de <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029de:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029e4:	430b      	orrs	r3, r1
 80029e6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ea:	6083      	str	r3, [r0, #8]
}
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_PWM_MspInit>:
}
 80029ee:	4770      	bx	lr

080029f0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80029f0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a70 <TIM_Base_SetConfig+0x80>)
 80029f4:	4290      	cmp	r0, r2
 80029f6:	d00a      	beq.n	8002a0e <TIM_Base_SetConfig+0x1e>
 80029f8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80029fc:	d007      	beq.n	8002a0e <TIM_Base_SetConfig+0x1e>
 80029fe:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002a02:	4290      	cmp	r0, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_Base_SetConfig+0x1e>
 8002a06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a0a:	4290      	cmp	r0, r2
 8002a0c:	d103      	bne.n	8002a16 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a12:	684a      	ldr	r2, [r1, #4]
 8002a14:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a16:	4a16      	ldr	r2, [pc, #88]	@ (8002a70 <TIM_Base_SetConfig+0x80>)
 8002a18:	4290      	cmp	r0, r2
 8002a1a:	d00a      	beq.n	8002a32 <TIM_Base_SetConfig+0x42>
 8002a1c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002a20:	d007      	beq.n	8002a32 <TIM_Base_SetConfig+0x42>
 8002a22:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002a26:	4290      	cmp	r0, r2
 8002a28:	d003      	beq.n	8002a32 <TIM_Base_SetConfig+0x42>
 8002a2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a2e:	4290      	cmp	r0, r2
 8002a30:	d103      	bne.n	8002a3a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a36:	68ca      	ldr	r2, [r1, #12]
 8002a38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a3e:	694a      	ldr	r2, [r1, #20]
 8002a40:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a42:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a44:	688b      	ldr	r3, [r1, #8]
 8002a46:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a48:	680b      	ldr	r3, [r1, #0]
 8002a4a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a4c:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <TIM_Base_SetConfig+0x80>)
 8002a4e:	4298      	cmp	r0, r3
 8002a50:	d00a      	beq.n	8002a68 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8002a52:	2301      	movs	r3, #1
 8002a54:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a56:	6903      	ldr	r3, [r0, #16]
 8002a58:	f013 0f01 	tst.w	r3, #1
 8002a5c:	d003      	beq.n	8002a66 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a5e:	6903      	ldr	r3, [r0, #16]
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6103      	str	r3, [r0, #16]
}
 8002a66:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002a68:	690b      	ldr	r3, [r1, #16]
 8002a6a:	6303      	str	r3, [r0, #48]	@ 0x30
 8002a6c:	e7f1      	b.n	8002a52 <TIM_Base_SetConfig+0x62>
 8002a6e:	bf00      	nop
 8002a70:	40012c00 	.word	0x40012c00

08002a74 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002a74:	b340      	cbz	r0, 8002ac8 <HAL_TIM_Base_Init+0x54>
{
 8002a76:	b510      	push	{r4, lr}
 8002a78:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002a7e:	b1f3      	cbz	r3, 8002abe <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	2302      	movs	r3, #2
 8002a82:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a86:	4621      	mov	r1, r4
 8002a88:	f851 0b04 	ldr.w	r0, [r1], #4
 8002a8c:	f7ff ffb0 	bl	80029f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a96:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002a9a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002a9e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002aa2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002aaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002aae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002ab2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002ab6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002aba:	2000      	movs	r0, #0
}
 8002abc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002abe:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002ac2:	f7ff fafd 	bl	80020c0 <HAL_TIM_Base_MspInit>
 8002ac6:	e7db      	b.n	8002a80 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002ac8:	2001      	movs	r0, #1
}
 8002aca:	4770      	bx	lr

08002acc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002acc:	b340      	cbz	r0, 8002b20 <HAL_TIM_PWM_Init+0x54>
{
 8002ace:	b510      	push	{r4, lr}
 8002ad0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002ad6:	b1f3      	cbz	r3, 8002b16 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ade:	4621      	mov	r1, r4
 8002ae0:	f851 0b04 	ldr.w	r0, [r1], #4
 8002ae4:	f7ff ff84 	bl	80029f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002af2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002af6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002afa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b06:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002b0a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002b0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002b12:	2000      	movs	r0, #0
}
 8002b14:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002b16:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002b1a:	f7ff ff68 	bl	80029ee <HAL_TIM_PWM_MspInit>
 8002b1e:	e7db      	b.n	8002ad8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002b20:	2001      	movs	r0, #1
}
 8002b22:	4770      	bx	lr

08002b24 <TIM_OC2_SetConfig>:
{
 8002b24:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8002b26:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b28:	6a02      	ldr	r2, [r0, #32]
 8002b2a:	f022 0210 	bic.w	r2, r2, #16
 8002b2e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002b30:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002b32:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b34:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b38:	680d      	ldr	r5, [r1, #0]
 8002b3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002b3e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b42:	688d      	ldr	r5, [r1, #8]
 8002b44:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b48:	4d0c      	ldr	r5, [pc, #48]	@ (8002b7c <TIM_OC2_SetConfig+0x58>)
 8002b4a:	42a8      	cmp	r0, r5
 8002b4c:	d006      	beq.n	8002b5c <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8002b4e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002b50:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002b52:	684a      	ldr	r2, [r1, #4]
 8002b54:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002b56:	6203      	str	r3, [r0, #32]
}
 8002b58:	bc30      	pop	{r4, r5}
 8002b5a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b60:	68cd      	ldr	r5, [r1, #12]
 8002b62:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b6a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b6e:	694d      	ldr	r5, [r1, #20]
 8002b70:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b74:	698d      	ldr	r5, [r1, #24]
 8002b76:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002b7a:	e7e8      	b.n	8002b4e <TIM_OC2_SetConfig+0x2a>
 8002b7c:	40012c00 	.word	0x40012c00

08002b80 <HAL_TIM_PWM_ConfigChannel>:
{
 8002b80:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002b82:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d066      	beq.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	460d      	mov	r5, r1
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002b94:	2a0c      	cmp	r2, #12
 8002b96:	d85a      	bhi.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0xce>
 8002b98:	e8df f002 	tbb	[pc, r2]
 8002b9c:	59595907 	.word	0x59595907
 8002ba0:	5959591b 	.word	0x5959591b
 8002ba4:	59595930 	.word	0x59595930
 8002ba8:	44          	.byte	0x44
 8002ba9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002baa:	6800      	ldr	r0, [r0, #0]
 8002bac:	f7ff fe76 	bl	800289c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bb0:	6822      	ldr	r2, [r4, #0]
 8002bb2:	6993      	ldr	r3, [r2, #24]
 8002bb4:	f043 0308 	orr.w	r3, r3, #8
 8002bb8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bba:	6822      	ldr	r2, [r4, #0]
 8002bbc:	6993      	ldr	r3, [r2, #24]
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bc4:	6822      	ldr	r2, [r4, #0]
 8002bc6:	6993      	ldr	r3, [r2, #24]
 8002bc8:	6929      	ldr	r1, [r5, #16]
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2000      	movs	r0, #0
      break;
 8002bd0:	e03e      	b.n	8002c50 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bd2:	6800      	ldr	r0, [r0, #0]
 8002bd4:	f7ff ffa6 	bl	8002b24 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	6993      	ldr	r3, [r2, #24]
 8002bdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002be0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002be2:	6822      	ldr	r2, [r4, #0]
 8002be4:	6993      	ldr	r3, [r2, #24]
 8002be6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bec:	6822      	ldr	r2, [r4, #0]
 8002bee:	6993      	ldr	r3, [r2, #24]
 8002bf0:	6929      	ldr	r1, [r5, #16]
 8002bf2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002bf6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf8:	2000      	movs	r0, #0
      break;
 8002bfa:	e029      	b.n	8002c50 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bfc:	6800      	ldr	r0, [r0, #0]
 8002bfe:	f7ff fe77 	bl	80028f0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c02:	6822      	ldr	r2, [r4, #0]
 8002c04:	69d3      	ldr	r3, [r2, #28]
 8002c06:	f043 0308 	orr.w	r3, r3, #8
 8002c0a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c0c:	6822      	ldr	r2, [r4, #0]
 8002c0e:	69d3      	ldr	r3, [r2, #28]
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	69d3      	ldr	r3, [r2, #28]
 8002c1a:	6929      	ldr	r1, [r5, #16]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2000      	movs	r0, #0
      break;
 8002c22:	e015      	b.n	8002c50 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c24:	6800      	ldr	r0, [r0, #0]
 8002c26:	f7ff fe91 	bl	800294c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	69d3      	ldr	r3, [r2, #28]
 8002c2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c32:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c34:	6822      	ldr	r2, [r4, #0]
 8002c36:	69d3      	ldr	r3, [r2, #28]
 8002c38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c3c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c3e:	6822      	ldr	r2, [r4, #0]
 8002c40:	69d3      	ldr	r3, [r2, #28]
 8002c42:	6929      	ldr	r1, [r5, #16]
 8002c44:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c48:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2000      	movs	r0, #0
      break;
 8002c4c:	e000      	b.n	8002c50 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002c4e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002c50:	2300      	movs	r3, #0
 8002c52:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002c56:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002c58:	2002      	movs	r0, #2
 8002c5a:	e7fc      	b.n	8002c56 <HAL_TIM_PWM_ConfigChannel+0xd6>

08002c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c5c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c5e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c60:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c64:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c6e:	6082      	str	r2, [r0, #8]
}
 8002c70:	bc10      	pop	{r4}
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002c74:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d078      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0xfa>
{
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002c80:	2301      	movs	r3, #1
 8002c82:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002c86:	2302      	movs	r3, #2
 8002c88:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002c8c:	6802      	ldr	r2, [r0, #0]
 8002c8e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c94:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002c98:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002c9a:	680b      	ldr	r3, [r1, #0]
 8002c9c:	2b60      	cmp	r3, #96	@ 0x60
 8002c9e:	d04c      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0xc6>
 8002ca0:	d823      	bhi.n	8002cea <HAL_TIM_ConfigClockSource+0x76>
 8002ca2:	2b40      	cmp	r3, #64	@ 0x40
 8002ca4:	d054      	beq.n	8002d50 <HAL_TIM_ConfigClockSource+0xdc>
 8002ca6:	d811      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x58>
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d003      	beq.n	8002cb4 <HAL_TIM_ConfigClockSource+0x40>
 8002cac:	d80a      	bhi.n	8002cc4 <HAL_TIM_ConfigClockSource+0x50>
 8002cae:	b10b      	cbz	r3, 8002cb4 <HAL_TIM_ConfigClockSource+0x40>
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d105      	bne.n	8002cc0 <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6820      	ldr	r0, [r4, #0]
 8002cb8:	f7ff fe91 	bl	80029de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2000      	movs	r0, #0
      break;
 8002cbe:	e028      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	e026      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002cc4:	2b30      	cmp	r3, #48	@ 0x30
 8002cc6:	d0f5      	beq.n	8002cb4 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 8002cc8:	2001      	movs	r0, #1
 8002cca:	e022      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002ccc:	2b50      	cmp	r3, #80	@ 0x50
 8002cce:	d10a      	bne.n	8002ce6 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd0:	68ca      	ldr	r2, [r1, #12]
 8002cd2:	6849      	ldr	r1, [r1, #4]
 8002cd4:	6800      	ldr	r0, [r0, #0]
 8002cd6:	f7ff fe5d 	bl	8002994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cda:	2150      	movs	r1, #80	@ 0x50
 8002cdc:	6820      	ldr	r0, [r4, #0]
 8002cde:	f7ff fe7e 	bl	80029de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2000      	movs	r0, #0
      break;
 8002ce4:	e015      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	e013      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cee:	d03a      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0xf2>
 8002cf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cf4:	d014      	beq.n	8002d20 <HAL_TIM_ConfigClockSource+0xac>
 8002cf6:	2b70      	cmp	r3, #112	@ 0x70
 8002cf8:	d137      	bne.n	8002d6a <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002cfa:	68cb      	ldr	r3, [r1, #12]
 8002cfc:	684a      	ldr	r2, [r1, #4]
 8002cfe:	6889      	ldr	r1, [r1, #8]
 8002d00:	6800      	ldr	r0, [r0, #0]
 8002d02:	f7ff ffab 	bl	8002c5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d0a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002d0e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d10:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002d1e:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8002d20:	68cb      	ldr	r3, [r1, #12]
 8002d22:	684a      	ldr	r2, [r1, #4]
 8002d24:	6889      	ldr	r1, [r1, #8]
 8002d26:	6800      	ldr	r0, [r0, #0]
 8002d28:	f7ff ff98 	bl	8002c5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d2c:	6822      	ldr	r2, [r4, #0]
 8002d2e:	6893      	ldr	r3, [r2, #8]
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d34:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2000      	movs	r0, #0
      break;
 8002d38:	e7eb      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d3a:	68ca      	ldr	r2, [r1, #12]
 8002d3c:	6849      	ldr	r1, [r1, #4]
 8002d3e:	6800      	ldr	r0, [r0, #0]
 8002d40:	f7ff fe3a 	bl	80029b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d44:	2160      	movs	r1, #96	@ 0x60
 8002d46:	6820      	ldr	r0, [r4, #0]
 8002d48:	f7ff fe49 	bl	80029de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002d4c:	2000      	movs	r0, #0
      break;
 8002d4e:	e7e0      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d50:	68ca      	ldr	r2, [r1, #12]
 8002d52:	6849      	ldr	r1, [r1, #4]
 8002d54:	6800      	ldr	r0, [r0, #0]
 8002d56:	f7ff fe1d 	bl	8002994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d5a:	2140      	movs	r1, #64	@ 0x40
 8002d5c:	6820      	ldr	r0, [r4, #0]
 8002d5e:	f7ff fe3e 	bl	80029de <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2000      	movs	r0, #0
      break;
 8002d64:	e7d5      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8002d66:	2000      	movs	r0, #0
 8002d68:	e7d3      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	e7d1      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 8002d6e:	2002      	movs	r0, #2
}
 8002d70:	4770      	bx	lr

08002d72 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d72:	f001 011f 	and.w	r1, r1, #31
 8002d76:	f04f 0c01 	mov.w	ip, #1
 8002d7a:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d7e:	6a03      	ldr	r3, [r0, #32]
 8002d80:	ea23 030c 	bic.w	r3, r3, ip
 8002d84:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d86:	6a03      	ldr	r3, [r0, #32]
 8002d88:	408a      	lsls	r2, r1
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	6203      	str	r3, [r0, #32]
}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIM_PWM_Start>:
{
 8002d90:	b510      	push	{r4, lr}
 8002d92:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d94:	4608      	mov	r0, r1
 8002d96:	bb51      	cbnz	r1, 8002dee <HAL_TIM_PWM_Start+0x5e>
 8002d98:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	bf18      	it	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d15b      	bne.n	8002e60 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d139      	bne.n	8002e20 <HAL_TIM_PWM_Start+0x90>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002db2:	2201      	movs	r2, #1
 8002db4:	4601      	mov	r1, r0
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	f7ff ffdb 	bl	8002d72 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8002e68 <HAL_TIM_PWM_Start+0xd8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d03d      	beq.n	8002e40 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	4a28      	ldr	r2, [pc, #160]	@ (8002e68 <HAL_TIM_PWM_Start+0xd8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d03e      	beq.n	8002e4a <HAL_TIM_PWM_Start+0xba>
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd0:	d03b      	beq.n	8002e4a <HAL_TIM_PWM_Start+0xba>
 8002dd2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d037      	beq.n	8002e4a <HAL_TIM_PWM_Start+0xba>
 8002dda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d033      	beq.n	8002e4a <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002dea:	2000      	movs	r0, #0
 8002dec:	e039      	b.n	8002e62 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dee:	2904      	cmp	r1, #4
 8002df0:	d008      	beq.n	8002e04 <HAL_TIM_PWM_Start+0x74>
 8002df2:	2908      	cmp	r1, #8
 8002df4:	d00d      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x82>
 8002df6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	bf18      	it	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	e7cf      	b.n	8002da4 <HAL_TIM_PWM_Start+0x14>
 8002e04:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	bf18      	it	ne
 8002e0e:	2301      	movne	r3, #1
 8002e10:	e7c8      	b.n	8002da4 <HAL_TIM_PWM_Start+0x14>
 8002e12:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	bf18      	it	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	e7c1      	b.n	8002da4 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e20:	2804      	cmp	r0, #4
 8002e22:	d005      	beq.n	8002e30 <HAL_TIM_PWM_Start+0xa0>
 8002e24:	2808      	cmp	r0, #8
 8002e26:	d007      	beq.n	8002e38 <HAL_TIM_PWM_Start+0xa8>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002e2e:	e7c0      	b.n	8002db2 <HAL_TIM_PWM_Start+0x22>
 8002e30:	2302      	movs	r3, #2
 8002e32:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002e36:	e7bc      	b.n	8002db2 <HAL_TIM_PWM_Start+0x22>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002e3e:	e7b8      	b.n	8002db2 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8002e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e46:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e48:	e7bc      	b.n	8002dc4 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e50:	2a06      	cmp	r2, #6
 8002e52:	d007      	beq.n	8002e64 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	e000      	b.n	8002e62 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8002e60:	2001      	movs	r0, #1
}
 8002e62:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002e64:	2000      	movs	r0, #0
 8002e66:	e7fc      	b.n	8002e62 <HAL_TIM_PWM_Start+0xd2>
 8002e68:	40012c00 	.word	0x40012c00

08002e6c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002e70:	2a01      	cmp	r2, #1
 8002e72:	d02c      	beq.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8002e74:	b410      	push	{r4}
 8002e76:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e84:	6802      	ldr	r2, [r0, #0]
 8002e86:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e88:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e8a:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e8e:	6808      	ldr	r0, [r1, #0]
 8002e90:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e94:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	480e      	ldr	r0, [pc, #56]	@ (8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8002e9a:	4282      	cmp	r2, r0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8002e9e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002ea2:	d007      	beq.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8002ea4:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002ea8:	4282      	cmp	r2, r0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8002eac:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002eb0:	4282      	cmp	r2, r0
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eb4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eb8:	6849      	ldr	r1, [r1, #4]
 8002eba:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ebc:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002eca:	bc10      	pop	{r4}
 8002ecc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002ece:	2002      	movs	r0, #2
}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40012c00 	.word	0x40012c00

08002ed8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ed8:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eda:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d021      	beq.n	8002f26 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ee8:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eee:	6888      	ldr	r0, [r1, #8]
 8002ef0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ef2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ef6:	6848      	ldr	r0, [r1, #4]
 8002ef8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002efa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002efe:	6808      	ldr	r0, [r1, #0]
 8002f00:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f06:	6908      	ldr	r0, [r1, #16]
 8002f08:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f0e:	6948      	ldr	r0, [r1, #20]
 8002f10:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f16:	69c9      	ldr	r1, [r1, #28]
 8002f18:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f1a:	6811      	ldr	r1, [r2, #0]
 8002f1c:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8002f24:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002f26:	2002      	movs	r0, #2
}
 8002f28:	4770      	bx	lr

08002f2a <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f2a:	e7fe      	b.n	8002f2a <NMI_Handler>

08002f2c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <HardFault_Handler>

08002f2e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f2e:	e7fe      	b.n	8002f2e <MemManage_Handler>

08002f30 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <BusFault_Handler>

08002f32 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f32:	e7fe      	b.n	8002f32 <UsageFault_Handler>

08002f34 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f34:	4770      	bx	lr

08002f36 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f36:	4770      	bx	lr

08002f38 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f38:	4770      	bx	lr

08002f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f3a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f3c:	f7fd fe52 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f40:	bd08      	pop	{r3, pc}
	...

08002f44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f46:	4802      	ldr	r0, [pc, #8]	@ (8002f50 <DMA1_Channel1_IRQHandler+0xc>)
 8002f48:	f7fe fa4e 	bl	80013e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f4c:	bd08      	pop	{r3, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000180 	.word	0x20000180

08002f54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HROT_Pin);
 8002f56:	2040      	movs	r0, #64	@ 0x40
 8002f58:	f7fe fc0c 	bl	8001774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f5c:	bd08      	pop	{r3, pc}

08002f5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f5e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(H1_Pin);
 8002f60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002f64:	f7fe fc06 	bl	8001774 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(H2_Pin);
 8002f68:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002f6c:	f7fe fc02 	bl	8001774 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(H3_Pin);
 8002f70:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002f74:	f7fe fbfe 	bl	8001774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f78:	bd08      	pop	{r3, pc}
	...

08002f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f80:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb4 <_sbrk+0x38>)
 8002f82:	490d      	ldr	r1, [pc, #52]	@ (8002fb8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f84:	480d      	ldr	r0, [pc, #52]	@ (8002fbc <_sbrk+0x40>)
 8002f86:	6800      	ldr	r0, [r0, #0]
 8002f88:	b140      	cbz	r0, 8002f9c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f8a:	480c      	ldr	r0, [pc, #48]	@ (8002fbc <_sbrk+0x40>)
 8002f8c:	6800      	ldr	r0, [r0, #0]
 8002f8e:	4403      	add	r3, r0
 8002f90:	1a52      	subs	r2, r2, r1
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d806      	bhi.n	8002fa4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002f96:	4a09      	ldr	r2, [pc, #36]	@ (8002fbc <_sbrk+0x40>)
 8002f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002f9a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002f9c:	4807      	ldr	r0, [pc, #28]	@ (8002fbc <_sbrk+0x40>)
 8002f9e:	4c08      	ldr	r4, [pc, #32]	@ (8002fc0 <_sbrk+0x44>)
 8002fa0:	6004      	str	r4, [r0, #0]
 8002fa2:	e7f2      	b.n	8002f8a <_sbrk+0xe>
    errno = ENOMEM;
 8002fa4:	f000 f860 	bl	8003068 <__errno>
 8002fa8:	230c      	movs	r3, #12
 8002faa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	e7f3      	b.n	8002f9a <_sbrk+0x1e>
 8002fb2:	bf00      	nop
 8002fb4:	20005000 	.word	0x20005000
 8002fb8:	00000400 	.word	0x00000400
 8002fbc:	20000600 	.word	0x20000600
 8002fc0:	20000750 	.word	0x20000750

08002fc4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc4:	4770      	bx	lr
	...

08002fc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fc8:	f7ff fffc 	bl	8002fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fcc:	480b      	ldr	r0, [pc, #44]	@ (8002ffc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002fce:	490c      	ldr	r1, [pc, #48]	@ (8003000 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003004 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd4:	e002      	b.n	8002fdc <LoopCopyDataInit>

08002fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fda:	3304      	adds	r3, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe0:	d3f9      	bcc.n	8002fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe2:	4a09      	ldr	r2, [pc, #36]	@ (8003008 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002fe4:	4c09      	ldr	r4, [pc, #36]	@ (800300c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe8:	e001      	b.n	8002fee <LoopFillZerobss>

08002fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fec:	3204      	adds	r2, #4

08002fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff0:	d3fb      	bcc.n	8002fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ff2:	f000 f83f 	bl	8003074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ff6:	f7fd fb57 	bl	80006a8 <main>
  bx lr
 8002ffa:	4770      	bx	lr
  ldr r0, =_sdata
 8002ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003000:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8003004:	08004760 	.word	0x08004760
  ldr r2, =_sbss
 8003008:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800300c:	2000074c 	.word	0x2000074c

08003010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003010:	e7fe      	b.n	8003010 <ADC1_2_IRQHandler>
	...

08003014 <siprintf>:
 8003014:	b40e      	push	{r1, r2, r3}
 8003016:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800301a:	b510      	push	{r4, lr}
 800301c:	2400      	movs	r4, #0
 800301e:	b09d      	sub	sp, #116	@ 0x74
 8003020:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003022:	9002      	str	r0, [sp, #8]
 8003024:	9006      	str	r0, [sp, #24]
 8003026:	9107      	str	r1, [sp, #28]
 8003028:	9104      	str	r1, [sp, #16]
 800302a:	4809      	ldr	r0, [pc, #36]	@ (8003050 <siprintf+0x3c>)
 800302c:	4909      	ldr	r1, [pc, #36]	@ (8003054 <siprintf+0x40>)
 800302e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003032:	9105      	str	r1, [sp, #20]
 8003034:	6800      	ldr	r0, [r0, #0]
 8003036:	a902      	add	r1, sp, #8
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800303c:	f000 f992 	bl	8003364 <_svfiprintf_r>
 8003040:	9b02      	ldr	r3, [sp, #8]
 8003042:	701c      	strb	r4, [r3, #0]
 8003044:	b01d      	add	sp, #116	@ 0x74
 8003046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800304a:	b003      	add	sp, #12
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000014 	.word	0x20000014
 8003054:	ffff0208 	.word	0xffff0208

08003058 <memset>:
 8003058:	4603      	mov	r3, r0
 800305a:	4402      	add	r2, r0
 800305c:	4293      	cmp	r3, r2
 800305e:	d100      	bne.n	8003062 <memset+0xa>
 8003060:	4770      	bx	lr
 8003062:	f803 1b01 	strb.w	r1, [r3], #1
 8003066:	e7f9      	b.n	800305c <memset+0x4>

08003068 <__errno>:
 8003068:	4b01      	ldr	r3, [pc, #4]	@ (8003070 <__errno+0x8>)
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000014 	.word	0x20000014

08003074 <__libc_init_array>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	2600      	movs	r6, #0
 8003078:	4d0c      	ldr	r5, [pc, #48]	@ (80030ac <__libc_init_array+0x38>)
 800307a:	4c0d      	ldr	r4, [pc, #52]	@ (80030b0 <__libc_init_array+0x3c>)
 800307c:	1b64      	subs	r4, r4, r5
 800307e:	10a4      	asrs	r4, r4, #2
 8003080:	42a6      	cmp	r6, r4
 8003082:	d109      	bne.n	8003098 <__libc_init_array+0x24>
 8003084:	f000 fc76 	bl	8003974 <_init>
 8003088:	2600      	movs	r6, #0
 800308a:	4d0a      	ldr	r5, [pc, #40]	@ (80030b4 <__libc_init_array+0x40>)
 800308c:	4c0a      	ldr	r4, [pc, #40]	@ (80030b8 <__libc_init_array+0x44>)
 800308e:	1b64      	subs	r4, r4, r5
 8003090:	10a4      	asrs	r4, r4, #2
 8003092:	42a6      	cmp	r6, r4
 8003094:	d105      	bne.n	80030a2 <__libc_init_array+0x2e>
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	f855 3b04 	ldr.w	r3, [r5], #4
 800309c:	4798      	blx	r3
 800309e:	3601      	adds	r6, #1
 80030a0:	e7ee      	b.n	8003080 <__libc_init_array+0xc>
 80030a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a6:	4798      	blx	r3
 80030a8:	3601      	adds	r6, #1
 80030aa:	e7f2      	b.n	8003092 <__libc_init_array+0x1e>
 80030ac:	08004758 	.word	0x08004758
 80030b0:	08004758 	.word	0x08004758
 80030b4:	08004758 	.word	0x08004758
 80030b8:	0800475c 	.word	0x0800475c

080030bc <__retarget_lock_acquire_recursive>:
 80030bc:	4770      	bx	lr

080030be <__retarget_lock_release_recursive>:
 80030be:	4770      	bx	lr

080030c0 <_free_r>:
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4605      	mov	r5, r0
 80030c4:	2900      	cmp	r1, #0
 80030c6:	d040      	beq.n	800314a <_free_r+0x8a>
 80030c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030cc:	1f0c      	subs	r4, r1, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	bfb8      	it	lt
 80030d2:	18e4      	addlt	r4, r4, r3
 80030d4:	f000 f8de 	bl	8003294 <__malloc_lock>
 80030d8:	4a1c      	ldr	r2, [pc, #112]	@ (800314c <_free_r+0x8c>)
 80030da:	6813      	ldr	r3, [r2, #0]
 80030dc:	b933      	cbnz	r3, 80030ec <_free_r+0x2c>
 80030de:	6063      	str	r3, [r4, #4]
 80030e0:	6014      	str	r4, [r2, #0]
 80030e2:	4628      	mov	r0, r5
 80030e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030e8:	f000 b8da 	b.w	80032a0 <__malloc_unlock>
 80030ec:	42a3      	cmp	r3, r4
 80030ee:	d908      	bls.n	8003102 <_free_r+0x42>
 80030f0:	6820      	ldr	r0, [r4, #0]
 80030f2:	1821      	adds	r1, r4, r0
 80030f4:	428b      	cmp	r3, r1
 80030f6:	bf01      	itttt	eq
 80030f8:	6819      	ldreq	r1, [r3, #0]
 80030fa:	685b      	ldreq	r3, [r3, #4]
 80030fc:	1809      	addeq	r1, r1, r0
 80030fe:	6021      	streq	r1, [r4, #0]
 8003100:	e7ed      	b.n	80030de <_free_r+0x1e>
 8003102:	461a      	mov	r2, r3
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	b10b      	cbz	r3, 800310c <_free_r+0x4c>
 8003108:	42a3      	cmp	r3, r4
 800310a:	d9fa      	bls.n	8003102 <_free_r+0x42>
 800310c:	6811      	ldr	r1, [r2, #0]
 800310e:	1850      	adds	r0, r2, r1
 8003110:	42a0      	cmp	r0, r4
 8003112:	d10b      	bne.n	800312c <_free_r+0x6c>
 8003114:	6820      	ldr	r0, [r4, #0]
 8003116:	4401      	add	r1, r0
 8003118:	1850      	adds	r0, r2, r1
 800311a:	4283      	cmp	r3, r0
 800311c:	6011      	str	r1, [r2, #0]
 800311e:	d1e0      	bne.n	80030e2 <_free_r+0x22>
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4408      	add	r0, r1
 8003126:	6010      	str	r0, [r2, #0]
 8003128:	6053      	str	r3, [r2, #4]
 800312a:	e7da      	b.n	80030e2 <_free_r+0x22>
 800312c:	d902      	bls.n	8003134 <_free_r+0x74>
 800312e:	230c      	movs	r3, #12
 8003130:	602b      	str	r3, [r5, #0]
 8003132:	e7d6      	b.n	80030e2 <_free_r+0x22>
 8003134:	6820      	ldr	r0, [r4, #0]
 8003136:	1821      	adds	r1, r4, r0
 8003138:	428b      	cmp	r3, r1
 800313a:	bf01      	itttt	eq
 800313c:	6819      	ldreq	r1, [r3, #0]
 800313e:	685b      	ldreq	r3, [r3, #4]
 8003140:	1809      	addeq	r1, r1, r0
 8003142:	6021      	streq	r1, [r4, #0]
 8003144:	6063      	str	r3, [r4, #4]
 8003146:	6054      	str	r4, [r2, #4]
 8003148:	e7cb      	b.n	80030e2 <_free_r+0x22>
 800314a:	bd38      	pop	{r3, r4, r5, pc}
 800314c:	20000748 	.word	0x20000748

08003150 <sbrk_aligned>:
 8003150:	b570      	push	{r4, r5, r6, lr}
 8003152:	4e0f      	ldr	r6, [pc, #60]	@ (8003190 <sbrk_aligned+0x40>)
 8003154:	460c      	mov	r4, r1
 8003156:	6831      	ldr	r1, [r6, #0]
 8003158:	4605      	mov	r5, r0
 800315a:	b911      	cbnz	r1, 8003162 <sbrk_aligned+0x12>
 800315c:	f000 fba8 	bl	80038b0 <_sbrk_r>
 8003160:	6030      	str	r0, [r6, #0]
 8003162:	4621      	mov	r1, r4
 8003164:	4628      	mov	r0, r5
 8003166:	f000 fba3 	bl	80038b0 <_sbrk_r>
 800316a:	1c43      	adds	r3, r0, #1
 800316c:	d103      	bne.n	8003176 <sbrk_aligned+0x26>
 800316e:	f04f 34ff 	mov.w	r4, #4294967295
 8003172:	4620      	mov	r0, r4
 8003174:	bd70      	pop	{r4, r5, r6, pc}
 8003176:	1cc4      	adds	r4, r0, #3
 8003178:	f024 0403 	bic.w	r4, r4, #3
 800317c:	42a0      	cmp	r0, r4
 800317e:	d0f8      	beq.n	8003172 <sbrk_aligned+0x22>
 8003180:	1a21      	subs	r1, r4, r0
 8003182:	4628      	mov	r0, r5
 8003184:	f000 fb94 	bl	80038b0 <_sbrk_r>
 8003188:	3001      	adds	r0, #1
 800318a:	d1f2      	bne.n	8003172 <sbrk_aligned+0x22>
 800318c:	e7ef      	b.n	800316e <sbrk_aligned+0x1e>
 800318e:	bf00      	nop
 8003190:	20000744 	.word	0x20000744

08003194 <_malloc_r>:
 8003194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003198:	1ccd      	adds	r5, r1, #3
 800319a:	f025 0503 	bic.w	r5, r5, #3
 800319e:	3508      	adds	r5, #8
 80031a0:	2d0c      	cmp	r5, #12
 80031a2:	bf38      	it	cc
 80031a4:	250c      	movcc	r5, #12
 80031a6:	2d00      	cmp	r5, #0
 80031a8:	4606      	mov	r6, r0
 80031aa:	db01      	blt.n	80031b0 <_malloc_r+0x1c>
 80031ac:	42a9      	cmp	r1, r5
 80031ae:	d904      	bls.n	80031ba <_malloc_r+0x26>
 80031b0:	230c      	movs	r3, #12
 80031b2:	6033      	str	r3, [r6, #0]
 80031b4:	2000      	movs	r0, #0
 80031b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003290 <_malloc_r+0xfc>
 80031be:	f000 f869 	bl	8003294 <__malloc_lock>
 80031c2:	f8d8 3000 	ldr.w	r3, [r8]
 80031c6:	461c      	mov	r4, r3
 80031c8:	bb44      	cbnz	r4, 800321c <_malloc_r+0x88>
 80031ca:	4629      	mov	r1, r5
 80031cc:	4630      	mov	r0, r6
 80031ce:	f7ff ffbf 	bl	8003150 <sbrk_aligned>
 80031d2:	1c43      	adds	r3, r0, #1
 80031d4:	4604      	mov	r4, r0
 80031d6:	d158      	bne.n	800328a <_malloc_r+0xf6>
 80031d8:	f8d8 4000 	ldr.w	r4, [r8]
 80031dc:	4627      	mov	r7, r4
 80031de:	2f00      	cmp	r7, #0
 80031e0:	d143      	bne.n	800326a <_malloc_r+0xd6>
 80031e2:	2c00      	cmp	r4, #0
 80031e4:	d04b      	beq.n	800327e <_malloc_r+0xea>
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	4639      	mov	r1, r7
 80031ea:	4630      	mov	r0, r6
 80031ec:	eb04 0903 	add.w	r9, r4, r3
 80031f0:	f000 fb5e 	bl	80038b0 <_sbrk_r>
 80031f4:	4581      	cmp	r9, r0
 80031f6:	d142      	bne.n	800327e <_malloc_r+0xea>
 80031f8:	6821      	ldr	r1, [r4, #0]
 80031fa:	4630      	mov	r0, r6
 80031fc:	1a6d      	subs	r5, r5, r1
 80031fe:	4629      	mov	r1, r5
 8003200:	f7ff ffa6 	bl	8003150 <sbrk_aligned>
 8003204:	3001      	adds	r0, #1
 8003206:	d03a      	beq.n	800327e <_malloc_r+0xea>
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	442b      	add	r3, r5
 800320c:	6023      	str	r3, [r4, #0]
 800320e:	f8d8 3000 	ldr.w	r3, [r8]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	bb62      	cbnz	r2, 8003270 <_malloc_r+0xdc>
 8003216:	f8c8 7000 	str.w	r7, [r8]
 800321a:	e00f      	b.n	800323c <_malloc_r+0xa8>
 800321c:	6822      	ldr	r2, [r4, #0]
 800321e:	1b52      	subs	r2, r2, r5
 8003220:	d420      	bmi.n	8003264 <_malloc_r+0xd0>
 8003222:	2a0b      	cmp	r2, #11
 8003224:	d917      	bls.n	8003256 <_malloc_r+0xc2>
 8003226:	1961      	adds	r1, r4, r5
 8003228:	42a3      	cmp	r3, r4
 800322a:	6025      	str	r5, [r4, #0]
 800322c:	bf18      	it	ne
 800322e:	6059      	strne	r1, [r3, #4]
 8003230:	6863      	ldr	r3, [r4, #4]
 8003232:	bf08      	it	eq
 8003234:	f8c8 1000 	streq.w	r1, [r8]
 8003238:	5162      	str	r2, [r4, r5]
 800323a:	604b      	str	r3, [r1, #4]
 800323c:	4630      	mov	r0, r6
 800323e:	f000 f82f 	bl	80032a0 <__malloc_unlock>
 8003242:	f104 000b 	add.w	r0, r4, #11
 8003246:	1d23      	adds	r3, r4, #4
 8003248:	f020 0007 	bic.w	r0, r0, #7
 800324c:	1ac2      	subs	r2, r0, r3
 800324e:	bf1c      	itt	ne
 8003250:	1a1b      	subne	r3, r3, r0
 8003252:	50a3      	strne	r3, [r4, r2]
 8003254:	e7af      	b.n	80031b6 <_malloc_r+0x22>
 8003256:	6862      	ldr	r2, [r4, #4]
 8003258:	42a3      	cmp	r3, r4
 800325a:	bf0c      	ite	eq
 800325c:	f8c8 2000 	streq.w	r2, [r8]
 8003260:	605a      	strne	r2, [r3, #4]
 8003262:	e7eb      	b.n	800323c <_malloc_r+0xa8>
 8003264:	4623      	mov	r3, r4
 8003266:	6864      	ldr	r4, [r4, #4]
 8003268:	e7ae      	b.n	80031c8 <_malloc_r+0x34>
 800326a:	463c      	mov	r4, r7
 800326c:	687f      	ldr	r7, [r7, #4]
 800326e:	e7b6      	b.n	80031de <_malloc_r+0x4a>
 8003270:	461a      	mov	r2, r3
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	42a3      	cmp	r3, r4
 8003276:	d1fb      	bne.n	8003270 <_malloc_r+0xdc>
 8003278:	2300      	movs	r3, #0
 800327a:	6053      	str	r3, [r2, #4]
 800327c:	e7de      	b.n	800323c <_malloc_r+0xa8>
 800327e:	230c      	movs	r3, #12
 8003280:	4630      	mov	r0, r6
 8003282:	6033      	str	r3, [r6, #0]
 8003284:	f000 f80c 	bl	80032a0 <__malloc_unlock>
 8003288:	e794      	b.n	80031b4 <_malloc_r+0x20>
 800328a:	6005      	str	r5, [r0, #0]
 800328c:	e7d6      	b.n	800323c <_malloc_r+0xa8>
 800328e:	bf00      	nop
 8003290:	20000748 	.word	0x20000748

08003294 <__malloc_lock>:
 8003294:	4801      	ldr	r0, [pc, #4]	@ (800329c <__malloc_lock+0x8>)
 8003296:	f7ff bf11 	b.w	80030bc <__retarget_lock_acquire_recursive>
 800329a:	bf00      	nop
 800329c:	20000740 	.word	0x20000740

080032a0 <__malloc_unlock>:
 80032a0:	4801      	ldr	r0, [pc, #4]	@ (80032a8 <__malloc_unlock+0x8>)
 80032a2:	f7ff bf0c 	b.w	80030be <__retarget_lock_release_recursive>
 80032a6:	bf00      	nop
 80032a8:	20000740 	.word	0x20000740

080032ac <__ssputs_r>:
 80032ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	461f      	mov	r7, r3
 80032b2:	688e      	ldr	r6, [r1, #8]
 80032b4:	4682      	mov	sl, r0
 80032b6:	42be      	cmp	r6, r7
 80032b8:	460c      	mov	r4, r1
 80032ba:	4690      	mov	r8, r2
 80032bc:	680b      	ldr	r3, [r1, #0]
 80032be:	d82d      	bhi.n	800331c <__ssputs_r+0x70>
 80032c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80032c8:	d026      	beq.n	8003318 <__ssputs_r+0x6c>
 80032ca:	6965      	ldr	r5, [r4, #20]
 80032cc:	6909      	ldr	r1, [r1, #16]
 80032ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d2:	eba3 0901 	sub.w	r9, r3, r1
 80032d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032da:	1c7b      	adds	r3, r7, #1
 80032dc:	444b      	add	r3, r9
 80032de:	106d      	asrs	r5, r5, #1
 80032e0:	429d      	cmp	r5, r3
 80032e2:	bf38      	it	cc
 80032e4:	461d      	movcc	r5, r3
 80032e6:	0553      	lsls	r3, r2, #21
 80032e8:	d527      	bpl.n	800333a <__ssputs_r+0x8e>
 80032ea:	4629      	mov	r1, r5
 80032ec:	f7ff ff52 	bl	8003194 <_malloc_r>
 80032f0:	4606      	mov	r6, r0
 80032f2:	b360      	cbz	r0, 800334e <__ssputs_r+0xa2>
 80032f4:	464a      	mov	r2, r9
 80032f6:	6921      	ldr	r1, [r4, #16]
 80032f8:	f000 faf8 	bl	80038ec <memcpy>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003306:	81a3      	strh	r3, [r4, #12]
 8003308:	6126      	str	r6, [r4, #16]
 800330a:	444e      	add	r6, r9
 800330c:	6026      	str	r6, [r4, #0]
 800330e:	463e      	mov	r6, r7
 8003310:	6165      	str	r5, [r4, #20]
 8003312:	eba5 0509 	sub.w	r5, r5, r9
 8003316:	60a5      	str	r5, [r4, #8]
 8003318:	42be      	cmp	r6, r7
 800331a:	d900      	bls.n	800331e <__ssputs_r+0x72>
 800331c:	463e      	mov	r6, r7
 800331e:	4632      	mov	r2, r6
 8003320:	4641      	mov	r1, r8
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	f000 faaa 	bl	800387c <memmove>
 8003328:	2000      	movs	r0, #0
 800332a:	68a3      	ldr	r3, [r4, #8]
 800332c:	1b9b      	subs	r3, r3, r6
 800332e:	60a3      	str	r3, [r4, #8]
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	4433      	add	r3, r6
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333a:	462a      	mov	r2, r5
 800333c:	f000 fae4 	bl	8003908 <_realloc_r>
 8003340:	4606      	mov	r6, r0
 8003342:	2800      	cmp	r0, #0
 8003344:	d1e0      	bne.n	8003308 <__ssputs_r+0x5c>
 8003346:	4650      	mov	r0, sl
 8003348:	6921      	ldr	r1, [r4, #16]
 800334a:	f7ff feb9 	bl	80030c0 <_free_r>
 800334e:	230c      	movs	r3, #12
 8003350:	f8ca 3000 	str.w	r3, [sl]
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	f04f 30ff 	mov.w	r0, #4294967295
 800335a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800335e:	81a3      	strh	r3, [r4, #12]
 8003360:	e7e9      	b.n	8003336 <__ssputs_r+0x8a>
	...

08003364 <_svfiprintf_r>:
 8003364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003368:	4698      	mov	r8, r3
 800336a:	898b      	ldrh	r3, [r1, #12]
 800336c:	4607      	mov	r7, r0
 800336e:	061b      	lsls	r3, r3, #24
 8003370:	460d      	mov	r5, r1
 8003372:	4614      	mov	r4, r2
 8003374:	b09d      	sub	sp, #116	@ 0x74
 8003376:	d510      	bpl.n	800339a <_svfiprintf_r+0x36>
 8003378:	690b      	ldr	r3, [r1, #16]
 800337a:	b973      	cbnz	r3, 800339a <_svfiprintf_r+0x36>
 800337c:	2140      	movs	r1, #64	@ 0x40
 800337e:	f7ff ff09 	bl	8003194 <_malloc_r>
 8003382:	6028      	str	r0, [r5, #0]
 8003384:	6128      	str	r0, [r5, #16]
 8003386:	b930      	cbnz	r0, 8003396 <_svfiprintf_r+0x32>
 8003388:	230c      	movs	r3, #12
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	b01d      	add	sp, #116	@ 0x74
 8003392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003396:	2340      	movs	r3, #64	@ 0x40
 8003398:	616b      	str	r3, [r5, #20]
 800339a:	2300      	movs	r3, #0
 800339c:	9309      	str	r3, [sp, #36]	@ 0x24
 800339e:	2320      	movs	r3, #32
 80033a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033a4:	2330      	movs	r3, #48	@ 0x30
 80033a6:	f04f 0901 	mov.w	r9, #1
 80033aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003548 <_svfiprintf_r+0x1e4>
 80033b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033b6:	4623      	mov	r3, r4
 80033b8:	469a      	mov	sl, r3
 80033ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033be:	b10a      	cbz	r2, 80033c4 <_svfiprintf_r+0x60>
 80033c0:	2a25      	cmp	r2, #37	@ 0x25
 80033c2:	d1f9      	bne.n	80033b8 <_svfiprintf_r+0x54>
 80033c4:	ebba 0b04 	subs.w	fp, sl, r4
 80033c8:	d00b      	beq.n	80033e2 <_svfiprintf_r+0x7e>
 80033ca:	465b      	mov	r3, fp
 80033cc:	4622      	mov	r2, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	4638      	mov	r0, r7
 80033d2:	f7ff ff6b 	bl	80032ac <__ssputs_r>
 80033d6:	3001      	adds	r0, #1
 80033d8:	f000 80a7 	beq.w	800352a <_svfiprintf_r+0x1c6>
 80033dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033de:	445a      	add	r2, fp
 80033e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80033e2:	f89a 3000 	ldrb.w	r3, [sl]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 809f 	beq.w	800352a <_svfiprintf_r+0x1c6>
 80033ec:	2300      	movs	r3, #0
 80033ee:	f04f 32ff 	mov.w	r2, #4294967295
 80033f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033f6:	f10a 0a01 	add.w	sl, sl, #1
 80033fa:	9304      	str	r3, [sp, #16]
 80033fc:	9307      	str	r3, [sp, #28]
 80033fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003402:	931a      	str	r3, [sp, #104]	@ 0x68
 8003404:	4654      	mov	r4, sl
 8003406:	2205      	movs	r2, #5
 8003408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800340c:	484e      	ldr	r0, [pc, #312]	@ (8003548 <_svfiprintf_r+0x1e4>)
 800340e:	f000 fa5f 	bl	80038d0 <memchr>
 8003412:	9a04      	ldr	r2, [sp, #16]
 8003414:	b9d8      	cbnz	r0, 800344e <_svfiprintf_r+0xea>
 8003416:	06d0      	lsls	r0, r2, #27
 8003418:	bf44      	itt	mi
 800341a:	2320      	movmi	r3, #32
 800341c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003420:	0711      	lsls	r1, r2, #28
 8003422:	bf44      	itt	mi
 8003424:	232b      	movmi	r3, #43	@ 0x2b
 8003426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800342a:	f89a 3000 	ldrb.w	r3, [sl]
 800342e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003430:	d015      	beq.n	800345e <_svfiprintf_r+0xfa>
 8003432:	4654      	mov	r4, sl
 8003434:	2000      	movs	r0, #0
 8003436:	f04f 0c0a 	mov.w	ip, #10
 800343a:	9a07      	ldr	r2, [sp, #28]
 800343c:	4621      	mov	r1, r4
 800343e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003442:	3b30      	subs	r3, #48	@ 0x30
 8003444:	2b09      	cmp	r3, #9
 8003446:	d94b      	bls.n	80034e0 <_svfiprintf_r+0x17c>
 8003448:	b1b0      	cbz	r0, 8003478 <_svfiprintf_r+0x114>
 800344a:	9207      	str	r2, [sp, #28]
 800344c:	e014      	b.n	8003478 <_svfiprintf_r+0x114>
 800344e:	eba0 0308 	sub.w	r3, r0, r8
 8003452:	fa09 f303 	lsl.w	r3, r9, r3
 8003456:	4313      	orrs	r3, r2
 8003458:	46a2      	mov	sl, r4
 800345a:	9304      	str	r3, [sp, #16]
 800345c:	e7d2      	b.n	8003404 <_svfiprintf_r+0xa0>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	1d19      	adds	r1, r3, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	9103      	str	r1, [sp, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	bfbb      	ittet	lt
 800346a:	425b      	neglt	r3, r3
 800346c:	f042 0202 	orrlt.w	r2, r2, #2
 8003470:	9307      	strge	r3, [sp, #28]
 8003472:	9307      	strlt	r3, [sp, #28]
 8003474:	bfb8      	it	lt
 8003476:	9204      	strlt	r2, [sp, #16]
 8003478:	7823      	ldrb	r3, [r4, #0]
 800347a:	2b2e      	cmp	r3, #46	@ 0x2e
 800347c:	d10a      	bne.n	8003494 <_svfiprintf_r+0x130>
 800347e:	7863      	ldrb	r3, [r4, #1]
 8003480:	2b2a      	cmp	r3, #42	@ 0x2a
 8003482:	d132      	bne.n	80034ea <_svfiprintf_r+0x186>
 8003484:	9b03      	ldr	r3, [sp, #12]
 8003486:	3402      	adds	r4, #2
 8003488:	1d1a      	adds	r2, r3, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	9203      	str	r2, [sp, #12]
 800348e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003492:	9305      	str	r3, [sp, #20]
 8003494:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800354c <_svfiprintf_r+0x1e8>
 8003498:	2203      	movs	r2, #3
 800349a:	4650      	mov	r0, sl
 800349c:	7821      	ldrb	r1, [r4, #0]
 800349e:	f000 fa17 	bl	80038d0 <memchr>
 80034a2:	b138      	cbz	r0, 80034b4 <_svfiprintf_r+0x150>
 80034a4:	2240      	movs	r2, #64	@ 0x40
 80034a6:	9b04      	ldr	r3, [sp, #16]
 80034a8:	eba0 000a 	sub.w	r0, r0, sl
 80034ac:	4082      	lsls	r2, r0
 80034ae:	4313      	orrs	r3, r2
 80034b0:	3401      	adds	r4, #1
 80034b2:	9304      	str	r3, [sp, #16]
 80034b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b8:	2206      	movs	r2, #6
 80034ba:	4825      	ldr	r0, [pc, #148]	@ (8003550 <_svfiprintf_r+0x1ec>)
 80034bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034c0:	f000 fa06 	bl	80038d0 <memchr>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d036      	beq.n	8003536 <_svfiprintf_r+0x1d2>
 80034c8:	4b22      	ldr	r3, [pc, #136]	@ (8003554 <_svfiprintf_r+0x1f0>)
 80034ca:	bb1b      	cbnz	r3, 8003514 <_svfiprintf_r+0x1b0>
 80034cc:	9b03      	ldr	r3, [sp, #12]
 80034ce:	3307      	adds	r3, #7
 80034d0:	f023 0307 	bic.w	r3, r3, #7
 80034d4:	3308      	adds	r3, #8
 80034d6:	9303      	str	r3, [sp, #12]
 80034d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034da:	4433      	add	r3, r6
 80034dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80034de:	e76a      	b.n	80033b6 <_svfiprintf_r+0x52>
 80034e0:	460c      	mov	r4, r1
 80034e2:	2001      	movs	r0, #1
 80034e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80034e8:	e7a8      	b.n	800343c <_svfiprintf_r+0xd8>
 80034ea:	2300      	movs	r3, #0
 80034ec:	f04f 0c0a 	mov.w	ip, #10
 80034f0:	4619      	mov	r1, r3
 80034f2:	3401      	adds	r4, #1
 80034f4:	9305      	str	r3, [sp, #20]
 80034f6:	4620      	mov	r0, r4
 80034f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034fc:	3a30      	subs	r2, #48	@ 0x30
 80034fe:	2a09      	cmp	r2, #9
 8003500:	d903      	bls.n	800350a <_svfiprintf_r+0x1a6>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0c6      	beq.n	8003494 <_svfiprintf_r+0x130>
 8003506:	9105      	str	r1, [sp, #20]
 8003508:	e7c4      	b.n	8003494 <_svfiprintf_r+0x130>
 800350a:	4604      	mov	r4, r0
 800350c:	2301      	movs	r3, #1
 800350e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003512:	e7f0      	b.n	80034f6 <_svfiprintf_r+0x192>
 8003514:	ab03      	add	r3, sp, #12
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	462a      	mov	r2, r5
 800351a:	4638      	mov	r0, r7
 800351c:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <_svfiprintf_r+0x1f4>)
 800351e:	a904      	add	r1, sp, #16
 8003520:	f3af 8000 	nop.w
 8003524:	1c42      	adds	r2, r0, #1
 8003526:	4606      	mov	r6, r0
 8003528:	d1d6      	bne.n	80034d8 <_svfiprintf_r+0x174>
 800352a:	89ab      	ldrh	r3, [r5, #12]
 800352c:	065b      	lsls	r3, r3, #25
 800352e:	f53f af2d 	bmi.w	800338c <_svfiprintf_r+0x28>
 8003532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003534:	e72c      	b.n	8003390 <_svfiprintf_r+0x2c>
 8003536:	ab03      	add	r3, sp, #12
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	462a      	mov	r2, r5
 800353c:	4638      	mov	r0, r7
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <_svfiprintf_r+0x1f4>)
 8003540:	a904      	add	r1, sp, #16
 8003542:	f000 f87d 	bl	8003640 <_printf_i>
 8003546:	e7ed      	b.n	8003524 <_svfiprintf_r+0x1c0>
 8003548:	08004724 	.word	0x08004724
 800354c:	0800472a 	.word	0x0800472a
 8003550:	0800472e 	.word	0x0800472e
 8003554:	00000000 	.word	0x00000000
 8003558:	080032ad 	.word	0x080032ad

0800355c <_printf_common>:
 800355c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003560:	4616      	mov	r6, r2
 8003562:	4698      	mov	r8, r3
 8003564:	688a      	ldr	r2, [r1, #8]
 8003566:	690b      	ldr	r3, [r1, #16]
 8003568:	4607      	mov	r7, r0
 800356a:	4293      	cmp	r3, r2
 800356c:	bfb8      	it	lt
 800356e:	4613      	movlt	r3, r2
 8003570:	6033      	str	r3, [r6, #0]
 8003572:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003576:	460c      	mov	r4, r1
 8003578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800357c:	b10a      	cbz	r2, 8003582 <_printf_common+0x26>
 800357e:	3301      	adds	r3, #1
 8003580:	6033      	str	r3, [r6, #0]
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	0699      	lsls	r1, r3, #26
 8003586:	bf42      	ittt	mi
 8003588:	6833      	ldrmi	r3, [r6, #0]
 800358a:	3302      	addmi	r3, #2
 800358c:	6033      	strmi	r3, [r6, #0]
 800358e:	6825      	ldr	r5, [r4, #0]
 8003590:	f015 0506 	ands.w	r5, r5, #6
 8003594:	d106      	bne.n	80035a4 <_printf_common+0x48>
 8003596:	f104 0a19 	add.w	sl, r4, #25
 800359a:	68e3      	ldr	r3, [r4, #12]
 800359c:	6832      	ldr	r2, [r6, #0]
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	42ab      	cmp	r3, r5
 80035a2:	dc2b      	bgt.n	80035fc <_printf_common+0xa0>
 80035a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	3b00      	subs	r3, #0
 80035ac:	bf18      	it	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	0692      	lsls	r2, r2, #26
 80035b2:	d430      	bmi.n	8003616 <_printf_common+0xba>
 80035b4:	4641      	mov	r1, r8
 80035b6:	4638      	mov	r0, r7
 80035b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035bc:	47c8      	blx	r9
 80035be:	3001      	adds	r0, #1
 80035c0:	d023      	beq.n	800360a <_printf_common+0xae>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	6922      	ldr	r2, [r4, #16]
 80035c6:	f003 0306 	and.w	r3, r3, #6
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf14      	ite	ne
 80035ce:	2500      	movne	r5, #0
 80035d0:	6833      	ldreq	r3, [r6, #0]
 80035d2:	f04f 0600 	mov.w	r6, #0
 80035d6:	bf08      	it	eq
 80035d8:	68e5      	ldreq	r5, [r4, #12]
 80035da:	f104 041a 	add.w	r4, r4, #26
 80035de:	bf08      	it	eq
 80035e0:	1aed      	subeq	r5, r5, r3
 80035e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035e6:	bf08      	it	eq
 80035e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bfc4      	itt	gt
 80035f0:	1a9b      	subgt	r3, r3, r2
 80035f2:	18ed      	addgt	r5, r5, r3
 80035f4:	42b5      	cmp	r5, r6
 80035f6:	d11a      	bne.n	800362e <_printf_common+0xd2>
 80035f8:	2000      	movs	r0, #0
 80035fa:	e008      	b.n	800360e <_printf_common+0xb2>
 80035fc:	2301      	movs	r3, #1
 80035fe:	4652      	mov	r2, sl
 8003600:	4641      	mov	r1, r8
 8003602:	4638      	mov	r0, r7
 8003604:	47c8      	blx	r9
 8003606:	3001      	adds	r0, #1
 8003608:	d103      	bne.n	8003612 <_printf_common+0xb6>
 800360a:	f04f 30ff 	mov.w	r0, #4294967295
 800360e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003612:	3501      	adds	r5, #1
 8003614:	e7c1      	b.n	800359a <_printf_common+0x3e>
 8003616:	2030      	movs	r0, #48	@ 0x30
 8003618:	18e1      	adds	r1, r4, r3
 800361a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003624:	4422      	add	r2, r4
 8003626:	3302      	adds	r3, #2
 8003628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800362c:	e7c2      	b.n	80035b4 <_printf_common+0x58>
 800362e:	2301      	movs	r3, #1
 8003630:	4622      	mov	r2, r4
 8003632:	4641      	mov	r1, r8
 8003634:	4638      	mov	r0, r7
 8003636:	47c8      	blx	r9
 8003638:	3001      	adds	r0, #1
 800363a:	d0e6      	beq.n	800360a <_printf_common+0xae>
 800363c:	3601      	adds	r6, #1
 800363e:	e7d9      	b.n	80035f4 <_printf_common+0x98>

08003640 <_printf_i>:
 8003640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003644:	7e0f      	ldrb	r7, [r1, #24]
 8003646:	4691      	mov	r9, r2
 8003648:	2f78      	cmp	r7, #120	@ 0x78
 800364a:	4680      	mov	r8, r0
 800364c:	460c      	mov	r4, r1
 800364e:	469a      	mov	sl, r3
 8003650:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003656:	d807      	bhi.n	8003668 <_printf_i+0x28>
 8003658:	2f62      	cmp	r7, #98	@ 0x62
 800365a:	d80a      	bhi.n	8003672 <_printf_i+0x32>
 800365c:	2f00      	cmp	r7, #0
 800365e:	f000 80d1 	beq.w	8003804 <_printf_i+0x1c4>
 8003662:	2f58      	cmp	r7, #88	@ 0x58
 8003664:	f000 80b8 	beq.w	80037d8 <_printf_i+0x198>
 8003668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800366c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003670:	e03a      	b.n	80036e8 <_printf_i+0xa8>
 8003672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003676:	2b15      	cmp	r3, #21
 8003678:	d8f6      	bhi.n	8003668 <_printf_i+0x28>
 800367a:	a101      	add	r1, pc, #4	@ (adr r1, 8003680 <_printf_i+0x40>)
 800367c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003680:	080036d9 	.word	0x080036d9
 8003684:	080036ed 	.word	0x080036ed
 8003688:	08003669 	.word	0x08003669
 800368c:	08003669 	.word	0x08003669
 8003690:	08003669 	.word	0x08003669
 8003694:	08003669 	.word	0x08003669
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003669 	.word	0x08003669
 80036a0:	08003669 	.word	0x08003669
 80036a4:	08003669 	.word	0x08003669
 80036a8:	08003669 	.word	0x08003669
 80036ac:	080037eb 	.word	0x080037eb
 80036b0:	08003717 	.word	0x08003717
 80036b4:	080037a5 	.word	0x080037a5
 80036b8:	08003669 	.word	0x08003669
 80036bc:	08003669 	.word	0x08003669
 80036c0:	0800380d 	.word	0x0800380d
 80036c4:	08003669 	.word	0x08003669
 80036c8:	08003717 	.word	0x08003717
 80036cc:	08003669 	.word	0x08003669
 80036d0:	08003669 	.word	0x08003669
 80036d4:	080037ad 	.word	0x080037ad
 80036d8:	6833      	ldr	r3, [r6, #0]
 80036da:	1d1a      	adds	r2, r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6032      	str	r2, [r6, #0]
 80036e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036e8:	2301      	movs	r3, #1
 80036ea:	e09c      	b.n	8003826 <_printf_i+0x1e6>
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	6820      	ldr	r0, [r4, #0]
 80036f0:	1d19      	adds	r1, r3, #4
 80036f2:	6031      	str	r1, [r6, #0]
 80036f4:	0606      	lsls	r6, r0, #24
 80036f6:	d501      	bpl.n	80036fc <_printf_i+0xbc>
 80036f8:	681d      	ldr	r5, [r3, #0]
 80036fa:	e003      	b.n	8003704 <_printf_i+0xc4>
 80036fc:	0645      	lsls	r5, r0, #25
 80036fe:	d5fb      	bpl.n	80036f8 <_printf_i+0xb8>
 8003700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003704:	2d00      	cmp	r5, #0
 8003706:	da03      	bge.n	8003710 <_printf_i+0xd0>
 8003708:	232d      	movs	r3, #45	@ 0x2d
 800370a:	426d      	negs	r5, r5
 800370c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003710:	230a      	movs	r3, #10
 8003712:	4858      	ldr	r0, [pc, #352]	@ (8003874 <_printf_i+0x234>)
 8003714:	e011      	b.n	800373a <_printf_i+0xfa>
 8003716:	6821      	ldr	r1, [r4, #0]
 8003718:	6833      	ldr	r3, [r6, #0]
 800371a:	0608      	lsls	r0, r1, #24
 800371c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003720:	d402      	bmi.n	8003728 <_printf_i+0xe8>
 8003722:	0649      	lsls	r1, r1, #25
 8003724:	bf48      	it	mi
 8003726:	b2ad      	uxthmi	r5, r5
 8003728:	2f6f      	cmp	r7, #111	@ 0x6f
 800372a:	6033      	str	r3, [r6, #0]
 800372c:	bf14      	ite	ne
 800372e:	230a      	movne	r3, #10
 8003730:	2308      	moveq	r3, #8
 8003732:	4850      	ldr	r0, [pc, #320]	@ (8003874 <_printf_i+0x234>)
 8003734:	2100      	movs	r1, #0
 8003736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800373a:	6866      	ldr	r6, [r4, #4]
 800373c:	2e00      	cmp	r6, #0
 800373e:	60a6      	str	r6, [r4, #8]
 8003740:	db05      	blt.n	800374e <_printf_i+0x10e>
 8003742:	6821      	ldr	r1, [r4, #0]
 8003744:	432e      	orrs	r6, r5
 8003746:	f021 0104 	bic.w	r1, r1, #4
 800374a:	6021      	str	r1, [r4, #0]
 800374c:	d04b      	beq.n	80037e6 <_printf_i+0x1a6>
 800374e:	4616      	mov	r6, r2
 8003750:	fbb5 f1f3 	udiv	r1, r5, r3
 8003754:	fb03 5711 	mls	r7, r3, r1, r5
 8003758:	5dc7      	ldrb	r7, [r0, r7]
 800375a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800375e:	462f      	mov	r7, r5
 8003760:	42bb      	cmp	r3, r7
 8003762:	460d      	mov	r5, r1
 8003764:	d9f4      	bls.n	8003750 <_printf_i+0x110>
 8003766:	2b08      	cmp	r3, #8
 8003768:	d10b      	bne.n	8003782 <_printf_i+0x142>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	07df      	lsls	r7, r3, #31
 800376e:	d508      	bpl.n	8003782 <_printf_i+0x142>
 8003770:	6923      	ldr	r3, [r4, #16]
 8003772:	6861      	ldr	r1, [r4, #4]
 8003774:	4299      	cmp	r1, r3
 8003776:	bfde      	ittt	le
 8003778:	2330      	movle	r3, #48	@ 0x30
 800377a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800377e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003782:	1b92      	subs	r2, r2, r6
 8003784:	6122      	str	r2, [r4, #16]
 8003786:	464b      	mov	r3, r9
 8003788:	4621      	mov	r1, r4
 800378a:	4640      	mov	r0, r8
 800378c:	f8cd a000 	str.w	sl, [sp]
 8003790:	aa03      	add	r2, sp, #12
 8003792:	f7ff fee3 	bl	800355c <_printf_common>
 8003796:	3001      	adds	r0, #1
 8003798:	d14a      	bne.n	8003830 <_printf_i+0x1f0>
 800379a:	f04f 30ff 	mov.w	r0, #4294967295
 800379e:	b004      	add	sp, #16
 80037a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	f043 0320 	orr.w	r3, r3, #32
 80037aa:	6023      	str	r3, [r4, #0]
 80037ac:	2778      	movs	r7, #120	@ 0x78
 80037ae:	4832      	ldr	r0, [pc, #200]	@ (8003878 <_printf_i+0x238>)
 80037b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	6831      	ldr	r1, [r6, #0]
 80037b8:	061f      	lsls	r7, r3, #24
 80037ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80037be:	d402      	bmi.n	80037c6 <_printf_i+0x186>
 80037c0:	065f      	lsls	r7, r3, #25
 80037c2:	bf48      	it	mi
 80037c4:	b2ad      	uxthmi	r5, r5
 80037c6:	6031      	str	r1, [r6, #0]
 80037c8:	07d9      	lsls	r1, r3, #31
 80037ca:	bf44      	itt	mi
 80037cc:	f043 0320 	orrmi.w	r3, r3, #32
 80037d0:	6023      	strmi	r3, [r4, #0]
 80037d2:	b11d      	cbz	r5, 80037dc <_printf_i+0x19c>
 80037d4:	2310      	movs	r3, #16
 80037d6:	e7ad      	b.n	8003734 <_printf_i+0xf4>
 80037d8:	4826      	ldr	r0, [pc, #152]	@ (8003874 <_printf_i+0x234>)
 80037da:	e7e9      	b.n	80037b0 <_printf_i+0x170>
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	f023 0320 	bic.w	r3, r3, #32
 80037e2:	6023      	str	r3, [r4, #0]
 80037e4:	e7f6      	b.n	80037d4 <_printf_i+0x194>
 80037e6:	4616      	mov	r6, r2
 80037e8:	e7bd      	b.n	8003766 <_printf_i+0x126>
 80037ea:	6833      	ldr	r3, [r6, #0]
 80037ec:	6825      	ldr	r5, [r4, #0]
 80037ee:	1d18      	adds	r0, r3, #4
 80037f0:	6961      	ldr	r1, [r4, #20]
 80037f2:	6030      	str	r0, [r6, #0]
 80037f4:	062e      	lsls	r6, r5, #24
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	d501      	bpl.n	80037fe <_printf_i+0x1be>
 80037fa:	6019      	str	r1, [r3, #0]
 80037fc:	e002      	b.n	8003804 <_printf_i+0x1c4>
 80037fe:	0668      	lsls	r0, r5, #25
 8003800:	d5fb      	bpl.n	80037fa <_printf_i+0x1ba>
 8003802:	8019      	strh	r1, [r3, #0]
 8003804:	2300      	movs	r3, #0
 8003806:	4616      	mov	r6, r2
 8003808:	6123      	str	r3, [r4, #16]
 800380a:	e7bc      	b.n	8003786 <_printf_i+0x146>
 800380c:	6833      	ldr	r3, [r6, #0]
 800380e:	2100      	movs	r1, #0
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	6032      	str	r2, [r6, #0]
 8003814:	681e      	ldr	r6, [r3, #0]
 8003816:	6862      	ldr	r2, [r4, #4]
 8003818:	4630      	mov	r0, r6
 800381a:	f000 f859 	bl	80038d0 <memchr>
 800381e:	b108      	cbz	r0, 8003824 <_printf_i+0x1e4>
 8003820:	1b80      	subs	r0, r0, r6
 8003822:	6060      	str	r0, [r4, #4]
 8003824:	6863      	ldr	r3, [r4, #4]
 8003826:	6123      	str	r3, [r4, #16]
 8003828:	2300      	movs	r3, #0
 800382a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800382e:	e7aa      	b.n	8003786 <_printf_i+0x146>
 8003830:	4632      	mov	r2, r6
 8003832:	4649      	mov	r1, r9
 8003834:	4640      	mov	r0, r8
 8003836:	6923      	ldr	r3, [r4, #16]
 8003838:	47d0      	blx	sl
 800383a:	3001      	adds	r0, #1
 800383c:	d0ad      	beq.n	800379a <_printf_i+0x15a>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	079b      	lsls	r3, r3, #30
 8003842:	d413      	bmi.n	800386c <_printf_i+0x22c>
 8003844:	68e0      	ldr	r0, [r4, #12]
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	4298      	cmp	r0, r3
 800384a:	bfb8      	it	lt
 800384c:	4618      	movlt	r0, r3
 800384e:	e7a6      	b.n	800379e <_printf_i+0x15e>
 8003850:	2301      	movs	r3, #1
 8003852:	4632      	mov	r2, r6
 8003854:	4649      	mov	r1, r9
 8003856:	4640      	mov	r0, r8
 8003858:	47d0      	blx	sl
 800385a:	3001      	adds	r0, #1
 800385c:	d09d      	beq.n	800379a <_printf_i+0x15a>
 800385e:	3501      	adds	r5, #1
 8003860:	68e3      	ldr	r3, [r4, #12]
 8003862:	9903      	ldr	r1, [sp, #12]
 8003864:	1a5b      	subs	r3, r3, r1
 8003866:	42ab      	cmp	r3, r5
 8003868:	dcf2      	bgt.n	8003850 <_printf_i+0x210>
 800386a:	e7eb      	b.n	8003844 <_printf_i+0x204>
 800386c:	2500      	movs	r5, #0
 800386e:	f104 0619 	add.w	r6, r4, #25
 8003872:	e7f5      	b.n	8003860 <_printf_i+0x220>
 8003874:	08004735 	.word	0x08004735
 8003878:	08004746 	.word	0x08004746

0800387c <memmove>:
 800387c:	4288      	cmp	r0, r1
 800387e:	b510      	push	{r4, lr}
 8003880:	eb01 0402 	add.w	r4, r1, r2
 8003884:	d902      	bls.n	800388c <memmove+0x10>
 8003886:	4284      	cmp	r4, r0
 8003888:	4623      	mov	r3, r4
 800388a:	d807      	bhi.n	800389c <memmove+0x20>
 800388c:	1e43      	subs	r3, r0, #1
 800388e:	42a1      	cmp	r1, r4
 8003890:	d008      	beq.n	80038a4 <memmove+0x28>
 8003892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800389a:	e7f8      	b.n	800388e <memmove+0x12>
 800389c:	4601      	mov	r1, r0
 800389e:	4402      	add	r2, r0
 80038a0:	428a      	cmp	r2, r1
 80038a2:	d100      	bne.n	80038a6 <memmove+0x2a>
 80038a4:	bd10      	pop	{r4, pc}
 80038a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038ae:	e7f7      	b.n	80038a0 <memmove+0x24>

080038b0 <_sbrk_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	2300      	movs	r3, #0
 80038b4:	4d05      	ldr	r5, [pc, #20]	@ (80038cc <_sbrk_r+0x1c>)
 80038b6:	4604      	mov	r4, r0
 80038b8:	4608      	mov	r0, r1
 80038ba:	602b      	str	r3, [r5, #0]
 80038bc:	f7ff fb5e 	bl	8002f7c <_sbrk>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_sbrk_r+0x1a>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_sbrk_r+0x1a>
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	2000073c 	.word	0x2000073c

080038d0 <memchr>:
 80038d0:	4603      	mov	r3, r0
 80038d2:	b510      	push	{r4, lr}
 80038d4:	b2c9      	uxtb	r1, r1
 80038d6:	4402      	add	r2, r0
 80038d8:	4293      	cmp	r3, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	d101      	bne.n	80038e2 <memchr+0x12>
 80038de:	2000      	movs	r0, #0
 80038e0:	e003      	b.n	80038ea <memchr+0x1a>
 80038e2:	7804      	ldrb	r4, [r0, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	428c      	cmp	r4, r1
 80038e8:	d1f6      	bne.n	80038d8 <memchr+0x8>
 80038ea:	bd10      	pop	{r4, pc}

080038ec <memcpy>:
 80038ec:	440a      	add	r2, r1
 80038ee:	4291      	cmp	r1, r2
 80038f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80038f4:	d100      	bne.n	80038f8 <memcpy+0xc>
 80038f6:	4770      	bx	lr
 80038f8:	b510      	push	{r4, lr}
 80038fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038fe:	4291      	cmp	r1, r2
 8003900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003904:	d1f9      	bne.n	80038fa <memcpy+0xe>
 8003906:	bd10      	pop	{r4, pc}

08003908 <_realloc_r>:
 8003908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390c:	4607      	mov	r7, r0
 800390e:	4614      	mov	r4, r2
 8003910:	460d      	mov	r5, r1
 8003912:	b921      	cbnz	r1, 800391e <_realloc_r+0x16>
 8003914:	4611      	mov	r1, r2
 8003916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800391a:	f7ff bc3b 	b.w	8003194 <_malloc_r>
 800391e:	b92a      	cbnz	r2, 800392c <_realloc_r+0x24>
 8003920:	f7ff fbce 	bl	80030c0 <_free_r>
 8003924:	4625      	mov	r5, r4
 8003926:	4628      	mov	r0, r5
 8003928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800392c:	f000 f81a 	bl	8003964 <_malloc_usable_size_r>
 8003930:	4284      	cmp	r4, r0
 8003932:	4606      	mov	r6, r0
 8003934:	d802      	bhi.n	800393c <_realloc_r+0x34>
 8003936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800393a:	d8f4      	bhi.n	8003926 <_realloc_r+0x1e>
 800393c:	4621      	mov	r1, r4
 800393e:	4638      	mov	r0, r7
 8003940:	f7ff fc28 	bl	8003194 <_malloc_r>
 8003944:	4680      	mov	r8, r0
 8003946:	b908      	cbnz	r0, 800394c <_realloc_r+0x44>
 8003948:	4645      	mov	r5, r8
 800394a:	e7ec      	b.n	8003926 <_realloc_r+0x1e>
 800394c:	42b4      	cmp	r4, r6
 800394e:	4622      	mov	r2, r4
 8003950:	4629      	mov	r1, r5
 8003952:	bf28      	it	cs
 8003954:	4632      	movcs	r2, r6
 8003956:	f7ff ffc9 	bl	80038ec <memcpy>
 800395a:	4629      	mov	r1, r5
 800395c:	4638      	mov	r0, r7
 800395e:	f7ff fbaf 	bl	80030c0 <_free_r>
 8003962:	e7f1      	b.n	8003948 <_realloc_r+0x40>

08003964 <_malloc_usable_size_r>:
 8003964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003968:	1f18      	subs	r0, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	bfbc      	itt	lt
 800396e:	580b      	ldrlt	r3, [r1, r0]
 8003970:	18c0      	addlt	r0, r0, r3
 8003972:	4770      	bx	lr

08003974 <_init>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr

08003980 <_fini>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr
